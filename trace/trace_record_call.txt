(call) registry.py:198: __call__
	registry.py:200: cls = self.get_entity()
(call) registry.py:215: get_entity
	registry.py:217: if self.entity is None:
	registry.py:218: self.entity = getattr(importlib.import_module(self.module_name), self.entity_name)
(call) countries\__init__.py:0: <module>
	countries\__init__.py:14: from .albania import Albania, AL, ALB
(call) countries\albania.py:0: <module>
	countries\albania.py:12: from holidays.calendars.gregorian import JAN, MAR
	countries\albania.py:13: from holidays.calendars.julian import JULIAN_CALENDAR
	countries\albania.py:14: from holidays.groups import (
(call) groups\__init__.py:0: <module>
	groups\__init__.py:14: from holidays.groups.buddhist import BuddhistCalendarHolidays
(call) groups\buddhist.py:0: <module>
	groups\buddhist.py:12: from datetime import date
	groups\buddhist.py:13: from typing import Optional, Tuple
	groups\buddhist.py:15: from holidays.calendars import _BuddhistLunisolar
	groups\buddhist.py:18: class BuddhistCalendarHolidays:
(call) groups\buddhist.py:18: BuddhistCalendarHolidays
	groups\buddhist.py:18: class BuddhistCalendarHolidays:
	groups\buddhist.py:19: """
	groups\buddhist.py:23: def __init__(self, cls=None, show_estimated=False) -> None:
	groups\buddhist.py:27: def _add_buddhist_calendar_holiday(
	groups\buddhist.py:28: self, name: str, dt_estimated: Tuple[date, bool]
	groups\buddhist.py:27: def _add_buddhist_calendar_holiday(
	groups\buddhist.py:28: self, name: str, dt_estimated: Tuple[date, bool]
	groups\buddhist.py:27: def _add_buddhist_calendar_holiday(
	groups\buddhist.py:29: ) -> Optional[date]:
	groups\buddhist.py:27: def _add_buddhist_calendar_holiday(
	groups\buddhist.py:46: def _add_vesak(self, name) -> Optional[date]:
	groups\buddhist.py:57: def _add_vesak_may(self, name) -> Optional[date]:
	groups\__init__.py:15: from holidays.groups.chinese import ChineseCalendarHolidays
(call) groups\chinese.py:0: <module>
	groups\chinese.py:12: from datetime import date
	groups\chinese.py:13: from datetime import timedelta as td
	groups\chinese.py:14: from typing import Optional, Tuple
	groups\chinese.py:16: from holidays.calendars import _ChineseLunisolar
	groups\chinese.py:17: from holidays.calendars.gregorian import APR
	groups\chinese.py:20: class ChineseCalendarHolidays:
(call) groups\chinese.py:20: ChineseCalendarHolidays
	groups\chinese.py:20: class ChineseCalendarHolidays:
	groups\chinese.py:21: """
	groups\chinese.py:25: def __init__(self, cls=None, show_estimated=False) -> None:
	groups\chinese.py:29: @property
	groups\chinese.py:30: def _chinese_new_year(self):
	groups\chinese.py:29: @property
	groups\chinese.py:30: def _chinese_new_year(self):
	groups\chinese.py:36: @property
	groups\chinese.py:37: def _qingming_date(self):
	groups\chinese.py:36: @property
	groups\chinese.py:37: def _qingming_date(self):
	groups\chinese.py:43: @property
	groups\chinese.py:44: def _mid_autumn_festival(self):
	groups\chinese.py:43: @property
	groups\chinese.py:44: def _mid_autumn_festival(self):
	groups\chinese.py:51: self, name: str, dt_estimated: Tuple[date, bool], days_delta: int = 0
	groups\chinese.py:50: def _add_chinese_calendar_holiday(
	groups\chinese.py:51: self, name: str, dt_estimated: Tuple[date, bool], days_delta: int = 0
	groups\chinese.py:50: def _add_chinese_calendar_holiday(
	groups\chinese.py:51: self, name: str, dt_estimated: Tuple[date, bool], days_delta: int = 0
	groups\chinese.py:50: def _add_chinese_calendar_holiday(
	groups\chinese.py:51: self, name: str, dt_estimated: Tuple[date, bool], days_delta: int = 0
	groups\chinese.py:50: def _add_chinese_calendar_holiday(
	groups\chinese.py:52: ) -> Optional[date]:
	groups\chinese.py:50: def _add_chinese_calendar_holiday(
	groups\chinese.py:72: def _add_chinese_birthday_of_buddha(self, name) -> Optional[date]:
	groups\chinese.py:86: def _add_chinese_new_years_eve(self, name) -> Optional[date]:
	groups\chinese.py:97: def _add_chinese_new_years_day(self, name) -> Optional[date]:
	groups\chinese.py:109: def _add_chinese_new_years_day_two(self, name) -> Optional[date]:
	groups\chinese.py:119: def _add_chinese_new_years_day_three(self, name) -> Optional[date]:
	groups\chinese.py:129: def _add_chinese_new_years_day_four(self, name) -> Optional[date]:
	groups\chinese.py:139: def _add_chinese_new_years_day_five(self, name) -> Optional[date]:
	groups\chinese.py:149: def _add_qingming_festival(self, name) -> date:
	groups\chinese.py:159: def _add_double_ninth_festival(self, name) -> Optional[date]:
	groups\chinese.py:171: def _add_dragon_boat_festival(self, name) -> Optional[date]:
	groups\chinese.py:183: def _add_hung_kings_day(self, name) -> Optional[date]:
	groups\chinese.py:195: def _add_mid_autumn_festival(self, name) -> Optional[date]:
	groups\chinese.py:207: def _add_mid_autumn_festival_day_two(self, name) -> Optional[date]:
	groups\__init__.py:16: from holidays.groups.christian import ChristianHolidays
(call) groups\christian.py:0: <module>
	groups\christian.py:12: from datetime import date
	groups\christian.py:13: from datetime import timedelta as td
	groups\christian.py:15: from dateutil.easter import EASTER_ORTHODOX, EASTER_WESTERN, easter
	groups\christian.py:17: from holidays.calendars.gregorian import GREGORIAN_CALENDAR, JAN, DEC
	groups\christian.py:18: from holidays.calendars.julian import JULIAN_CALENDAR
	groups\christian.py:19: from holidays.calendars.julian_revised import JULIAN_REVISED_CALENDAR
	groups\christian.py:22: class ChristianHolidays:
(call) groups\christian.py:22: ChristianHolidays
	groups\christian.py:22: class ChristianHolidays:
	groups\christian.py:23: """
	groups\christian.py:27: def __init__(self, calendar=GREGORIAN_CALENDAR) -> None:
	groups\christian.py:31: def __get_christmas_day(self, calendar=None):
	groups\christian.py:44: def __get_easter_sunday(self, calendar=None):
	groups\christian.py:56: @staticmethod
	groups\christian.py:57: def __is_gregorian_calendar(calendar):
	groups\christian.py:56: @staticmethod
	groups\christian.py:57: def __is_gregorian_calendar(calendar):
	groups\christian.py:64: @staticmethod
	groups\christian.py:65: def __is_julian_calendar(calendar):
	groups\christian.py:64: @staticmethod
	groups\christian.py:65: def __is_julian_calendar(calendar):
	groups\christian.py:72: @staticmethod
	groups\christian.py:73: def __verify_calendar(calendar):
	groups\christian.py:72: @staticmethod
	groups\christian.py:73: def __verify_calendar(calendar):
	groups\christian.py:83: @property
	groups\christian.py:84: def _christmas_day(self):
	groups\christian.py:83: @property
	groups\christian.py:84: def _christmas_day(self):
	groups\christian.py:90: @property
	groups\christian.py:91: def _easter_sunday(self):
	groups\christian.py:90: @property
	groups\christian.py:91: def _easter_sunday(self):
	groups\christian.py:97: def _add_all_saints_day(self, name) -> date:
	groups\christian.py:107: def _add_all_souls_day(self, name) -> date:
	groups\christian.py:117: def _add_ascension_thursday(self, name) -> date:
	groups\christian.py:127: def _add_ash_monday(self, name) -> date:
	groups\christian.py:137: def _add_ash_wednesday(self, name) -> date:
	groups\christian.py:146: def _add_assumption_of_mary_day(self, name, calendar=None) -> date:
	groups\christian.py:164: def _add_candlemas(self, name) -> date:
	groups\christian.py:176: def _add_carnival_monday(self, name) -> date:
	groups\christian.py:186: def _add_carnival_tuesday(self, name) -> date:
	groups\christian.py:196: def _add_christmas_day(self, name, calendar=None) -> date:
	groups\christian.py:206: def _add_christmas_day_two(self, name, calendar=None) -> date:
	groups\christian.py:216: def _add_christmas_day_three(self, name, calendar=None) -> date:
	groups\christian.py:225: def _add_christmas_eve(self, name, calendar=None) -> date:
	groups\christian.py:235: def _add_corpus_christi_day(self, name) -> date:
	groups\christian.py:247: def _add_easter_monday(self, name, calendar=None) -> date:
	groups\christian.py:258: def _add_easter_sunday(self, name, calendar=None) -> date:
	groups\christian.py:269: def _add_epiphany_day(self, name, calendar=None) -> date:
	groups\christian.py:287: def _add_good_friday(self, name, calendar=None) -> date:
	groups\christian.py:298: def _add_holy_saturday(self, name) -> date:
	groups\christian.py:307: def _add_holy_thursday(self, name) -> date:
	groups\christian.py:318: def _add_immaculate_conception_day(self, name) -> date:
	groups\christian.py:326: def _add_nativity_of_mary_day(self, name) -> date:
	groups\christian.py:337: def _add_palm_sunday(self, name) -> date:
	groups\christian.py:349: def _add_rejoicing_day(self, name) -> date:
	groups\christian.py:360: def _add_saint_georges_day(self, name) -> date:
	groups\christian.py:370: def _add_saint_james_day(self, name) -> date:
	groups\christian.py:379: def _add_saint_johns_day(self, name) -> date:
	groups\christian.py:389: def _add_saint_josephs_day(self, name) -> date:
	groups\christian.py:401: def _add_saints_peter_and_paul_day(self, name) -> date:
	groups\christian.py:411: def _add_whit_monday(self, name) -> date:
	groups\christian.py:422: def _add_whit_sunday(self, name) -> date:
	groups\__init__.py:17: from holidays.groups.custom import StaticHolidays
(call) groups\custom.py:0: <module>
	groups\custom.py:13: class StaticHolidays:
(call) groups\custom.py:13: StaticHolidays
	groups\custom.py:13: class StaticHolidays:
	groups\custom.py:14: """Helper class for special and substituted holidays support.
	groups\custom.py:20: def __init__(self, cls) -> None:
	groups\__init__.py:18: from holidays.groups.hindu import HinduCalendarHolidays
(call) groups\hindu.py:0: <module>
	groups\hindu.py:12: from datetime import date
	groups\hindu.py:13: from typing import Optional, Tuple
	groups\hindu.py:15: from holidays.calendars import _HinduLunisolar
	groups\hindu.py:18: class HinduCalendarHolidays:
(call) groups\hindu.py:18: HinduCalendarHolidays
	groups\hindu.py:18: class HinduCalendarHolidays:
	groups\hindu.py:19: """
	groups\hindu.py:23: def __init__(self, cls=None, show_estimated=False) -> None:
	groups\hindu.py:27: def _add_hindu_calendar_holiday(
	groups\hindu.py:28: self, name: str, dt_estimated: Tuple[date, bool]
	groups\hindu.py:27: def _add_hindu_calendar_holiday(
	groups\hindu.py:28: self, name: str, dt_estimated: Tuple[date, bool]
	groups\hindu.py:27: def _add_hindu_calendar_holiday(
	groups\hindu.py:29: ) -> Optional[date]:
	groups\hindu.py:27: def _add_hindu_calendar_holiday(
	groups\hindu.py:46: def _add_diwali(self, name) -> Optional[date]:
	groups\hindu.py:58: def _add_thaipusam(self, name) -> Optional[date]:
	groups\__init__.py:19: from holidays.groups.international import InternationalHolidays
(call) groups\international.py:0: <module>
	groups\international.py:12: from datetime import date
	groups\international.py:14: from holidays.calendars.gregorian import JAN
	groups\international.py:17: class InternationalHolidays:
(call) groups\international.py:17: InternationalHolidays
	groups\international.py:17: class InternationalHolidays:
	groups\international.py:18: """
	groups\international.py:22: @property
	groups\international.py:23: def _next_year_new_years_day(self):
	groups\international.py:22: @property
	groups\international.py:23: def _next_year_new_years_day(self):
	groups\international.py:29: def _add_africa_day(self, name):
	groups\international.py:40: def _add_anzac_day(self, name):
	groups\international.py:55: def _add_childrens_day(self, name, variation="JUN"):
	groups\international.py:77: def _add_columbus_day(self, name):
	groups\international.py:87: def _add_labor_day(self, name):
	groups\international.py:98: def _add_labor_day_two(self, name):
	groups\international.py:106: def _add_labor_day_three(self, name):
	groups\international.py:114: def _add_new_years_day(self, name) -> date:
	groups\international.py:124: def _add_new_years_day_two(self, name) -> date:
	groups\international.py:134: def _add_new_years_day_three(self, name) -> date:
	groups\international.py:144: def _add_new_years_day_four(self, name) -> date:
	groups\international.py:154: def _add_remembrance_day(self, name):
	groups\international.py:164: def _add_new_years_eve(self, name) -> date:
	groups\international.py:175: def _add_womens_day(self, name):
	groups\international.py:187: def _add_world_war_two_victory_day(self, name):
	groups\__init__.py:20: from holidays.groups.islamic import IslamicHolidays
(call) groups\islamic.py:0: <module>
	groups\islamic.py:12: from datetime import date
	groups\islamic.py:13: from datetime import timedelta as td
	groups\islamic.py:14: from typing import Iterable, Set, Tuple
	groups\islamic.py:16: from holidays.calendars import _IslamicLunar
	groups\islamic.py:19: class IslamicHolidays:
(call) groups\islamic.py:19: IslamicHolidays
	groups\islamic.py:19: class IslamicHolidays:
	groups\islamic.py:20: """
	groups\islamic.py:27: def __init__(self, cls=None) -> None:
	groups\islamic.py:30: def _add_ali_al_rida_death_day(self, name) -> Set[date]:
	groups\islamic.py:40: def _add_ali_birthday_day(self, name) -> Set[date]:
	groups\islamic.py:50: def _add_ali_death_day(self, name) -> Set[date]:
	groups\islamic.py:60: def _add_arbaeen_day(self, name) -> Set[date]:
	groups\islamic.py:70: def _add_arafah_day(self, name) -> Set[date]:
	groups\islamic.py:83: def _add_ashura_day(self, name) -> Set[date]:
	groups\islamic.py:95: def _add_ashura_eve(self, name) -> Set[date]:
	groups\islamic.py:107: def _add_eid_al_adha_day(self, name) -> Set[date]:
	groups\islamic.py:120: def _add_eid_al_adha_day_two(self, name) -> Set[date]:
	groups\islamic.py:130: def _add_eid_al_adha_day_three(self, name) -> Set[date]:
	groups\islamic.py:140: def _add_eid_al_adha_day_four(self, name) -> Set[date]:
	groups\islamic.py:150: def _add_eid_al_fitr_day(self, name) -> Set[date]:
	groups\islamic.py:163: def _add_eid_al_fitr_day_two(self, name) -> Set[date]:
	groups\islamic.py:173: def _add_eid_al_fitr_day_three(self, name) -> Set[date]:
	groups\islamic.py:183: def _add_eid_al_fitr_day_four(self, name) -> Set[date]:
	groups\islamic.py:193: def _add_eid_al_fitr_eve(self, name) -> Set[date]:
	groups\islamic.py:203: def _add_eid_al_ghadir_day(self, name) -> Set[date]:
	groups\islamic.py:213: def _add_fatima_death_day(self, name) -> Set[date]:
	groups\islamic.py:223: def _add_hari_hol_johor(self, name) -> Set[date]:
	groups\islamic.py:233: def _add_hasan_al_askari_death_day(self, name) -> Set[date]:
	groups\islamic.py:243: def _add_imam_mahdi_birthday_day(self, name) -> Set[date]:
	groups\islamic.py:254: self, name: str, dates: Iterable[Tuple[date, bool]], days_delta: int = 0
	groups\islamic.py:253: def _add_islamic_calendar_holiday(
	groups\islamic.py:254: self, name: str, dates: Iterable[Tuple[date, bool]], days_delta: int = 0
	groups\islamic.py:253: def _add_islamic_calendar_holiday(
	groups\islamic.py:254: self, name: str, dates: Iterable[Tuple[date, bool]], days_delta: int = 0
	groups\islamic.py:253: def _add_islamic_calendar_holiday(
	groups\islamic.py:254: self, name: str, dates: Iterable[Tuple[date, bool]], days_delta: int = 0
	groups\islamic.py:253: def _add_islamic_calendar_holiday(
	groups\islamic.py:255: ) -> Set[date]:
	groups\islamic.py:253: def _add_islamic_calendar_holiday(
	groups\islamic.py:276: def _add_islamic_new_year_day(self, name) -> Set[date]:
	groups\islamic.py:290: def _add_isra_and_miraj_day(self, name):
	groups\islamic.py:300: def _add_maldives_embraced_islam_day(self, name) -> Set[date]:
	groups\islamic.py:310: def _add_mawlid_day(self, name) -> Set[date]:
	groups\islamic.py:322: def _add_mawlid_day_two(self, name) -> Set[date]:
	groups\islamic.py:334: def _add_nuzul_al_quran_day(self, name) -> Set[date]:
	groups\islamic.py:347: def _add_prophet_death_day(self, name) -> Set[date]:
	groups\islamic.py:357: def _add_quamee_dhuvas_day(self, name) -> Set[date]:
	groups\islamic.py:367: def _add_ramadan_beginning_day(self, name) -> Set[date]:
	groups\islamic.py:379: def _add_sadiq_birthday_day(self, name) -> Set[date]:
	groups\islamic.py:389: def _add_sadiq_death_day(self, name) -> Set[date]:
	groups\islamic.py:399: def _add_tasua_day(self, name) -> Set[date]:
	groups\__init__.py:21: from holidays.groups.persian import PersianCalendarHolidays
(call) groups\persian.py:0: <module>
	groups\persian.py:12: from datetime import date
	groups\persian.py:13: from datetime import timedelta as td
	groups\persian.py:14: from typing import Optional
	groups\persian.py:16: from holidays.calendars.persian import _Persian
	groups\persian.py:19: class PersianCalendarHolidays:
(call) groups\persian.py:19: PersianCalendarHolidays
	groups\persian.py:19: class PersianCalendarHolidays:
	groups\persian.py:20: """
	groups\persian.py:24: def __init__(self) -> None:
	groups\persian.py:27: def _add_death_of_khomeini_day(self, name: str) -> Optional[date]:
	groups\persian.py:38: def _add_islamic_republic_day(self, name: str) -> Optional[date]:
	groups\persian.py:50: def _add_islamic_revolution_day(self, name: str) -> Optional[date]:
	groups\persian.py:63: def _add_khordad_uprising_day(self, name: str) -> Optional[date]:
	groups\persian.py:76: def _add_natures_day(self, name: str) -> Optional[date]:
	groups\persian.py:87: def _add_nowruz_day(self, name: str) -> Optional[date]:
	groups\persian.py:99: def _add_nowruz_day_two(self, name: str) -> Optional[date]:
	groups\persian.py:107: def _add_nowruz_day_three(self, name: str) -> Optional[date]:
	groups\persian.py:115: def _add_nowruz_day_four(self, name: str) -> Optional[date]:
	groups\persian.py:123: def _add_oil_nationalization_day(self, name: str) -> Optional[date]:
	groups\persian.py:136: self, name: str, dt: Optional[date], days_delta: int = 0
	groups\persian.py:135: def _add_persian_calendar_holiday(
	groups\persian.py:136: self, name: str, dt: Optional[date], days_delta: int = 0
	groups\persian.py:135: def _add_persian_calendar_holiday(
	groups\persian.py:136: self, name: str, dt: Optional[date], days_delta: int = 0
	groups\persian.py:135: def _add_persian_calendar_holiday(
	groups\persian.py:136: self, name: str, dt: Optional[date], days_delta: int = 0
	groups\persian.py:135: def _add_persian_calendar_holiday(
	groups\persian.py:137: ) -> Optional[date]:
	groups\persian.py:135: def _add_persian_calendar_holiday(
	groups\__init__.py:22: from holidays.groups.thai import ThaiCalendarHolidays
(call) groups\thai.py:0: <module>
	groups\thai.py:12: from datetime import date
	groups\thai.py:13: from typing import Optional
	groups\thai.py:15: from holidays.calendars.thai import THAI_CALENDAR, _ThaiLunisolar
	groups\thai.py:18: class ThaiCalendarHolidays:
(call) groups\thai.py:18: ThaiCalendarHolidays
	groups\thai.py:18: class ThaiCalendarHolidays:
	groups\thai.py:19: """
	groups\thai.py:26: def __init__(self, calendar=THAI_CALENDAR) -> None:
	groups\thai.py:30: def _add_asarnha_bucha(self, name) -> Optional[date]:
	groups\thai.py:47: def _add_boun_haw_khao_padapdin(self, name) -> Optional[date]:
	groups\thai.py:61: def _add_boun_haw_khao_salark(self, name) -> Optional[date]:
	groups\thai.py:75: def _add_boun_suang_heua(self, name) -> Optional[date]:
	groups\thai.py:89: def _add_khao_phansa(self, name) -> Optional[date]:
	groups\thai.py:106: def _add_loy_krathong(self, name) -> Optional[date]:
	groups\thai.py:122: def _add_makha_bucha(self, name, calendar=None) -> Optional[date]:
	groups\thai.py:140: def _add_ok_phansa(self, name) -> Optional[date]:
	groups\thai.py:154: def _add_pchum_ben(self, name) -> Optional[date]:
	groups\thai.py:169: def _add_preah_neangkoal(self, name) -> Optional[date]:
	groups\thai.py:183: def _add_thai_calendar_holiday(self, name, dt) -> Optional[date]:
	groups\thai.py:194: def _add_visakha_bucha(self, name, calendar=None) -> Optional[date]:
	countries\albania.py:20: from holidays.observed_holiday_base import ObservedHolidayBase, SAT_SUN_TO_NEXT_WORKDAY
(call) observed_holiday_base.py:0: <module>
	observed_holiday_base.py:12: from datetime import date
	observed_holiday_base.py:13: from datetime import timedelta as td
	observed_holiday_base.py:14: from typing import Dict, Optional, Tuple, Set
	observed_holiday_base.py:16: from holidays.calendars.gregorian import MON, TUE, WED, THU, FRI, SAT, SUN
	observed_holiday_base.py:17: from holidays.holiday_base import DateArg, HolidayBase
	observed_holiday_base.py:20: class ObservedRule(Dict[int, int]):
(call) observed_holiday_base.py:20: ObservedRule
	observed_holiday_base.py:20: class ObservedRule(Dict[int, int]):
	observed_holiday_base.py:21: __slots__ = ()
	observed_holiday_base.py:23: def __add__(self, other):
	observed_holiday_base.py:29: MON_TO_NEXT_TUE = ObservedRule({MON: +1})
	observed_holiday_base.py:31: TUE_TO_PREV_MON = ObservedRule({TUE: -1})
	observed_holiday_base.py:32: TUE_TO_PREV_FRI = ObservedRule({TUE: -4})
	observed_holiday_base.py:34: WED_TO_PREV_MON = ObservedRule({WED: -2})
	observed_holiday_base.py:35: WED_TO_NEXT_FRI = ObservedRule({WED: +2})
	observed_holiday_base.py:37: THU_TO_PREV_MON = ObservedRule({THU: -3})
	observed_holiday_base.py:38: THU_TO_PREV_WED = ObservedRule({THU: -1})
	observed_holiday_base.py:39: THU_TO_NEXT_MON = ObservedRule({THU: +4})
	observed_holiday_base.py:40: THU_TO_NEXT_FRI = ObservedRule({THU: +1})
	observed_holiday_base.py:42: FRI_TO_PREV_WED = ObservedRule({FRI: -2})
	observed_holiday_base.py:43: FRI_TO_PREV_THU = ObservedRule({FRI: -1})
	observed_holiday_base.py:44: FRI_TO_NEXT_MON = ObservedRule({FRI: +3})
	observed_holiday_base.py:45: FRI_TO_NEXT_TUE = ObservedRule({FRI: +4})
	observed_holiday_base.py:46: FRI_TO_NEXT_SAT = ObservedRule({FRI: +1})
	observed_holiday_base.py:47: FRI_TO_NEXT_WORKDAY = ObservedRule({FRI: +7})
	observed_holiday_base.py:49: SAT_TO_PREV_THU = ObservedRule({SAT: -2})
	observed_holiday_base.py:50: SAT_TO_PREV_FRI = ObservedRule({SAT: -1})
	observed_holiday_base.py:51: SAT_TO_PREV_WORKDAY = ObservedRule({SAT: -7})
	observed_holiday_base.py:52: SAT_TO_NEXT_MON = ObservedRule({SAT: +2})
	observed_holiday_base.py:53: SAT_TO_NEXT_TUE = ObservedRule({SAT: +3})
	observed_holiday_base.py:54: SAT_TO_NEXT_SUN = ObservedRule({SAT: +1})
	observed_holiday_base.py:55: SAT_TO_NEXT_WORKDAY = ObservedRule({SAT: +7})
	observed_holiday_base.py:57: SUN_TO_NEXT_MON = ObservedRule({SUN: +1})
	observed_holiday_base.py:58: SUN_TO_NEXT_TUE = ObservedRule({SUN: +2})
	observed_holiday_base.py:59: SUN_TO_NEXT_WED = ObservedRule({SUN: +3})
	observed_holiday_base.py:60: SUN_TO_NEXT_WORKDAY = ObservedRule({SUN: +7})
	observed_holiday_base.py:63: ALL_TO_NEAREST_MON = ObservedRule({TUE: -1, WED: -2, THU: -3, FRI: +3, SAT: +2, SUN: +1})
	observed_holiday_base.py:64: ALL_TO_NEAREST_MON_LATAM = ObservedRule({TUE: -1, WED: -2, THU: 4, FRI: +3, SAT: +2, SUN: +1})
	observed_holiday_base.py:65: ALL_TO_NEXT_MON = ObservedRule({TUE: +6, WED: +5, THU: +4, FRI: +3, SAT: +2, SUN: +1})
	observed_holiday_base.py:66: ALL_TO_NEXT_SUN = ObservedRule({MON: +6, TUE: +5, WED: +4, THU: +3, FRI: +2, SAT: +1})
	observed_holiday_base.py:68: WORKDAY_TO_NEAREST_MON = ObservedRule({TUE: -1, WED: -2, THU: -3, FRI: +3})
	observed_holiday_base.py:69: WORKDAY_TO_NEXT_MON = ObservedRule({TUE: +6, WED: +5, THU: +4, FRI: +3})
	observed_holiday_base.py:70: WORKDAY_TO_NEXT_WORKDAY = ObservedRule({MON: +7, TUE: +7, WED: +7, THU: +7, FRI: +7})
	observed_holiday_base.py:72: TUE_WED_TO_PREV_MON = ObservedRule({TUE: -1, WED: -2})
	observed_holiday_base.py:73: TUE_WED_THU_TO_PREV_MON = ObservedRule({TUE: -1, WED: -2, THU: -3})
	observed_holiday_base.py:75: WED_THU_TO_NEXT_FRI = ObservedRule({WED: +2, THU: +1})
	observed_holiday_base.py:77: THU_FRI_TO_NEXT_MON = ObservedRule({THU: +4, FRI: +3})
	observed_holiday_base.py:78: THU_FRI_TO_NEXT_WORKDAY = ObservedRule({THU: +7, FRI: +7})
	observed_holiday_base.py:79: THU_FRI_SUN_TO_NEXT_MON = ObservedRule({THU: +4, FRI: +3, SUN: +1})
	observed_holiday_base.py:81: FRI_SAT_TO_NEXT_WORKDAY = ObservedRule({FRI: +7, SAT: +7})
	observed_holiday_base.py:82: FRI_SUN_TO_NEXT_MON = ObservedRule({FRI: +3, SUN: +1})
	observed_holiday_base.py:83: FRI_SUN_TO_NEXT_SAT_MON = ObservedRule({FRI: +1, SUN: +1})
	observed_holiday_base.py:85: SAT_SUN_TO_PREV_FRI = ObservedRule({SAT: -1, SUN: -2})
	observed_holiday_base.py:86: SAT_SUN_TO_NEXT_MON = ObservedRule({SAT: +2, SUN: +1})
	observed_holiday_base.py:87: SAT_SUN_TO_NEXT_TUE = ObservedRule({SAT: +3, SUN: +2})
	observed_holiday_base.py:88: SAT_SUN_TO_NEXT_WED = ObservedRule({SAT: +4, SUN: +3})
	observed_holiday_base.py:89: SAT_SUN_TO_NEXT_MON_TUE = ObservedRule({SAT: +2, SUN: +2})
	observed_holiday_base.py:90: SAT_SUN_TO_NEXT_WORKDAY = ObservedRule({SAT: +7, SUN: +7})
	observed_holiday_base.py:93: class ObservedHolidayBase(HolidayBase):
(call) observed_holiday_base.py:93: ObservedHolidayBase
	observed_holiday_base.py:93: class ObservedHolidayBase(HolidayBase):
	observed_holiday_base.py:94: """Observed holidays implementation."""
	observed_holiday_base.py:96: observed_label = "%s"
	observed_holiday_base.py:98: def __init__(self, observed_rule: ObservedRule, observed_since: int = None, *args, **kwargs):
	observed_holiday_base.py:104: def _is_observed(self, *args, **kwargs) -> bool:
	observed_holiday_base.py:107: def _get_next_workday(self, dt: date, delta: int = +1) -> date:
	observed_holiday_base.py:116: def _get_observed_date(self, dt: date, rule: ObservedRule) -> date:
	observed_holiday_base.py:126: self, dt: DateArg, name: Optional[str] = None, rule: Optional[ObservedRule] = None
	observed_holiday_base.py:125: def _add_observed(
	observed_holiday_base.py:126: self, dt: DateArg, name: Optional[str] = None, rule: Optional[ObservedRule] = None
	observed_holiday_base.py:125: def _add_observed(
	observed_holiday_base.py:126: self, dt: DateArg, name: Optional[str] = None, rule: Optional[ObservedRule] = None
	observed_holiday_base.py:125: def _add_observed(
	observed_holiday_base.py:126: self, dt: DateArg, name: Optional[str] = None, rule: Optional[ObservedRule] = None
	observed_holiday_base.py:125: def _add_observed(
	observed_holiday_base.py:127: ) -> Tuple[bool, date]:
	observed_holiday_base.py:125: def _add_observed(
	observed_holiday_base.py:161: def _move_holiday(self, dt: date, rule: Optional[ObservedRule] = None) -> Tuple[bool, date]:
	observed_holiday_base.py:167: def _populate_observed(self, dts: Set[date], multiple: bool = False) -> None:
	observed_holiday_base.py:180: def _populate_common_holidays(self):
	observed_holiday_base.py:192: def _populate_subdiv_holidays(self):
	countries\albania.py:23: class Albania(
	countries\albania.py:24: ObservedHolidayBase, ChristianHolidays, InternationalHolidays, IslamicHolidays, StaticHolidays
	countries\albania.py:23: class Albania(
(call) countries\albania.py:23: Albania
	countries\albania.py:23: class Albania(
	countries\albania.py:26: """
	countries\albania.py:31: country = "AL"
	countries\albania.py:32: observed_label = "%s (observed)"
	countries\albania.py:34: def __init__(self, *args, **kwargs):
	countries\albania.py:42: def _populate_public_holidays(self):
	countries\albania.py:94: class AL(Albania):
(call) countries\albania.py:94: AL
	countries\albania.py:94: class AL(Albania):
	countries\albania.py:95: pass
	countries\albania.py:98: class ALB(Albania):
(call) countries\albania.py:98: ALB
	countries\albania.py:98: class ALB(Albania):
	countries\albania.py:99: pass
	countries\albania.py:102: class AlbaniaStaticHolidays:
(call) countries\albania.py:102: AlbaniaStaticHolidays
	countries\albania.py:102: class AlbaniaStaticHolidays:
	countries\albania.py:104: 2022: (MAR, 21, "Public Holiday"),
	countries\albania.py:103: special_public_holidays = {
	countries\albania.py:108: 2007: (JAN, 3, "Eid al-Adha"),
	countries\albania.py:107: special_public_holidays_observed = {
	countries\__init__.py:15: from .algeria import Algeria, DZ, DZA
(call) countries\algeria.py:0: <module>
	countries\algeria.py:12: from gettext import gettext as tr
	countries\algeria.py:14: from holidays.groups import InternationalHolidays, IslamicHolidays
	countries\algeria.py:15: from holidays.holiday_base import HolidayBase
	countries\algeria.py:18: class Algeria(HolidayBase, InternationalHolidays, IslamicHolidays):
(call) countries\algeria.py:18: Algeria
	countries\algeria.py:18: class Algeria(HolidayBase, InternationalHolidays, IslamicHolidays):
	countries\algeria.py:19: """
	countries\algeria.py:24: country = "DZ"
	countries\algeria.py:25: default_language = "ar"
	countries\algeria.py:27: estimated_label = tr("(تقدير) %s")
	countries\algeria.py:28: supported_languages = ("ar", "en_US", "fr")
	countries\algeria.py:30: def __init__(self, *args, **kwargs):
	countries\algeria.py:35: def _populate_public_holidays(self):
	countries\algeria.py:82: class DZ(Algeria):
(call) countries\algeria.py:82: DZ
	countries\algeria.py:82: class DZ(Algeria):
	countries\algeria.py:83: pass
	countries\algeria.py:86: class DZA(Algeria):
(call) countries\algeria.py:86: DZA
	countries\algeria.py:86: class DZA(Algeria):
	countries\algeria.py:87: pass
	countries\__init__.py:16: from .american_samoa import AmericanSamoa, AS, ASM, HolidaysAS
(call) countries\american_samoa.py:0: <module>
	countries\american_samoa.py:12: from holidays.countries.united_states import US
(call) countries\united_states.py:0: <module>
	countries\united_states.py:12: from typing import Tuple, Union
	countries\united_states.py:14: from holidays.calendars.gregorian import DEC
	countries\united_states.py:15: from holidays.groups import ChristianHolidays, InternationalHolidays
	countries\united_states.py:16: from holidays.observed_holiday_base import (
	countries\united_states.py:27: class UnitedStates(ObservedHolidayBase, ChristianHolidays, InternationalHolidays):
(call) countries\united_states.py:27: UnitedStates
	countries\united_states.py:27: class UnitedStates(ObservedHolidayBase, ChristianHolidays, InternationalHolidays):
	countries\united_states.py:28: """
	countries\united_states.py:44: country = "US"
	countries\united_states.py:45: observed_label = "%s (observed)"
	countries\united_states.py:46: subdivisions: Union[Tuple[()], Tuple[str, ...]] = (
	countries\united_states.py:106: _deprecated_subdivisions = (
	countries\united_states.py:112: def __init__(self, *args, **kwargs):
	countries\united_states.py:118: def _populate_public_holidays(self):
	countries\united_states.py:161: def _add_christmas_eve_holiday(self):
	countries\united_states.py:170: def _populate_subdiv_holidays(self):
	countries\united_states.py:224: def _populate_subdiv_ak_public_holidays(self):
	countries\united_states.py:243: def _populate_subdiv_al_public_holidays(self):
	countries\united_states.py:271: def _populate_subdiv_ar_public_holidays(self):
	countries\united_states.py:288: def _populate_subdiv_as_public_holidays(self):
	countries\united_states.py:292: def _populate_subdiv_az_public_holidays(self):
	countries\united_states.py:297: def _populate_subdiv_ca_public_holidays(self):
	countries\united_states.py:318: def _populate_subdiv_co_public_holidays(self):
	countries\united_states.py:323: def _populate_subdiv_ct_public_holidays(self):
	countries\united_states.py:331: def _populate_subdiv_dc_public_holidays(self):
	countries\united_states.py:352: def _populate_subdiv_de_public_holidays(self):
	countries\united_states.py:364: def _populate_subdiv_fl_public_holidays(self):
	countries\united_states.py:373: def _populate_subdiv_ga_public_holidays(self):
	countries\united_states.py:401: def _populate_subdiv_gu_public_holidays(self):
	countries\united_states.py:419: def _populate_subdiv_hi_public_holidays(self):
	countries\united_states.py:438: def _populate_subdiv_ia_public_holidays(self):
	countries\united_states.py:443: def _populate_subdiv_id_public_holidays(self):
	countries\united_states.py:452: def _populate_subdiv_il_public_holidays(self):
	countries\united_states.py:465: def _populate_subdiv_in_public_holidays(self):
	countries\united_states.py:481: def _populate_subdiv_ks_public_holidays(self):
	countries\united_states.py:486: def _populate_subdiv_ky_public_holidays(self):
	countries\united_states.py:494: def _populate_subdiv_la_public_holidays(self):
	countries\united_states.py:516: def _populate_subdiv_ma_public_holidays(self):
	countries\united_states.py:531: def _populate_subdiv_md_public_holidays(self):
	countries\united_states.py:546: def _populate_subdiv_me_public_holidays(self):
	countries\united_states.py:561: def _populate_subdiv_mi_public_holidays(self):
	countries\united_states.py:569: def _populate_subdiv_mn_public_holidays(self):
	countries\united_states.py:572: def _populate_subdiv_mo_public_holidays(self):
	countries\united_states.py:577: def _populate_subdiv_mp_public_holidays(self):
	countries\united_states.py:597: def _populate_subdiv_ms_public_holidays(self):
	countries\united_states.py:608: def _populate_subdiv_mt_public_holidays(self):
	countries\united_states.py:613: def _populate_subdiv_nc_public_holidays(self):
	countries\united_states.py:636: def _populate_subdiv_nd_public_holidays(self):
	countries\united_states.py:639: def _populate_subdiv_ne_public_holidays(self):
	countries\united_states.py:654: def _populate_subdiv_nh_public_holidays(self):
	countries\united_states.py:667: def _populate_subdiv_nj_public_holidays(self):
	countries\united_states.py:679: def _populate_subdiv_nm_public_holidays(self):
	countries\united_states.py:689: def _populate_subdiv_nv_public_holidays(self):
	countries\united_states.py:702: def _populate_subdiv_ny_public_holidays(self):
	countries\united_states.py:715: def _populate_subdiv_oh_public_holidays(self):
	countries\united_states.py:718: def _populate_subdiv_ok_public_holidays(self):
	countries\united_states.py:723: def _populate_subdiv_or_public_holidays(self):
	countries\united_states.py:726: def _populate_subdiv_pa_public_holidays(self):
	countries\united_states.py:730: def _populate_subdiv_pr_public_holidays(self):
	countries\united_states.py:749: def _populate_subdiv_ri_public_holidays(self):
	countries\united_states.py:760: def _populate_subdiv_sc_public_holidays(self):
	countries\united_states.py:765: def _populate_subdiv_sd_public_holidays(self):
	countries\united_states.py:774: def _populate_subdiv_tn_public_holidays(self):
	countries\united_states.py:778: def _populate_subdiv_tx_public_holidays(self):
	countries\united_states.py:818: def _populate_subdiv_um_public_holidays(self):
	countries\united_states.py:821: def _populate_subdiv_ut_public_holidays(self):
	countries\united_states.py:826: def _populate_subdiv_va_public_holidays(self):
	countries\united_states.py:852: def _populate_subdiv_vi_public_holidays(self):
	countries\united_states.py:892: def _populate_subdiv_vt_public_holidays(self):
	countries\united_states.py:901: def _populate_subdiv_wa_public_holidays(self):
	countries\united_states.py:904: def _populate_subdiv_wi_public_holidays(self):
	countries\united_states.py:916: def _populate_subdiv_wv_public_holidays(self):
	countries\united_states.py:929: def _populate_subdiv_wy_public_holidays(self):
	countries\united_states.py:933: class US(UnitedStates):
(call) countries\united_states.py:933: US
	countries\united_states.py:933: class US(UnitedStates):
	countries\united_states.py:934: pass
	countries\united_states.py:937: class USA(UnitedStates):
(call) countries\united_states.py:937: USA
	countries\united_states.py:937: class USA(UnitedStates):
	countries\united_states.py:938: pass
	countries\american_samoa.py:15: class HolidaysAS(US):
(call) countries\american_samoa.py:15: HolidaysAS
	countries\american_samoa.py:15: class HolidaysAS(US):
	countries\american_samoa.py:20: country = "AS"
	countries\american_samoa.py:21: subdivisions = ()  # Override US subdivisions.
	countries\american_samoa.py:23: def _populate_public_holidays(self) -> None:
	countries\american_samoa.py:28: class AS(HolidaysAS):
(call) countries\american_samoa.py:28: AS
	countries\american_samoa.py:28: class AS(HolidaysAS):
	countries\american_samoa.py:29: pass
	countries\american_samoa.py:32: class ASM(HolidaysAS):
(call) countries\american_samoa.py:32: ASM
	countries\american_samoa.py:32: class ASM(HolidaysAS):
	countries\american_samoa.py:33: pass
	countries\american_samoa.py:36: class AmericanSamoa(HolidaysAS):
(call) countries\american_samoa.py:36: AmericanSamoa
	countries\american_samoa.py:36: class AmericanSamoa(HolidaysAS):
	countries\american_samoa.py:37: pass
	countries\__init__.py:17: from .andorra import Andorra, AD, AND
(call) countries\andorra.py:0: <module>
	countries\andorra.py:12: from datetime import timedelta as td
	countries\andorra.py:14: from holidays.groups import ChristianHolidays, InternationalHolidays
	countries\andorra.py:15: from holidays.holiday_base import HolidayBase
	countries\andorra.py:18: class Andorra(HolidayBase, ChristianHolidays, InternationalHolidays):
(call) countries\andorra.py:18: Andorra
	countries\andorra.py:18: class Andorra(HolidayBase, ChristianHolidays, InternationalHolidays):
	countries\andorra.py:19: """
	countries\andorra.py:25: country = "AD"
	countries\andorra.py:26: subdivisions = (
	countries\andorra.py:36: def __init__(self, *args, **kwargs) -> None:
	countries\andorra.py:41: def _populate_public_holidays(self) -> None:
	countries\andorra.py:85: def _populate_subdiv_02_public_holidays(self):
	countries\andorra.py:92: def _populate_subdiv_03_public_holidays(self):
	countries\andorra.py:98: def _populate_subdiv_04_public_holidays(self):
	countries\andorra.py:104: def _populate_subdiv_05_public_holidays(self):
	countries\andorra.py:110: def _populate_subdiv_06_public_holidays(self):
	countries\andorra.py:118: def _populate_subdiv_07_public_holidays(self):
	countries\andorra.py:125: def _populate_subdiv_08_public_holidays(self):
	countries\andorra.py:131: class AD(Andorra):
(call) countries\andorra.py:131: AD
	countries\andorra.py:131: class AD(Andorra):
	countries\andorra.py:132: pass
	countries\andorra.py:135: class AND(Andorra):
(call) countries\andorra.py:135: AND
	countries\andorra.py:135: class AND(Andorra):
	countries\andorra.py:136: pass
	countries\__init__.py:18: from .angola import Angola, AO, AGO
(call) countries\angola.py:0: <module>
	countries\angola.py:12: from datetime import date
	countries\angola.py:13: from gettext import gettext as tr
	countries\angola.py:14: from typing import Tuple
	countries\angola.py:16: from holidays.calendars.gregorian import AUG, SEP
	countries\angola.py:17: from holidays.groups import ChristianHolidays, InternationalHolidays, StaticHolidays
	countries\angola.py:18: from holidays.observed_holiday_base import (
	countries\angola.py:26: class Angola(ObservedHolidayBase, ChristianHolidays, InternationalHolidays, StaticHolidays):
(call) countries\angola.py:26: Angola
	countries\angola.py:26: class Angola(ObservedHolidayBase, ChristianHolidays, InternationalHolidays, StaticHolidays):
	countries\angola.py:27: """
	countries\angola.py:43: country = "AO"
	countries\angola.py:44: default_language = "pt_AO"
	countries\angola.py:45: supported_languages = ("en_US", "pt_AO", "uk")
	countries\angola.py:47: observed_label = tr("%s (ponte)")
	countries\angola.py:49: def __init__(self, *args, **kwargs):
	countries\angola.py:56: def _is_observed(self, dt: date) -> bool:
	countries\angola.py:61: def _add_observed(self, dt: date, **kwargs) -> Tuple[bool, date]:
	countries\angola.py:69: def _populate_public_holidays(self):
	countries\angola.py:180: class AO(Angola):
(call) countries\angola.py:180: AO
	countries\angola.py:180: class AO(Angola):
	countries\angola.py:181: pass
	countries\angola.py:184: class AGO(Angola):
(call) countries\angola.py:184: AGO
	countries\angola.py:184: class AGO(Angola):
	countries\angola.py:185: pass
	countries\angola.py:188: class AngolaStaticHolidays:
(call) countries\angola.py:188: AngolaStaticHolidays
	countries\angola.py:188: class AngolaStaticHolidays:
	countries\angola.py:191: 2017: (AUG, 23, tr("Dia de eleições gerais")),
	countries\angola.py:189: special_public_holidays = {
	countries\__init__.py:19: from .argentina import Argentina, AR, ARG
(call) countries\argentina.py:0: <module>
	countries\argentina.py:12: from gettext import gettext as tr
	countries\argentina.py:14: from holidays.calendars.gregorian import JAN, FEB, MAR, APR, MAY, JUN, JUL, AUG, SEP, OCT, NOV, DEC
	countries\argentina.py:15: from holidays.groups import ChristianHolidays, InternationalHolidays, StaticHolidays
	countries\argentina.py:16: from holidays.observed_holiday_base import (
	countries\argentina.py:24: class Argentina(ObservedHolidayBase, ChristianHolidays, InternationalHolidays, StaticHolidays):
(call) countries\argentina.py:24: Argentina
	countries\argentina.py:24: class Argentina(ObservedHolidayBase, ChristianHolidays, InternationalHolidays, StaticHolidays):
	countries\argentina.py:25: """
	countries\argentina.py:70: country = "AR"
	countries\argentina.py:71: default_language = "es"
	countries\argentina.py:72: supported_languages = ("en_US", "es", "uk")
	countries\argentina.py:74: observed_label = tr("%s (observado)")
	countries\argentina.py:76: def __init__(self, *args, **kwargs):
	countries\argentina.py:83: def _populate_public_holidays(self):
	countries\argentina.py:245: class AR(Argentina):
(call) countries\argentina.py:245: AR
	countries\argentina.py:245: class AR(Argentina):
	countries\argentina.py:246: pass
	countries\argentina.py:249: class ARG(Argentina):
(call) countries\argentina.py:249: ARG
	countries\argentina.py:249: class ARG(Argentina):
	countries\argentina.py:250: pass
	countries\argentina.py:253: class ArgentinaStaticHolidays:
(call) countries\argentina.py:253: ArgentinaStaticHolidays
	countries\argentina.py:253: class ArgentinaStaticHolidays:
	countries\argentina.py:254: """
	countries\argentina.py:261: arg_bridge_public_holiday = tr("Feriado con fines turísticos")
	countries\argentina.py:264: bicentennial_national_flag = tr(
	countries\argentina.py:265: "Bicentenario de la creación y primera jura de la bandera nacional"
	countries\argentina.py:264: bicentennial_national_flag = tr(
	countries\argentina.py:269: bicentennial_battle_tucuman = tr("Bicentenario de la Batalla de Tucumán")
	countries\argentina.py:272: bicentennial_assembly_1813 = tr(
	countries\argentina.py:273: "Bicentenario de la sesión inaugural de la Asamblea Nacional Constituyente del año 1813"
	countries\argentina.py:272: bicentennial_assembly_1813 = tr(
	countries\argentina.py:277: bicentennial_battle_salta = tr("Bicentenario de la Batalla de Salta")
	countries\argentina.py:280: national_census_2022 = tr("Censo nacional 2022")
	countries\argentina.py:284: (MAR, 25, arg_bridge_public_holiday),
	countries\argentina.py:285: (DEC, 9, arg_bridge_public_holiday),
	countries\argentina.py:283: 2011: (
	countries\argentina.py:288: (FEB, 27, bicentennial_national_flag),
	countries\argentina.py:289: (APR, 30, arg_bridge_public_holiday),
	countries\argentina.py:290: (SEP, 24, bicentennial_battle_tucuman),
	countries\argentina.py:291: (DEC, 24, arg_bridge_public_holiday),
	countries\argentina.py:287: 2012: (
	countries\argentina.py:294: (JAN, 31, bicentennial_assembly_1813),
	countries\argentina.py:295: (FEB, 20, bicentennial_battle_salta),
	countries\argentina.py:296: (APR, 1, arg_bridge_public_holiday),
	countries\argentina.py:297: (JUN, 21, arg_bridge_public_holiday),
	countries\argentina.py:293: 2013: (
	countries\argentina.py:300: (MAY, 2, arg_bridge_public_holiday),
	countries\argentina.py:301: (DEC, 26, arg_bridge_public_holiday),
	countries\argentina.py:299: 2014: (
	countries\argentina.py:304: (MAR, 23, arg_bridge_public_holiday),
	countries\argentina.py:305: (DEC, 7, arg_bridge_public_holiday),
	countries\argentina.py:303: 2015: (
	countries\argentina.py:308: (JUL, 8, arg_bridge_public_holiday),
	countries\argentina.py:309: (DEC, 9, arg_bridge_public_holiday),
	countries\argentina.py:307: 2016: (
	countries\argentina.py:312: (APR, 30, arg_bridge_public_holiday),
	countries\argentina.py:313: (DEC, 24, arg_bridge_public_holiday),
	countries\argentina.py:314: (DEC, 31, arg_bridge_public_holiday),
	countries\argentina.py:311: 2018: (
	countries\argentina.py:317: (JUL, 8, arg_bridge_public_holiday),
	countries\argentina.py:318: (AUG, 19, arg_bridge_public_holiday),
	countries\argentina.py:319: (OCT, 14, arg_bridge_public_holiday),
	countries\argentina.py:316: 2019: (
	countries\argentina.py:322: (MAR, 23, arg_bridge_public_holiday),
	countries\argentina.py:323: (JUL, 10, arg_bridge_public_holiday),
	countries\argentina.py:324: (DEC, 7, arg_bridge_public_holiday),
	countries\argentina.py:321: 2020: (
	countries\argentina.py:327: (MAY, 24, arg_bridge_public_holiday),
	countries\argentina.py:328: (OCT, 8, arg_bridge_public_holiday),
	countries\argentina.py:329: (NOV, 22, arg_bridge_public_holiday),
	countries\argentina.py:326: 2021: (
	countries\argentina.py:332: (MAY, 18, national_census_2022),
	countries\argentina.py:333: (OCT, 7, arg_bridge_public_holiday),
	countries\argentina.py:334: (NOV, 21, arg_bridge_public_holiday),
	countries\argentina.py:335: (DEC, 9, arg_bridge_public_holiday),
	countries\argentina.py:331: 2022: (
	countries\argentina.py:338: (MAY, 26, arg_bridge_public_holiday),
	countries\argentina.py:339: (JUN, 19, arg_bridge_public_holiday),
	countries\argentina.py:340: (OCT, 13, arg_bridge_public_holiday),
	countries\argentina.py:337: 2023: (
	countries\argentina.py:343: (APR, 1, arg_bridge_public_holiday),
	countries\argentina.py:344: (JUN, 21, arg_bridge_public_holiday),
	countries\argentina.py:345: (OCT, 11, arg_bridge_public_holiday),
	countries\argentina.py:342: 2024: (
	countries\argentina.py:282: special_public_holidays = {
	countries\__init__.py:20: from .armenia import Armenia, AM, ARM
(call) countries\armenia.py:0: <module>
	countries\armenia.py:12: from gettext import gettext as tr
	countries\armenia.py:14: from holidays.calendars.julian import JULIAN_CALENDAR
	countries\armenia.py:15: from holidays.groups import ChristianHolidays, InternationalHolidays
	countries\armenia.py:16: from holidays.holiday_base import HolidayBase
	countries\armenia.py:19: class Armenia(HolidayBase, ChristianHolidays, InternationalHolidays):
(call) countries\armenia.py:19: Armenia
	countries\armenia.py:19: class Armenia(HolidayBase, ChristianHolidays, InternationalHolidays):
	countries\armenia.py:20: """
	countries\armenia.py:29: country = "AM"
	countries\armenia.py:30: default_language = "hy"
	countries\armenia.py:31: supported_languages = ("en_US", "hy")
	countries\armenia.py:33: def __init__(self, *args, **kwargs):
	countries\armenia.py:38: def _populate_public_holidays(self):
	countries\armenia.py:102: class AM(Armenia):
(call) countries\armenia.py:102: AM
	countries\armenia.py:102: class AM(Armenia):
	countries\armenia.py:103: pass
	countries\armenia.py:106: class ARM(Armenia):
(call) countries\armenia.py:106: ARM
	countries\armenia.py:106: class ARM(Armenia):
	countries\armenia.py:107: pass
	countries\__init__.py:21: from .aruba import Aruba, AW, ABW
(call) countries\aruba.py:0: <module>
	countries\aruba.py:12: from datetime import date
	countries\aruba.py:13: from datetime import timedelta as td
	countries\aruba.py:14: from gettext import gettext as tr
	countries\aruba.py:16: from holidays.calendars.gregorian import APR, AUG
	countries\aruba.py:17: from holidays.groups import ChristianHolidays, InternationalHolidays
	countries\aruba.py:18: from holidays.holiday_base import HolidayBase
	countries\aruba.py:21: class Aruba(HolidayBase, ChristianHolidays, InternationalHolidays):
(call) countries\aruba.py:21: Aruba
	countries\aruba.py:21: class Aruba(HolidayBase, ChristianHolidays, InternationalHolidays):
	countries\aruba.py:22: """
	countries\aruba.py:32: country = "AW"
	countries\aruba.py:33: default_language = "pap"
	countries\aruba.py:34: supported_languages = ("en_US", "nl", "pap", "uk")
	countries\aruba.py:36: def __init__(self, *args, **kwargs):
	countries\aruba.py:41: def _populate_public_holidays(self):
	countries\aruba.py:150: class AW(Aruba):
(call) countries\aruba.py:150: AW
	countries\aruba.py:150: class AW(Aruba):
	countries\aruba.py:151: pass
	countries\aruba.py:154: class ABW(Aruba):
(call) countries\aruba.py:154: ABW
	countries\aruba.py:154: class ABW(Aruba):
	countries\aruba.py:155: pass
	countries\__init__.py:22: from .australia import Australia, AU, AUS
(call) countries\australia.py:0: <module>
	countries\australia.py:12: from holidays.calendars.gregorian import JUN, AUG, SEP, OCT
	countries\australia.py:13: from holidays.groups import ChristianHolidays, InternationalHolidays, StaticHolidays
	countries\australia.py:14: from holidays.observed_holiday_base import (
	countries\australia.py:22: class Australia(ObservedHolidayBase, ChristianHolidays, InternationalHolidays, StaticHolidays):
(call) countries\australia.py:22: Australia
	countries\australia.py:22: class Australia(ObservedHolidayBase, ChristianHolidays, InternationalHolidays, StaticHolidays):
	countries\australia.py:23: """
	countries\australia.py:28: country = "AU"
	countries\australia.py:29: observed_label = "%s (observed)"
	countries\australia.py:30: subdivisions = ("ACT", "NSW", "NT", "QLD", "SA", "TAS", "VIC", "WA")
	countries\australia.py:32: @property
	countries\australia.py:33: def sovereign_birthday(self) -> str:
	countries\australia.py:32: @property
	countries\australia.py:33: def sovereign_birthday(self) -> str:
	countries\australia.py:41: def __init__(self, *args, **kwargs):
	countries\australia.py:48: def _populate_public_holidays(self):
	countries\australia.py:77: def _populate_subdiv_holidays(self):
	countries\australia.py:104: def _populate_subdiv_act_public_holidays(self):
	countries\australia.py:158: def _populate_subdiv_nsw_public_holidays(self):
	countries\australia.py:174: def _populate_subdiv_nt_public_holidays(self):
	countries\australia.py:192: def _populate_subdiv_qld_public_holidays(self):
	countries\australia.py:230: def _populate_subdiv_sa_public_holidays(self):
	countries\australia.py:252: def _populate_subdiv_tas_public_holidays(self):
	countries\australia.py:260: def _populate_subdiv_vic_public_holidays(self):
	countries\australia.py:290: def _populate_subdiv_wa_public_holidays(self):
	countries\australia.py:309: class AU(Australia):
(call) countries\australia.py:309: AU
	countries\australia.py:309: class AU(Australia):
	countries\australia.py:310: pass
	countries\australia.py:313: class AUS(Australia):
(call) countries\australia.py:313: AUS
	countries\australia.py:313: class AUS(Australia):
	countries\australia.py:314: pass
	countries\australia.py:317: class AustraliaStaticHolidays:
(call) countries\australia.py:317: AustraliaStaticHolidays
	countries\australia.py:317: class AustraliaStaticHolidays:
	countries\australia.py:319: 2022: (SEP, 22, "National Day of Mourning for Queen Elizabeth II"),
	countries\australia.py:318: special_public_holidays = {
	countries\australia.py:323: 2012: (JUN, 11, "Queen's Diamond Jubilee"),
	countries\australia.py:322: special_qld_public_holidays = {
	countries\__init__.py:23: from .austria import Austria, AT, AUT
(call) countries\austria.py:0: <module>
	countries\austria.py:12: from gettext import gettext as tr
	countries\austria.py:14: from holidays.constants import BANK, PUBLIC
	countries\austria.py:15: from holidays.groups import ChristianHolidays, InternationalHolidays
	countries\austria.py:16: from holidays.holiday_base import HolidayBase
	countries\austria.py:19: class Austria(HolidayBase, ChristianHolidays, InternationalHolidays):
(call) countries\austria.py:19: Austria
	countries\austria.py:19: class Austria(HolidayBase, ChristianHolidays, InternationalHolidays):
	countries\austria.py:20: country = "AT"
	countries\austria.py:21: default_language = "de"
	countries\austria.py:22: supported_categories = (BANK, PUBLIC)
	countries\austria.py:23: supported_languages = ("de", "en_US", "uk")
	countries\austria.py:24: subdivisions = ("1", "2", "3", "4", "5", "6", "7", "8", "9")
	countries\austria.py:26: def __init__(self, *args, **kwargs) -> None:
	countries\austria.py:36: def _populate_public_holidays(self):
	countries\austria.py:79: def _populate_bank_holidays(self):
	countries\austria.py:90: class AT(Austria):
(call) countries\austria.py:90: AT
	countries\austria.py:90: class AT(Austria):
	countries\austria.py:91: pass
	countries\austria.py:94: class AUT(Austria):
(call) countries\austria.py:94: AUT
	countries\austria.py:94: class AUT(Austria):
	countries\austria.py:95: pass
	countries\__init__.py:24: from .azerbaijan import Azerbaijan, AZ, AZE
(call) countries\azerbaijan.py:0: <module>
	countries\azerbaijan.py:12: from datetime import date
	countries\azerbaijan.py:13: from gettext import gettext as tr
	countries\azerbaijan.py:15: from holidays.calendars import _CustomIslamicHolidays
	countries\azerbaijan.py:16: from holidays.calendars.gregorian import JAN, FEB, MAR, APR, MAY, JUN, JUL, AUG, SEP, OCT, NOV, DEC
	countries\azerbaijan.py:17: from holidays.constants import PUBLIC, WORKDAY
	countries\azerbaijan.py:18: from holidays.groups import InternationalHolidays, IslamicHolidays, StaticHolidays
	countries\azerbaijan.py:19: from holidays.observed_holiday_base import (
	countries\azerbaijan.py:26: class Azerbaijan(ObservedHolidayBase, InternationalHolidays, IslamicHolidays, StaticHolidays):
(call) countries\azerbaijan.py:26: Azerbaijan
	countries\azerbaijan.py:26: class Azerbaijan(ObservedHolidayBase, InternationalHolidays, IslamicHolidays, StaticHolidays):
	countries\azerbaijan.py:31: country = "AZ"
	countries\azerbaijan.py:32: default_language = "az"
	countries\azerbaijan.py:34: estimated_label = tr("%s (təxmini)")
	countries\azerbaijan.py:36: observed_label = tr("%s (müşahidə olunur)")
	countries\azerbaijan.py:38: observed_estimated_label = tr("%s (müşahidə olunur, təxmini)")
	countries\azerbaijan.py:39: supported_categories = (PUBLIC, WORKDAY)
	countries\azerbaijan.py:40: supported_languages = ("az", "en_US", "uk")
	countries\azerbaijan.py:42: def __init__(self, *args, **kwargs):
	countries\azerbaijan.py:50: def _populate_public_holidays(self):
	countries\azerbaijan.py:157: def _populate_workday_holidays(self):
	countries\azerbaijan.py:180: class AZ(Azerbaijan):
(call) countries\azerbaijan.py:180: AZ
	countries\azerbaijan.py:180: class AZ(Azerbaijan):
	countries\azerbaijan.py:181: pass
	countries\azerbaijan.py:184: class AZE(Azerbaijan):
(call) countries\azerbaijan.py:184: AZE
	countries\azerbaijan.py:184: class AZE(Azerbaijan):
	countries\azerbaijan.py:185: pass
	countries\azerbaijan.py:188: class AzerbaijanIslamicHolidays(_CustomIslamicHolidays):
(call) countries\azerbaijan.py:188: AzerbaijanIslamicHolidays
	countries\azerbaijan.py:188: class AzerbaijanIslamicHolidays(_CustomIslamicHolidays):
	countries\azerbaijan.py:189: EID_AL_ADHA_DATES = {
	countries\azerbaijan.py:190: 2002: (FEB, 21),
	countries\azerbaijan.py:189: EID_AL_ADHA_DATES = {
	countries\azerbaijan.py:191: 2003: (FEB, 11),
	countries\azerbaijan.py:189: EID_AL_ADHA_DATES = {
	countries\azerbaijan.py:192: 2004: (FEB, 1),
	countries\azerbaijan.py:189: EID_AL_ADHA_DATES = {
	countries\azerbaijan.py:193: 2005: (JAN, 22),
	countries\azerbaijan.py:189: EID_AL_ADHA_DATES = {
	countries\azerbaijan.py:194: 2006: ((JAN, 10), (DEC, 31)),
	countries\azerbaijan.py:189: EID_AL_ADHA_DATES = {
	countries\azerbaijan.py:195: 2007: (DEC, 20),
	countries\azerbaijan.py:189: EID_AL_ADHA_DATES = {
	countries\azerbaijan.py:196: 2008: (DEC, 8),
	countries\azerbaijan.py:189: EID_AL_ADHA_DATES = {
	countries\azerbaijan.py:197: 2009: (NOV, 27),
	countries\azerbaijan.py:189: EID_AL_ADHA_DATES = {
	countries\azerbaijan.py:198: 2010: (NOV, 16),
	countries\azerbaijan.py:189: EID_AL_ADHA_DATES = {
	countries\azerbaijan.py:199: 2011: (NOV, 6),
	countries\azerbaijan.py:189: EID_AL_ADHA_DATES = {
	countries\azerbaijan.py:200: 2012: (OCT, 25),
	countries\azerbaijan.py:189: EID_AL_ADHA_DATES = {
	countries\azerbaijan.py:201: 2013: (OCT, 15),
	countries\azerbaijan.py:189: EID_AL_ADHA_DATES = {
	countries\azerbaijan.py:202: 2014: (OCT, 4),
	countries\azerbaijan.py:189: EID_AL_ADHA_DATES = {
	countries\azerbaijan.py:203: 2015: (SEP, 24),
	countries\azerbaijan.py:189: EID_AL_ADHA_DATES = {
	countries\azerbaijan.py:204: 2016: (SEP, 12),
	countries\azerbaijan.py:189: EID_AL_ADHA_DATES = {
	countries\azerbaijan.py:205: 2017: (SEP, 1),
	countries\azerbaijan.py:189: EID_AL_ADHA_DATES = {
	countries\azerbaijan.py:206: 2018: (AUG, 22),
	countries\azerbaijan.py:189: EID_AL_ADHA_DATES = {
	countries\azerbaijan.py:207: 2019: (AUG, 12),
	countries\azerbaijan.py:208: 2020: (JUL, 31),
	countries\azerbaijan.py:209: 2021: (JUL, 20),
	countries\azerbaijan.py:210: 2022: (JUL, 9),
	countries\azerbaijan.py:211: 2023: (JUN, 28),
	countries\azerbaijan.py:189: EID_AL_ADHA_DATES = {
	countries\azerbaijan.py:214: EID_AL_FITR_DATES = {
	countries\azerbaijan.py:215: 2002: (DEC, 4),
	countries\azerbaijan.py:214: EID_AL_FITR_DATES = {
	countries\azerbaijan.py:216: 2003: (NOV, 25),
	countries\azerbaijan.py:214: EID_AL_FITR_DATES = {
	countries\azerbaijan.py:217: 2004: (NOV, 14),
	countries\azerbaijan.py:214: EID_AL_FITR_DATES = {
	countries\azerbaijan.py:218: 2005: (NOV, 3),
	countries\azerbaijan.py:214: EID_AL_FITR_DATES = {
	countries\azerbaijan.py:219: 2006: (OCT, 23),
	countries\azerbaijan.py:214: EID_AL_FITR_DATES = {
	countries\azerbaijan.py:220: 2007: (OCT, 12),
	countries\azerbaijan.py:214: EID_AL_FITR_DATES = {
	countries\azerbaijan.py:221: 2008: (SEP, 30),
	countries\azerbaijan.py:214: EID_AL_FITR_DATES = {
	countries\azerbaijan.py:222: 2009: (SEP, 20),
	countries\azerbaijan.py:214: EID_AL_FITR_DATES = {
	countries\azerbaijan.py:223: 2010: (SEP, 9),
	countries\azerbaijan.py:214: EID_AL_FITR_DATES = {
	countries\azerbaijan.py:224: 2011: (AUG, 30),
	countries\azerbaijan.py:214: EID_AL_FITR_DATES = {
	countries\azerbaijan.py:225: 2012: (AUG, 19),
	countries\azerbaijan.py:214: EID_AL_FITR_DATES = {
	countries\azerbaijan.py:226: 2013: (AUG, 8),
	countries\azerbaijan.py:214: EID_AL_FITR_DATES = {
	countries\azerbaijan.py:227: 2014: (JUL, 28),
	countries\azerbaijan.py:214: EID_AL_FITR_DATES = {
	countries\azerbaijan.py:228: 2015: (JUL, 17),
	countries\azerbaijan.py:214: EID_AL_FITR_DATES = {
	countries\azerbaijan.py:229: 2016: (JUL, 6),
	countries\azerbaijan.py:214: EID_AL_FITR_DATES = {
	countries\azerbaijan.py:230: 2017: (JUN, 26),
	countries\azerbaijan.py:214: EID_AL_FITR_DATES = {
	countries\azerbaijan.py:231: 2018: (JUN, 15),
	countries\azerbaijan.py:214: EID_AL_FITR_DATES = {
	countries\azerbaijan.py:232: 2019: (JUN, 5),
	countries\azerbaijan.py:233: 2020: (MAY, 24),
	countries\azerbaijan.py:234: 2021: (MAY, 13),
	countries\azerbaijan.py:235: 2022: (MAY, 2),
	countries\azerbaijan.py:236: 2023: (APR, 21),
	countries\azerbaijan.py:214: EID_AL_FITR_DATES = {
(call) calendars\custom.py:24: __new__
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
(call) calendars\custom.py:25: <genexpr>
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:26: namespace[f"{attr}_{_CustomCalendar.CUSTOM_ATTR_POSTFIX}"] = namespace[attr]
	calendars\custom.py:27: del namespace[attr]
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
(call) calendars\custom.py:25: <genexpr>
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:26: namespace[f"{attr}_{_CustomCalendar.CUSTOM_ATTR_POSTFIX}"] = namespace[attr]
	calendars\custom.py:27: del namespace[attr]
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
(call) calendars\custom.py:25: <genexpr>
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:29: return super().__new__(cls, name, bases, namespace)
	countries\azerbaijan.py:240: class AzerbaijanStaticHolidays:
(call) countries\azerbaijan.py:240: AzerbaijanStaticHolidays
	countries\azerbaijan.py:240: class AzerbaijanStaticHolidays:
	countries\azerbaijan.py:241: eid_al_adha = tr("Qurban bayrami")
	countries\azerbaijan.py:243: substituted_date_format = tr("%d.%m.%Y")
	countries\azerbaijan.py:245: substituted_label = tr("İstirahət günü (%s ilə əvəz edilmişdir)")
	countries\azerbaijan.py:248: 2011: (AUG, 29, AUG, 27),
	countries\azerbaijan.py:250: (JAN, 3, DEC, 29, 2012),
	countries\azerbaijan.py:251: (JAN, 4, DEC, 30, 2012),
	countries\azerbaijan.py:249: 2013: (
	countries\azerbaijan.py:254: (JAN, 3, DEC, 28, 2013),
	countries\azerbaijan.py:255: (JAN, 6, DEC, 29, 2013),
	countries\azerbaijan.py:253: 2014: (
	countries\azerbaijan.py:258: 2018: (APR, 11, tr("Prezidenti seçkiləri")),
	countries\azerbaijan.py:260: 2019: (DEC, 27, tr("Bələdiyyə seçkiləri")),
	countries\azerbaijan.py:262: (MAR, 27, MAR, 29),
	countries\azerbaijan.py:263: (MAY, 27, MAY, 30),
	countries\azerbaijan.py:264: (JAN, 3, DEC, 28, 2019),
	countries\azerbaijan.py:265: (JAN, 6, DEC, 29, 2019),
	countries\azerbaijan.py:261: 2020: (
	countries\azerbaijan.py:268: (MAY, 11, MAY, 8),
	countries\azerbaijan.py:269: (MAY, 12, MAY, 16),
	countries\azerbaijan.py:270: (JUL, 19, JUL, 17),
	countries\azerbaijan.py:267: 2021: (
	countries\azerbaijan.py:273: (MAR, 7, MAR, 5),
	countries\azerbaijan.py:274: (NOV, 7, NOV, 5),
	countries\azerbaijan.py:272: 2022: (
	countries\azerbaijan.py:277: (JUN, 27, JUN, 24),
	countries\azerbaijan.py:278: (JUN, 30, JUN, 25),
	countries\azerbaijan.py:279: (NOV, 10, NOV, 4),
	countries\azerbaijan.py:276: 2023: (
	countries\azerbaijan.py:247: special_public_holidays = {
	countries\azerbaijan.py:284: 2007: (JAN, 3, eid_al_adha),
	countries\azerbaijan.py:285: 2072: (JAN, 5, eid_al_adha),
	countries\azerbaijan.py:283: special_public_holidays_observed = {
	countries\__init__.py:25: from .bahamas import Bahamas, BS, BHS
(call) countries\bahamas.py:0: <module>
	countries\bahamas.py:12: from holidays.calendars.gregorian import SEP, DEC
	countries\bahamas.py:13: from holidays.groups import ChristianHolidays, InternationalHolidays, StaticHolidays
	countries\bahamas.py:14: from holidays.observed_holiday_base import (
	countries\bahamas.py:24: class Bahamas(ObservedHolidayBase, ChristianHolidays, InternationalHolidays, StaticHolidays):
(call) countries\bahamas.py:24: Bahamas
	countries\bahamas.py:24: class Bahamas(ObservedHolidayBase, ChristianHolidays, InternationalHolidays, StaticHolidays):
	countries\bahamas.py:25: """
	countries\bahamas.py:39: country = "BS"
	countries\bahamas.py:40: observed_label = "%s (observed)"
	countries\bahamas.py:42: def __init__(self, *args, **kwargs):
	countries\bahamas.py:49: def _populate_public_holidays(self):
	countries\bahamas.py:119: class BS(Bahamas):
(call) countries\bahamas.py:119: BS
	countries\bahamas.py:119: class BS(Bahamas):
	countries\bahamas.py:120: pass
	countries\bahamas.py:123: class BHS(Bahamas):
(call) countries\bahamas.py:123: BHS
	countries\bahamas.py:123: class BHS(Bahamas):
	countries\bahamas.py:124: pass
	countries\bahamas.py:127: class BahamasStaticHolidays:
(call) countries\bahamas.py:127: BahamasStaticHolidays
	countries\bahamas.py:127: class BahamasStaticHolidays:
	countries\bahamas.py:130: 2022: (SEP, 19, "State Funeral of Queen Elizabeth II"),
	countries\bahamas.py:128: special_public_holidays = {
	countries\bahamas.py:136: 1979: (DEC, 31, "New Year's Day"),
	countries\bahamas.py:137: 1984: (DEC, 31, "New Year's Day"),
	countries\bahamas.py:138: 1990: (DEC, 31, "New Year's Day"),
	countries\bahamas.py:139: 2001: (DEC, 31, "New Year's Day"),
	countries\bahamas.py:140: 2007: (DEC, 31, "New Year's Day"),
	countries\bahamas.py:133: special_public_holidays_observed = {
	countries\__init__.py:26: from .bahrain import Bahrain, BH, BAH
(call) countries\bahrain.py:0: <module>
	countries\bahrain.py:12: from gettext import gettext as tr
	countries\bahrain.py:14: from holidays.calendars import _CustomIslamicHolidays
	countries\bahrain.py:15: from holidays.calendars.gregorian import FRI, SAT, MAY, JUL, AUG, OCT
	countries\bahrain.py:16: from holidays.groups import InternationalHolidays, IslamicHolidays
	countries\bahrain.py:17: from holidays.holiday_base import HolidayBase
	countries\bahrain.py:20: class Bahrain(HolidayBase, InternationalHolidays, IslamicHolidays):
(call) countries\bahrain.py:20: Bahrain
	countries\bahrain.py:20: class Bahrain(HolidayBase, InternationalHolidays, IslamicHolidays):
	countries\bahrain.py:21: """
	countries\bahrain.py:29: country = "BH"
	countries\bahrain.py:30: default_language = "ar"
	countries\bahrain.py:32: estimated_label = tr("(تقدير) %s")
	countries\bahrain.py:33: supported_languages = ("ar", "en_US")
	countries\bahrain.py:34: weekend = {FRI, SAT}
	countries\bahrain.py:36: def __init__(self, *args, **kwargs):
	countries\bahrain.py:41: def _populate_public_holidays(self):
	countries\bahrain.py:81: class BH(Bahrain):
(call) countries\bahrain.py:81: BH
	countries\bahrain.py:81: class BH(Bahrain):
	countries\bahrain.py:82: pass
	countries\bahrain.py:85: class BAH(Bahrain):
(call) countries\bahrain.py:85: BAH
	countries\bahrain.py:85: class BAH(Bahrain):
	countries\bahrain.py:86: pass
	countries\bahrain.py:89: class BahrainIslamicHolidays(_CustomIslamicHolidays):
(call) countries\bahrain.py:89: BahrainIslamicHolidays
	countries\bahrain.py:89: class BahrainIslamicHolidays(_CustomIslamicHolidays):
	countries\bahrain.py:91: 2022: (AUG, 8),
	countries\bahrain.py:90: ASHURA_DATES = {
	countries\bahrain.py:95: 2022: (JUL, 9),
	countries\bahrain.py:94: EID_AL_ADHA = {
	countries\bahrain.py:99: 2022: (MAY, 2),
	countries\bahrain.py:98: EID_AL_FITR_DATES = {
	countries\bahrain.py:103: 2022: (JUL, 30),
	countries\bahrain.py:102: HIJRI_NEW_YEAR_DATES = {
	countries\bahrain.py:107: 2022: (OCT, 8),
	countries\bahrain.py:106: MAWLID_DATES = {
(call) calendars\custom.py:24: __new__
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
(call) calendars\custom.py:25: <genexpr>
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:26: namespace[f"{attr}_{_CustomCalendar.CUSTOM_ATTR_POSTFIX}"] = namespace[attr]
	calendars\custom.py:27: del namespace[attr]
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
(call) calendars\custom.py:25: <genexpr>
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:26: namespace[f"{attr}_{_CustomCalendar.CUSTOM_ATTR_POSTFIX}"] = namespace[attr]
	calendars\custom.py:27: del namespace[attr]
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
(call) calendars\custom.py:25: <genexpr>
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:26: namespace[f"{attr}_{_CustomCalendar.CUSTOM_ATTR_POSTFIX}"] = namespace[attr]
	calendars\custom.py:27: del namespace[attr]
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
(call) calendars\custom.py:25: <genexpr>
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:26: namespace[f"{attr}_{_CustomCalendar.CUSTOM_ATTR_POSTFIX}"] = namespace[attr]
	calendars\custom.py:27: del namespace[attr]
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
(call) calendars\custom.py:25: <genexpr>
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:26: namespace[f"{attr}_{_CustomCalendar.CUSTOM_ATTR_POSTFIX}"] = namespace[attr]
	calendars\custom.py:27: del namespace[attr]
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
(call) calendars\custom.py:25: <genexpr>
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:29: return super().__new__(cls, name, bases, namespace)
	countries\__init__.py:27: from .bangladesh import Bangladesh, BD, BGD
(call) countries\bangladesh.py:0: <module>
	countries\bangladesh.py:13: from holidays.groups import InternationalHolidays
	countries\bangladesh.py:14: from holidays.holiday_base import HolidayBase
	countries\bangladesh.py:17: class Bangladesh(HolidayBase, InternationalHolidays):
(call) countries\bangladesh.py:17: Bangladesh
	countries\bangladesh.py:17: class Bangladesh(HolidayBase, InternationalHolidays):
	countries\bangladesh.py:18: """
	countries\bangladesh.py:24: country = "BD"
	countries\bangladesh.py:26: def __init__(self, *args, **kwargs):
	countries\bangladesh.py:30: def _populate_public_holidays(self):
	countries\bangladesh.py:53: class BD(Bangladesh):
(call) countries\bangladesh.py:53: BD
	countries\bangladesh.py:53: class BD(Bangladesh):
	countries\bangladesh.py:54: pass
	countries\bangladesh.py:57: class BGD(Bangladesh):
(call) countries\bangladesh.py:57: BGD
	countries\bangladesh.py:57: class BGD(Bangladesh):
	countries\bangladesh.py:58: pass
	countries\__init__.py:28: from .barbados import Barbados, BB, BRB
(call) countries\barbados.py:0: <module>
	countries\barbados.py:12: from holidays.calendars.gregorian import JAN, JUL
	countries\barbados.py:13: from holidays.groups import ChristianHolidays, InternationalHolidays, StaticHolidays
	countries\barbados.py:14: from holidays.observed_holiday_base import (
	countries\barbados.py:22: class Barbados(ObservedHolidayBase, ChristianHolidays, InternationalHolidays, StaticHolidays):
(call) countries\barbados.py:22: Barbados
	countries\barbados.py:22: class Barbados(ObservedHolidayBase, ChristianHolidays, InternationalHolidays, StaticHolidays):
	countries\barbados.py:23: """
	countries\barbados.py:33: country = "BB"
	countries\barbados.py:34: observed_label = "%s (observed)"
	countries\barbados.py:36: def __init__(self, *args, **kwargs):
	countries\barbados.py:43: def _populate_public_holidays(self):
	countries\barbados.py:89: class BB(Barbados):
(call) countries\barbados.py:89: BB
	countries\barbados.py:89: class BB(Barbados):
	countries\barbados.py:90: pass
	countries\barbados.py:93: class BRB(Barbados):
(call) countries\barbados.py:93: BRB
	countries\barbados.py:93: class BRB(Barbados):
	countries\barbados.py:94: pass
	countries\barbados.py:97: class BarbadosStaticHolidays:
(call) countries\barbados.py:97: BarbadosStaticHolidays
	countries\barbados.py:97: class BarbadosStaticHolidays:
	countries\barbados.py:100: (JAN, 4, "Public Holiday"),
	countries\barbados.py:101: (JAN, 5, "Public Holiday"),
	countries\barbados.py:99: 2021: (
	countries\barbados.py:105: 2023: (JUL, 31, "50th Anniversary of CARICOM Holiday"),
	countries\barbados.py:98: special_public_holidays = {
	countries\__init__.py:29: from .belarus import Belarus, BY, BLR
(call) countries\belarus.py:0: <module>
	countries\belarus.py:12: from gettext import gettext as tr
	countries\belarus.py:14: from holidays.calendars.gregorian import GREGORIAN_CALENDAR, JAN, MAR, APR, MAY, JUN, JUL, NOV, DEC
	countries\belarus.py:15: from holidays.calendars.julian import JULIAN_CALENDAR
	countries\belarus.py:16: from holidays.groups import ChristianHolidays, InternationalHolidays, StaticHolidays
	countries\belarus.py:17: from holidays.holiday_base import HolidayBase
	countries\belarus.py:20: class Belarus(HolidayBase, ChristianHolidays, InternationalHolidays, StaticHolidays):
(call) countries\belarus.py:20: Belarus
	countries\belarus.py:20: class Belarus(HolidayBase, ChristianHolidays, InternationalHolidays, StaticHolidays):
	countries\belarus.py:21: """
	countries\belarus.py:32: country = "BY"
	countries\belarus.py:33: default_language = "be"
	countries\belarus.py:34: supported_languages = ("be", "en_US")
	countries\belarus.py:36: def __init__(self, *args, **kwargs):
	countries\belarus.py:42: def _populate_public_holidays(self):
	countries\belarus.py:78: class BY(Belarus):
(call) countries\belarus.py:78: BY
	countries\belarus.py:78: class BY(Belarus):
	countries\belarus.py:79: pass
	countries\belarus.py:82: class BLR(Belarus):
(call) countries\belarus.py:82: BLR
	countries\belarus.py:82: class BLR(Belarus):
	countries\belarus.py:83: pass
	countries\belarus.py:86: class BelarusStaticHolidays:
(call) countries\belarus.py:86: BelarusStaticHolidays
	countries\belarus.py:86: class BelarusStaticHolidays:
	countries\belarus.py:88: substituted_date_format = tr("%d.%m.%Y")
	countries\belarus.py:90: substituted_label = tr("Выходны (перанесены з %s)")
	countries\belarus.py:91: special_public_holidays = {
	countries\belarus.py:92: 1998: (
	countries\belarus.py:93: (JAN, 2, JAN, 10),
	countries\belarus.py:94: (APR, 27, APR, 25),
	countries\belarus.py:92: 1998: (
	countries\belarus.py:91: special_public_holidays = {
	countries\belarus.py:96: 1999: (
	countries\belarus.py:97: (JAN, 8, JAN, 16),
	countries\belarus.py:98: (APR, 19, APR, 17),
	countries\belarus.py:96: 1999: (
	countries\belarus.py:91: special_public_holidays = {
	countries\belarus.py:100: 2000: (
	countries\belarus.py:101: (MAY, 8, MAY, 13),
	countries\belarus.py:102: (NOV, 6, NOV, 11),
	countries\belarus.py:100: 2000: (
	countries\belarus.py:91: special_public_holidays = {
	countries\belarus.py:104: 2001: (
	countries\belarus.py:105: (JAN, 2, JAN, 20),
	countries\belarus.py:106: (MAR, 9, MAR, 3),
	countries\belarus.py:107: (APR, 23, APR, 21),
	countries\belarus.py:108: (APR, 30, APR, 28),
	countries\belarus.py:109: (JUL, 2, JUL, 7),
	countries\belarus.py:110: (DEC, 24, DEC, 22),
	countries\belarus.py:111: (DEC, 31, DEC, 29),
	countries\belarus.py:104: 2001: (
	countries\belarus.py:91: special_public_holidays = {
	countries\belarus.py:113: 2002: (
	countries\belarus.py:114: (JAN, 2, JAN, 5),
	countries\belarus.py:115: (MAY, 10, MAY, 18),
	countries\belarus.py:116: (NOV, 8, NOV, 16),
	countries\belarus.py:113: 2002: (
	countries\belarus.py:91: special_public_holidays = {
	countries\belarus.py:118: 2003: (
	countries\belarus.py:119: (JAN, 6, JAN, 4),
	countries\belarus.py:120: (MAY, 5, MAY, 3),
	countries\belarus.py:118: 2003: (
	countries\belarus.py:91: special_public_holidays = {
	countries\belarus.py:122: 2004: (
	countries\belarus.py:123: (JAN, 2, JAN, 10),
	countries\belarus.py:124: (JAN, 5, JAN, 17),
	countries\belarus.py:125: (JAN, 6, JAN, 31),
	countries\belarus.py:126: (APR, 19, APR, 17),
	countries\belarus.py:122: 2004: (
	countries\belarus.py:91: special_public_holidays = {
	countries\belarus.py:128: 2005: (MAR, 7, MAR, 12),
	countries\belarus.py:91: special_public_holidays = {
	countries\belarus.py:129: 2006: (
	countries\belarus.py:130: (JAN, 2, JAN, 21),
	countries\belarus.py:131: (MAY, 8, MAY, 6),
	countries\belarus.py:132: (NOV, 6, NOV, 4),
	countries\belarus.py:129: 2006: (
	countries\belarus.py:91: special_public_holidays = {
	countries\belarus.py:134: 2007: (
	countries\belarus.py:135: (JAN, 2, DEC, 30, 2006),
	countries\belarus.py:136: (MAR, 9, MAR, 17),
	countries\belarus.py:137: (APR, 16, APR, 14),
	countries\belarus.py:138: (APR, 30, MAY, 5),
	countries\belarus.py:139: (JUL, 2, JUL, 7),
	countries\belarus.py:140: (DEC, 24, DEC, 22),
	countries\belarus.py:141: (DEC, 31, DEC, 29),
	countries\belarus.py:134: 2007: (
	countries\belarus.py:91: special_public_holidays = {
	countries\belarus.py:143: 2008: (
	countries\belarus.py:144: (JAN, 2, JAN, 12),
	countries\belarus.py:145: (MAY, 5, MAY, 3),
	countries\belarus.py:146: (JUL, 4, JUN, 28),
	countries\belarus.py:147: (DEC, 26, DEC, 20),
	countries\belarus.py:143: 2008: (
	countries\belarus.py:91: special_public_holidays = {
	countries\belarus.py:149: 2009: (
	countries\belarus.py:150: (JAN, 2, JAN, 10),
	countries\belarus.py:151: (APR, 27, APR, 25),
	countries\belarus.py:149: 2009: (
	countries\belarus.py:91: special_public_holidays = {
	countries\belarus.py:153: 2010: (
	countries\belarus.py:154: (JAN, 8, JAN, 23),
	countries\belarus.py:155: (APR, 12, APR, 17),
	countries\belarus.py:156: (MAY, 10, MAY, 15),
	countries\belarus.py:153: 2010: (
	countries\belarus.py:91: special_public_holidays = {
	countries\belarus.py:158: 2011: (
	countries\belarus.py:159: (MAR, 7, MAR, 12),
	countries\belarus.py:160: (MAY, 2, MAY, 14),
	countries\belarus.py:158: 2011: (
	countries\belarus.py:91: special_public_holidays = {
	countries\belarus.py:162: 2012: (
	countries\belarus.py:163: (MAR, 9, MAR, 11),
	countries\belarus.py:164: (APR, 23, APR, 28),
	countries\belarus.py:165: (JUL, 2, JUN, 30),
	countries\belarus.py:166: (DEC, 24, DEC, 22),
	countries\belarus.py:167: (DEC, 31, DEC, 29),
	countries\belarus.py:162: 2012: (
	countries\belarus.py:91: special_public_holidays = {
	countries\belarus.py:169: 2013: (
	countries\belarus.py:170: (JAN, 2, JAN, 5),
	countries\belarus.py:171: (MAY, 10, MAY, 18),
	countries\belarus.py:169: 2013: (
	countries\belarus.py:91: special_public_holidays = {
	countries\belarus.py:173: 2014: (
	countries\belarus.py:174: (JAN, 2, JAN, 4),
	countries\belarus.py:175: (JAN, 6, JAN, 11),
	countries\belarus.py:176: (APR, 30, MAY, 3),
	countries\belarus.py:177: (JUL, 4, JUL, 12),
	countries\belarus.py:178: (DEC, 26, DEC, 20),
	countries\belarus.py:173: 2014: (
	countries\belarus.py:91: special_public_holidays = {
	countries\belarus.py:181: (JAN, 2, JAN, 10),
	countries\belarus.py:182: (APR, 20, APR, 25),
	countries\belarus.py:180: 2015: (
	countries\belarus.py:185: (JAN, 8, JAN, 16),
	countries\belarus.py:186: (MAR, 7, MAR, 5),
	countries\belarus.py:184: 2016: (
	countries\belarus.py:189: (JAN, 2, JAN, 21),
	countries\belarus.py:190: (APR, 24, APR, 29),
	countries\belarus.py:191: (MAY, 8, MAY, 6),
	countries\belarus.py:192: (NOV, 6, NOV, 4),
	countries\belarus.py:188: 2017: (
	countries\belarus.py:195: (JAN, 2, JAN, 20),
	countries\belarus.py:196: (MAR, 9, MAR, 3),
	countries\belarus.py:197: (APR, 16, APR, 14),
	countries\belarus.py:198: (APR, 30, APR, 28),
	countries\belarus.py:199: (JUL, 2, JUL, 7),
	countries\belarus.py:200: (DEC, 24, DEC, 22),
	countries\belarus.py:201: (DEC, 31, DEC, 29),
	countries\belarus.py:194: 2018: (
	countries\belarus.py:204: (MAY, 6, MAY, 4),
	countries\belarus.py:205: (MAY, 8, MAY, 11),
	countries\belarus.py:206: (NOV, 8, NOV, 16),
	countries\belarus.py:203: 2019: (
	countries\belarus.py:209: (JAN, 6, JAN, 4),
	countries\belarus.py:210: (APR, 27, APR, 4),
	countries\belarus.py:208: 2020: (
	countries\belarus.py:213: (JAN, 8, JAN, 16),
	countries\belarus.py:214: (MAY, 10, MAY, 15),
	countries\belarus.py:212: 2021: (
	countries\belarus.py:217: (MAR, 7, MAR, 12),
	countries\belarus.py:218: (MAY, 2, MAY, 14),
	countries\belarus.py:216: 2022: (
	countries\belarus.py:221: (APR, 24, APR, 29),
	countries\belarus.py:222: (MAY, 8, MAY, 13),
	countries\belarus.py:223: (NOV, 6, NOV, 11),
	countries\belarus.py:220: 2023: (
	countries\belarus.py:91: special_public_holidays = {
	countries\__init__.py:30: from .belgium import Belgium, BE, BEL
(call) countries\belgium.py:0: <module>
	countries\belgium.py:12: from datetime import timedelta as td
	countries\belgium.py:13: from gettext import gettext as tr
	countries\belgium.py:15: from holidays.constants import BANK, PUBLIC
	countries\belgium.py:16: from holidays.groups import ChristianHolidays, InternationalHolidays
	countries\belgium.py:17: from holidays.holiday_base import HolidayBase
	countries\belgium.py:20: class Belgium(HolidayBase, ChristianHolidays, InternationalHolidays):
(call) countries\belgium.py:20: Belgium
	countries\belgium.py:20: class Belgium(HolidayBase, ChristianHolidays, InternationalHolidays):
	countries\belgium.py:21: """
	countries\belgium.py:28: country = "BE"
	countries\belgium.py:29: default_language = "nl"
	countries\belgium.py:30: supported_categories = (BANK, PUBLIC)
	countries\belgium.py:31: supported_languages = ("de", "en_US", "fr", "nl", "uk")
	countries\belgium.py:33: def __init__(self, *args, **kwargs):
	countries\belgium.py:38: def _populate_public_holidays(self):
	countries\belgium.py:75: def _populate_bank_holidays(self):
	countries\belgium.py:86: class BE(Belgium):
(call) countries\belgium.py:86: BE
	countries\belgium.py:86: class BE(Belgium):
	countries\belgium.py:87: pass
	countries\belgium.py:90: class BEL(Belgium):
(call) countries\belgium.py:90: BEL
	countries\belgium.py:90: class BEL(Belgium):
	countries\belgium.py:91: pass
	countries\__init__.py:31: from .belize import Belize, BZ, BLZ
(call) countries\belize.py:0: <module>
	countries\belize.py:12: from holidays.groups import ChristianHolidays, InternationalHolidays
	countries\belize.py:13: from holidays.observed_holiday_base import (
	countries\belize.py:21: class Belize(ObservedHolidayBase, ChristianHolidays, InternationalHolidays):
(call) countries\belize.py:21: Belize
	countries\belize.py:21: class Belize(ObservedHolidayBase, ChristianHolidays, InternationalHolidays):
	countries\belize.py:22: """
	countries\belize.py:30: country = "BZ"
	countries\belize.py:31: observed_label = "%s (observed)"
	countries\belize.py:33: def __init__(self, *args, **kwargs):
	countries\belize.py:43: def _populate_public_holidays(self):
	countries\belize.py:109: class BZ(Belize):
(call) countries\belize.py:109: BZ
	countries\belize.py:109: class BZ(Belize):
	countries\belize.py:110: pass
	countries\belize.py:113: class BLZ(Belize):
(call) countries\belize.py:113: BLZ
	countries\belize.py:113: class BLZ(Belize):
	countries\belize.py:114: pass
	countries\__init__.py:32: from .bolivia import Bolivia, BO, BOL
(call) countries\bolivia.py:0: <module>
	countries\bolivia.py:13: from datetime import timedelta as td
	countries\bolivia.py:14: from gettext import gettext as tr
	countries\bolivia.py:16: from holidays.groups import ChristianHolidays, InternationalHolidays
	countries\bolivia.py:17: from holidays.observed_holiday_base import (
	countries\bolivia.py:25: class Bolivia(ObservedHolidayBase, ChristianHolidays, InternationalHolidays):
(call) countries\bolivia.py:25: Bolivia
	countries\bolivia.py:25: class Bolivia(ObservedHolidayBase, ChristianHolidays, InternationalHolidays):
	countries\bolivia.py:26: """
	countries\bolivia.py:39: country = "BO"
	countries\bolivia.py:40: default_language = "es"
	countries\bolivia.py:41: supported_languages = ("en_US", "es", "uk")
	countries\bolivia.py:43: observed_label = tr("%s (observado)")
	countries\bolivia.py:44: subdivisions = (
	countries\bolivia.py:56: def __init__(self, *args, **kwargs):
	countries\bolivia.py:64: def _populate_public_holidays(self):
	countries\bolivia.py:124: def _populate_subdiv_b_public_holidays(self):
	countries\bolivia.py:128: def _populate_subdiv_c_public_holidays(self):
	countries\bolivia.py:132: def _populate_subdiv_h_public_holidays(self):
	countries\bolivia.py:136: def _populate_subdiv_l_public_holidays(self):
	countries\bolivia.py:140: def _populate_subdiv_n_public_holidays(self):
	countries\bolivia.py:144: def _populate_subdiv_p_public_holidays(self):
	countries\bolivia.py:148: def _populate_subdiv_o_public_holidays(self):
	countries\bolivia.py:152: def _populate_subdiv_s_public_holidays(self):
	countries\bolivia.py:156: def _populate_subdiv_t_public_holidays(self):
	countries\bolivia.py:161: class BO(Bolivia):
(call) countries\bolivia.py:161: BO
	countries\bolivia.py:161: class BO(Bolivia):
	countries\bolivia.py:162: pass
	countries\bolivia.py:165: class BOL(Bolivia):
(call) countries\bolivia.py:165: BOL
	countries\bolivia.py:165: class BOL(Bolivia):
	countries\bolivia.py:166: pass
	countries\__init__.py:33: from .bosnia_and_herzegovina import BosniaAndHerzegovina, BA, BIH
(call) countries\bosnia_and_herzegovina.py:0: <module>
	countries\bosnia_and_herzegovina.py:13: from gettext import gettext as tr
	countries\bosnia_and_herzegovina.py:15: from holidays.calendars import _CustomIslamicHolidays
	countries\bosnia_and_herzegovina.py:16: from holidays.calendars.gregorian import (
	countries\bosnia_and_herzegovina.py:31: from holidays.calendars.julian import JULIAN_CALENDAR
	countries\bosnia_and_herzegovina.py:32: from holidays.groups import ChristianHolidays, IslamicHolidays, InternationalHolidays
	countries\bosnia_and_herzegovina.py:33: from holidays.observed_holiday_base import (
	countries\bosnia_and_herzegovina.py:42: class BosniaAndHerzegovina(
	countries\bosnia_and_herzegovina.py:43: ObservedHolidayBase, ChristianHolidays, InternationalHolidays, IslamicHolidays
	countries\bosnia_and_herzegovina.py:42: class BosniaAndHerzegovina(
(call) countries\bosnia_and_herzegovina.py:42: BosniaAndHerzegovina
	countries\bosnia_and_herzegovina.py:42: class BosniaAndHerzegovina(
	countries\bosnia_and_herzegovina.py:45: """
	countries\bosnia_and_herzegovina.py:57: country = "BA"
	countries\bosnia_and_herzegovina.py:58: default_language = "bs"
	countries\bosnia_and_herzegovina.py:59: supported_languages = ("bs", "en_US", "sr", "uk")
	countries\bosnia_and_herzegovina.py:61: observed_label = tr("%s (preneseno)")
	countries\bosnia_and_herzegovina.py:62: subdivisions = (
	countries\bosnia_and_herzegovina.py:67: _deprecated_subdivisions = (
	countries\bosnia_and_herzegovina.py:73: def __init__(self, *args, **kwargs):
	countries\bosnia_and_herzegovina.py:80: def _populate_public_holidays(self):
	countries\bosnia_and_herzegovina.py:100: def _populate_subdiv_holidays(self):
	countries\bosnia_and_herzegovina.py:120: def _populate_subdiv_bih_public_holidays(self):
	countries\bosnia_and_herzegovina.py:170: def _populate_subdiv_brc_public_holidays(self):
	countries\bosnia_and_herzegovina.py:194: def _populate_subdiv_srp_public_holidays(self):
	countries\bosnia_and_herzegovina.py:247: class BA(BosniaAndHerzegovina):
(call) countries\bosnia_and_herzegovina.py:247: BA
	countries\bosnia_and_herzegovina.py:247: class BA(BosniaAndHerzegovina):
	countries\bosnia_and_herzegovina.py:248: pass
	countries\bosnia_and_herzegovina.py:251: class BIH(BosniaAndHerzegovina):
(call) countries\bosnia_and_herzegovina.py:251: BIH
	countries\bosnia_and_herzegovina.py:251: class BIH(BosniaAndHerzegovina):
	countries\bosnia_and_herzegovina.py:252: pass
	countries\bosnia_and_herzegovina.py:255: class BosniaAndHerzegovinaIslamicHolidays(_CustomIslamicHolidays):
(call) countries\bosnia_and_herzegovina.py:255: BosniaAndHerzegovinaIslamicHolidays
	countries\bosnia_and_herzegovina.py:255: class BosniaAndHerzegovinaIslamicHolidays(_CustomIslamicHolidays):
	countries\bosnia_and_herzegovina.py:256: EID_AL_ADHA_DATES = {
	countries\bosnia_and_herzegovina.py:257: 2001: (MAR, 6),
	countries\bosnia_and_herzegovina.py:256: EID_AL_ADHA_DATES = {
	countries\bosnia_and_herzegovina.py:258: 2002: (FEB, 23),
	countries\bosnia_and_herzegovina.py:256: EID_AL_ADHA_DATES = {
	countries\bosnia_and_herzegovina.py:259: 2003: (FEB, 12),
	countries\bosnia_and_herzegovina.py:256: EID_AL_ADHA_DATES = {
	countries\bosnia_and_herzegovina.py:260: 2004: (FEB, 2),
	countries\bosnia_and_herzegovina.py:256: EID_AL_ADHA_DATES = {
	countries\bosnia_and_herzegovina.py:261: 2005: (JAN, 21),
	countries\bosnia_and_herzegovina.py:256: EID_AL_ADHA_DATES = {
	countries\bosnia_and_herzegovina.py:262: 2006: ((JAN, 10), (DEC, 31)),
	countries\bosnia_and_herzegovina.py:256: EID_AL_ADHA_DATES = {
	countries\bosnia_and_herzegovina.py:263: 2007: (DEC, 20),
	countries\bosnia_and_herzegovina.py:256: EID_AL_ADHA_DATES = {
	countries\bosnia_and_herzegovina.py:264: 2008: (DEC, 9),
	countries\bosnia_and_herzegovina.py:256: EID_AL_ADHA_DATES = {
	countries\bosnia_and_herzegovina.py:265: 2009: (NOV, 28),
	countries\bosnia_and_herzegovina.py:256: EID_AL_ADHA_DATES = {
	countries\bosnia_and_herzegovina.py:266: 2010: (NOV, 17),
	countries\bosnia_and_herzegovina.py:256: EID_AL_ADHA_DATES = {
	countries\bosnia_and_herzegovina.py:267: 2011: (NOV, 7),
	countries\bosnia_and_herzegovina.py:256: EID_AL_ADHA_DATES = {
	countries\bosnia_and_herzegovina.py:268: 2012: (OCT, 26),
	countries\bosnia_and_herzegovina.py:256: EID_AL_ADHA_DATES = {
	countries\bosnia_and_herzegovina.py:269: 2013: (OCT, 15),
	countries\bosnia_and_herzegovina.py:256: EID_AL_ADHA_DATES = {
	countries\bosnia_and_herzegovina.py:270: 2014: (OCT, 4),
	countries\bosnia_and_herzegovina.py:256: EID_AL_ADHA_DATES = {
	countries\bosnia_and_herzegovina.py:271: 2015: (SEP, 24),
	countries\bosnia_and_herzegovina.py:256: EID_AL_ADHA_DATES = {
	countries\bosnia_and_herzegovina.py:272: 2016: (SEP, 13),
	countries\bosnia_and_herzegovina.py:256: EID_AL_ADHA_DATES = {
	countries\bosnia_and_herzegovina.py:273: 2017: (SEP, 2),
	countries\bosnia_and_herzegovina.py:256: EID_AL_ADHA_DATES = {
	countries\bosnia_and_herzegovina.py:274: 2018: (AUG, 22),
	countries\bosnia_and_herzegovina.py:275: 2019: (AUG, 11),
	countries\bosnia_and_herzegovina.py:276: 2020: (JUL, 31),
	countries\bosnia_and_herzegovina.py:277: 2021: (JUL, 20),
	countries\bosnia_and_herzegovina.py:278: 2022: (JUL, 9),
	countries\bosnia_and_herzegovina.py:279: 2023: (JUN, 28),
	countries\bosnia_and_herzegovina.py:256: EID_AL_ADHA_DATES = {
	countries\bosnia_and_herzegovina.py:282: EID_AL_FITR_DATES = {
	countries\bosnia_and_herzegovina.py:283: 2001: (DEC, 17),
	countries\bosnia_and_herzegovina.py:282: EID_AL_FITR_DATES = {
	countries\bosnia_and_herzegovina.py:284: 2002: (DEC, 6),
	countries\bosnia_and_herzegovina.py:282: EID_AL_FITR_DATES = {
	countries\bosnia_and_herzegovina.py:285: 2003: (NOV, 26),
	countries\bosnia_and_herzegovina.py:282: EID_AL_FITR_DATES = {
	countries\bosnia_and_herzegovina.py:286: 2004: (NOV, 14),
	countries\bosnia_and_herzegovina.py:282: EID_AL_FITR_DATES = {
	countries\bosnia_and_herzegovina.py:287: 2005: (NOV, 4),
	countries\bosnia_and_herzegovina.py:282: EID_AL_FITR_DATES = {
	countries\bosnia_and_herzegovina.py:288: 2006: (OCT, 24),
	countries\bosnia_and_herzegovina.py:282: EID_AL_FITR_DATES = {
	countries\bosnia_and_herzegovina.py:289: 2007: (OCT, 13),
	countries\bosnia_and_herzegovina.py:282: EID_AL_FITR_DATES = {
	countries\bosnia_and_herzegovina.py:290: 2008: (OCT, 2),
	countries\bosnia_and_herzegovina.py:282: EID_AL_FITR_DATES = {
	countries\bosnia_and_herzegovina.py:291: 2009: (SEP, 21),
	countries\bosnia_and_herzegovina.py:282: EID_AL_FITR_DATES = {
	countries\bosnia_and_herzegovina.py:292: 2010: (SEP, 10),
	countries\bosnia_and_herzegovina.py:282: EID_AL_FITR_DATES = {
	countries\bosnia_and_herzegovina.py:293: 2011: (AUG, 31),
	countries\bosnia_and_herzegovina.py:282: EID_AL_FITR_DATES = {
	countries\bosnia_and_herzegovina.py:294: 2012: (AUG, 19),
	countries\bosnia_and_herzegovina.py:282: EID_AL_FITR_DATES = {
	countries\bosnia_and_herzegovina.py:295: 2013: (AUG, 8),
	countries\bosnia_and_herzegovina.py:282: EID_AL_FITR_DATES = {
	countries\bosnia_and_herzegovina.py:296: 2014: (JUL, 28),
	countries\bosnia_and_herzegovina.py:282: EID_AL_FITR_DATES = {
	countries\bosnia_and_herzegovina.py:297: 2015: (JUL, 18),
	countries\bosnia_and_herzegovina.py:282: EID_AL_FITR_DATES = {
	countries\bosnia_and_herzegovina.py:298: 2016: (JUL, 7),
	countries\bosnia_and_herzegovina.py:282: EID_AL_FITR_DATES = {
	countries\bosnia_and_herzegovina.py:299: 2017: (JUN, 26),
	countries\bosnia_and_herzegovina.py:282: EID_AL_FITR_DATES = {
	countries\bosnia_and_herzegovina.py:300: 2018: (JUN, 15),
	countries\bosnia_and_herzegovina.py:301: 2019: (JUN, 4),
	countries\bosnia_and_herzegovina.py:302: 2020: (MAY, 24),
	countries\bosnia_and_herzegovina.py:303: 2021: (MAY, 13),
	countries\bosnia_and_herzegovina.py:304: 2022: (MAY, 2),
	countries\bosnia_and_herzegovina.py:305: 2023: (APR, 21),
	countries\bosnia_and_herzegovina.py:282: EID_AL_FITR_DATES = {
(call) calendars\custom.py:24: __new__
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
(call) calendars\custom.py:25: <genexpr>
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:26: namespace[f"{attr}_{_CustomCalendar.CUSTOM_ATTR_POSTFIX}"] = namespace[attr]
	calendars\custom.py:27: del namespace[attr]
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
(call) calendars\custom.py:25: <genexpr>
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:26: namespace[f"{attr}_{_CustomCalendar.CUSTOM_ATTR_POSTFIX}"] = namespace[attr]
	calendars\custom.py:27: del namespace[attr]
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
(call) calendars\custom.py:25: <genexpr>
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:29: return super().__new__(cls, name, bases, namespace)
	countries\__init__.py:34: from .botswana import Botswana, BW, BWA
(call) countries\botswana.py:0: <module>
	countries\botswana.py:12: from datetime import timedelta as td
	countries\botswana.py:14: from holidays.calendars.gregorian import JUL
	countries\botswana.py:15: from holidays.groups import ChristianHolidays, InternationalHolidays, StaticHolidays
	countries\botswana.py:16: from holidays.observed_holiday_base import ObservedHolidayBase, SUN_TO_NEXT_MON, SUN_TO_NEXT_TUE
	countries\botswana.py:19: class Botswana(ObservedHolidayBase, ChristianHolidays, InternationalHolidays, StaticHolidays):
(call) countries\botswana.py:19: Botswana
	countries\botswana.py:19: class Botswana(ObservedHolidayBase, ChristianHolidays, InternationalHolidays, StaticHolidays):
	countries\botswana.py:20: """
	countries\botswana.py:27: country = "BW"
	countries\botswana.py:28: observed_label = "%s (observed)"
	countries\botswana.py:30: def __init__(self, *args, **kwargs):
	countries\botswana.py:38: def _populate_public_holidays(self):
	countries\botswana.py:72: class BW(Botswana):
(call) countries\botswana.py:72: BW
	countries\botswana.py:72: class BW(Botswana):
	countries\botswana.py:73: pass
	countries\botswana.py:76: class BWA(Botswana):
(call) countries\botswana.py:76: BWA
	countries\botswana.py:76: class BWA(Botswana):
	countries\botswana.py:77: pass
	countries\botswana.py:80: class BotswanaStaticHolidays:
(call) countries\botswana.py:80: BotswanaStaticHolidays
	countries\botswana.py:80: class BotswanaStaticHolidays:
	countries\botswana.py:82: 2019: (JUL, 2, "Public Holiday"),
	countries\botswana.py:81: special_public_holidays = {
	countries\__init__.py:35: from .brazil import Brazil, BR, BRA
(call) countries\brazil.py:0: <module>
	countries\brazil.py:12: from datetime import timedelta as td
	countries\brazil.py:13: from datetime import date
	countries\brazil.py:15: from holidays.calendars.gregorian import JAN, MAR, SEP, NOV, FRI, _get_nth_weekday_from
	countries\brazil.py:16: from holidays.constants import OPTIONAL, PUBLIC
	countries\brazil.py:17: from holidays.groups import ChristianHolidays, InternationalHolidays
	countries\brazil.py:18: from holidays.holiday_base import HolidayBase
	countries\brazil.py:21: class Brazil(HolidayBase, ChristianHolidays, InternationalHolidays):
(call) countries\brazil.py:21: Brazil
	countries\brazil.py:21: class Brazil(HolidayBase, ChristianHolidays, InternationalHolidays):
	countries\brazil.py:22: """
	countries\brazil.py:29: country = "BR"
	countries\brazil.py:30: subdivisions = (
	countries\brazil.py:59: supported_categories = (OPTIONAL, PUBLIC)
	countries\brazil.py:61: def __init__(self, *args, **kwargs) -> None:
	countries\brazil.py:66: def _populate_public_holidays(self):
	countries\brazil.py:116: def _populate_optional_holidays(self):
	countries\brazil.py:139: def _populate_subdiv_holidays(self):
	countries\brazil.py:144: def _populate_subdiv_ac_public_holidays(self):
	countries\brazil.py:172: def _populate_subdiv_al_public_holidays(self):
	countries\brazil.py:188: def _populate_subdiv_am_public_holidays(self):
	countries\brazil.py:195: def _populate_subdiv_ap_public_holidays(self):
	countries\brazil.py:210: def _populate_subdiv_ba_public_holidays(self):
	countries\brazil.py:214: def _populate_subdiv_ce_public_holidays(self):
	countries\brazil.py:224: def _populate_subdiv_df_public_holidays(self):
	countries\brazil.py:230: def _populate_subdiv_es_public_holidays(self):
	countries\brazil.py:235: def _populate_subdiv_go_public_holidays(self):
	countries\brazil.py:242: def _populate_subdiv_ma_public_holidays(self):
	countries\brazil.py:246: def _populate_subdiv_mg_public_holidays(self):
	countries\brazil.py:250: def _populate_subdiv_ms_public_holidays(self):
	countries\brazil.py:254: def _populate_subdiv_mt_public_holidays(self):
	countries\brazil.py:258: def _populate_subdiv_pa_public_holidays(self):
	countries\brazil.py:262: def _populate_subdiv_pb_public_holidays(self):
	countries\brazil.py:266: def _populate_subdiv_pe_public_holidays(self):
	countries\brazil.py:271: def _populate_subdiv_pi_public_holidays(self):
	countries\brazil.py:275: def _populate_subdiv_pr_public_holidays(self):
	countries\brazil.py:279: def _populate_subdiv_rj_public_holidays(self):
	countries\brazil.py:287: def _populate_subdiv_rn_public_holidays(self):
	countries\brazil.py:296: def _populate_subdiv_ro_public_holidays(self):
	countries\brazil.py:302: def _populate_subdiv_rr_public_holidays(self):
	countries\brazil.py:305: def _populate_subdiv_rs_public_holidays(self):
	countries\brazil.py:309: def _populate_subdiv_sc_public_holidays(self):
	countries\brazil.py:325: def _populate_subdiv_se_public_holidays(self):
	countries\brazil.py:329: def _populate_subdiv_sp_public_holidays(self):
	countries\brazil.py:334: def _populate_subdiv_to_public_holidays(self):
	countries\brazil.py:345: class BR(Brazil):
(call) countries\brazil.py:345: BR
	countries\brazil.py:345: class BR(Brazil):
	countries\brazil.py:346: pass
	countries\brazil.py:349: class BRA(Brazil):
(call) countries\brazil.py:349: BRA
	countries\brazil.py:349: class BRA(Brazil):
	countries\brazil.py:350: pass
	countries\__init__.py:36: from .brunei import Brunei, BN, BRN
(call) countries\brunei.py:0: <module>
	countries\brunei.py:12: from gettext import gettext as tr
	countries\brunei.py:14: from holidays.calendars import _CustomIslamicHolidays
	countries\brunei.py:15: from holidays.calendars.gregorian import JAN, FEB, MAR, APR, MAY, JUN, JUL, AUG, SEP, OCT, NOV, DEC
	countries\brunei.py:16: from holidays.groups import (
	countries\brunei.py:23: from holidays.observed_holiday_base import (
	countries\brunei.py:33: class Brunei(
	countries\brunei.py:34: ObservedHolidayBase,
	countries\brunei.py:35: ChineseCalendarHolidays,
	countries\brunei.py:36: ChristianHolidays,
	countries\brunei.py:37: InternationalHolidays,
	countries\brunei.py:38: IslamicHolidays,
	countries\brunei.py:39: StaticHolidays,
	countries\brunei.py:33: class Brunei(
(call) countries\brunei.py:33: Brunei
	countries\brunei.py:33: class Brunei(
	countries\brunei.py:41: """
	countries\brunei.py:68: country = "BN"
	countries\brunei.py:69: default_language = "ms"
	countries\brunei.py:71: estimated_label = tr("%s (anggaran)")
	countries\brunei.py:73: observed_label = tr("%s (diperhatikan)")
	countries\brunei.py:75: observed_estimated_label = tr("%s (diperhatikan, anggaran)")
	countries\brunei.py:76: supported_languages = ("en_US", "ms", "th")
	countries\brunei.py:78: def __init__(self, *args, **kwargs):
	countries\brunei.py:87: def _populate_public_holidays(self):
	countries\brunei.py:201: class BN(Brunei):
(call) countries\brunei.py:201: BN
	countries\brunei.py:201: class BN(Brunei):
	countries\brunei.py:202: pass
	countries\brunei.py:205: class BRN(Brunei):
(call) countries\brunei.py:205: BRN
	countries\brunei.py:205: class BRN(Brunei):
	countries\brunei.py:206: pass
	countries\brunei.py:209: class BruneiIslamicHolidays(_CustomIslamicHolidays):
(call) countries\brunei.py:209: BruneiIslamicHolidays
	countries\brunei.py:209: class BruneiIslamicHolidays(_CustomIslamicHolidays):
	countries\brunei.py:210: EID_AL_ADHA_DATES = {
	countries\brunei.py:211: 2000: (MAR, 16),
	countries\brunei.py:210: EID_AL_ADHA_DATES = {
	countries\brunei.py:212: 2001: (MAR, 6),
	countries\brunei.py:210: EID_AL_ADHA_DATES = {
	countries\brunei.py:213: 2002: (FEB, 23),
	countries\brunei.py:210: EID_AL_ADHA_DATES = {
	countries\brunei.py:214: 2003: (FEB, 12),
	countries\brunei.py:210: EID_AL_ADHA_DATES = {
	countries\brunei.py:215: 2004: (FEB, 2),
	countries\brunei.py:210: EID_AL_ADHA_DATES = {
	countries\brunei.py:216: 2005: (JAN, 21),
	countries\brunei.py:210: EID_AL_ADHA_DATES = {
	countries\brunei.py:217: 2006: ((JAN, 10), (DEC, 31)),
	countries\brunei.py:210: EID_AL_ADHA_DATES = {
	countries\brunei.py:218: 2007: (DEC, 20),
	countries\brunei.py:210: EID_AL_ADHA_DATES = {
	countries\brunei.py:219: 2008: (DEC, 9),
	countries\brunei.py:210: EID_AL_ADHA_DATES = {
	countries\brunei.py:220: 2009: (NOV, 28),
	countries\brunei.py:210: EID_AL_ADHA_DATES = {
	countries\brunei.py:221: 2010: (NOV, 17),
	countries\brunei.py:210: EID_AL_ADHA_DATES = {
	countries\brunei.py:222: 2011: (NOV, 7),
	countries\brunei.py:210: EID_AL_ADHA_DATES = {
	countries\brunei.py:223: 2012: (OCT, 26),
	countries\brunei.py:210: EID_AL_ADHA_DATES = {
	countries\brunei.py:224: 2013: (OCT, 15),
	countries\brunei.py:210: EID_AL_ADHA_DATES = {
	countries\brunei.py:225: 2014: (OCT, 5),
	countries\brunei.py:210: EID_AL_ADHA_DATES = {
	countries\brunei.py:226: 2015: (SEP, 24),
	countries\brunei.py:210: EID_AL_ADHA_DATES = {
	countries\brunei.py:227: 2016: (SEP, 13),
	countries\brunei.py:210: EID_AL_ADHA_DATES = {
	countries\brunei.py:228: 2017: (SEP, 2),
	countries\brunei.py:229: 2018: (AUG, 22),
	countries\brunei.py:230: 2019: (AUG, 11),
	countries\brunei.py:231: 2020: (AUG, 1),
	countries\brunei.py:232: 2021: (JUL, 20),
	countries\brunei.py:233: 2022: (JUL, 10),
	countries\brunei.py:234: 2023: (JUN, 29),
	countries\brunei.py:210: EID_AL_ADHA_DATES = {
	countries\brunei.py:237: EID_AL_FITR_DATES = {
	countries\brunei.py:238: 2000: ((JAN, 8), (DEC, 28)),
	countries\brunei.py:237: EID_AL_FITR_DATES = {
	countries\brunei.py:239: 2001: (DEC, 17),
	countries\brunei.py:237: EID_AL_FITR_DATES = {
	countries\brunei.py:240: 2002: (DEC, 6),
	countries\brunei.py:237: EID_AL_FITR_DATES = {
	countries\brunei.py:241: 2003: (NOV, 26),
	countries\brunei.py:237: EID_AL_FITR_DATES = {
	countries\brunei.py:242: 2004: (NOV, 14),
	countries\brunei.py:237: EID_AL_FITR_DATES = {
	countries\brunei.py:243: 2005: (NOV, 3),
	countries\brunei.py:237: EID_AL_FITR_DATES = {
	countries\brunei.py:244: 2006: (OCT, 24),
	countries\brunei.py:237: EID_AL_FITR_DATES = {
	countries\brunei.py:245: 2007: (OCT, 13),
	countries\brunei.py:237: EID_AL_FITR_DATES = {
	countries\brunei.py:246: 2008: (OCT, 1),
	countries\brunei.py:237: EID_AL_FITR_DATES = {
	countries\brunei.py:247: 2009: (SEP, 20),
	countries\brunei.py:237: EID_AL_FITR_DATES = {
	countries\brunei.py:248: 2010: (SEP, 10),
	countries\brunei.py:237: EID_AL_FITR_DATES = {
	countries\brunei.py:249: 2011: (AUG, 31),
	countries\brunei.py:237: EID_AL_FITR_DATES = {
	countries\brunei.py:250: 2012: (AUG, 19),
	countries\brunei.py:237: EID_AL_FITR_DATES = {
	countries\brunei.py:251: 2013: (AUG, 8),
	countries\brunei.py:237: EID_AL_FITR_DATES = {
	countries\brunei.py:252: 2014: (JUL, 29),
	countries\brunei.py:237: EID_AL_FITR_DATES = {
	countries\brunei.py:253: 2015: (JUL, 18),
	countries\brunei.py:237: EID_AL_FITR_DATES = {
	countries\brunei.py:254: 2016: (JUL, 7),
	countries\brunei.py:237: EID_AL_FITR_DATES = {
	countries\brunei.py:255: 2017: (JUN, 26),
	countries\brunei.py:256: 2018: (JUN, 15),
	countries\brunei.py:257: 2019: (JUN, 5),
	countries\brunei.py:258: 2020: (MAY, 24),
	countries\brunei.py:259: 2021: (MAY, 13),
	countries\brunei.py:260: 2022: (MAY, 3),
	countries\brunei.py:261: 2023: (APR, 22),
	countries\brunei.py:237: EID_AL_FITR_DATES = {
	countries\brunei.py:264: HIJRI_NEW_YEAR_DATES = {
	countries\brunei.py:265: 2000: (APR, 6),
	countries\brunei.py:264: HIJRI_NEW_YEAR_DATES = {
	countries\brunei.py:266: 2001: (MAR, 26),
	countries\brunei.py:264: HIJRI_NEW_YEAR_DATES = {
	countries\brunei.py:267: 2002: (MAR, 15),
	countries\brunei.py:264: HIJRI_NEW_YEAR_DATES = {
	countries\brunei.py:268: 2003: (MAR, 5),
	countries\brunei.py:264: HIJRI_NEW_YEAR_DATES = {
	countries\brunei.py:269: 2004: (FEB, 22),
	countries\brunei.py:264: HIJRI_NEW_YEAR_DATES = {
	countries\brunei.py:270: 2005: (FEB, 10),
	countries\brunei.py:264: HIJRI_NEW_YEAR_DATES = {
	countries\brunei.py:271: 2006: (JAN, 31),
	countries\brunei.py:264: HIJRI_NEW_YEAR_DATES = {
	countries\brunei.py:272: 2007: (JAN, 20),
	countries\brunei.py:264: HIJRI_NEW_YEAR_DATES = {
	countries\brunei.py:273: 2008: ((JAN, 10), (DEC, 29)),
	countries\brunei.py:264: HIJRI_NEW_YEAR_DATES = {
	countries\brunei.py:274: 2009: (DEC, 18),
	countries\brunei.py:264: HIJRI_NEW_YEAR_DATES = {
	countries\brunei.py:275: 2010: (DEC, 8),
	countries\brunei.py:264: HIJRI_NEW_YEAR_DATES = {
	countries\brunei.py:276: 2011: (NOV, 27),
	countries\brunei.py:264: HIJRI_NEW_YEAR_DATES = {
	countries\brunei.py:277: 2012: (NOV, 15),
	countries\brunei.py:264: HIJRI_NEW_YEAR_DATES = {
	countries\brunei.py:278: 2013: (NOV, 5),
	countries\brunei.py:264: HIJRI_NEW_YEAR_DATES = {
	countries\brunei.py:279: 2014: (OCT, 25),
	countries\brunei.py:264: HIJRI_NEW_YEAR_DATES = {
	countries\brunei.py:280: 2015: (OCT, 15),
	countries\brunei.py:264: HIJRI_NEW_YEAR_DATES = {
	countries\brunei.py:281: 2016: (OCT, 3),
	countries\brunei.py:264: HIJRI_NEW_YEAR_DATES = {
	countries\brunei.py:282: 2017: (SEP, 22),
	countries\brunei.py:283: 2018: (SEP, 12),
	countries\brunei.py:284: 2019: (SEP, 1),
	countries\brunei.py:285: 2020: (AUG, 20),
	countries\brunei.py:286: 2021: (AUG, 10),
	countries\brunei.py:287: 2022: (JUL, 30),
	countries\brunei.py:288: 2023: (JUL, 19),
	countries\brunei.py:264: HIJRI_NEW_YEAR_DATES = {
	countries\brunei.py:291: ISRA_AND_MIRAJ_DATES = {
	countries\brunei.py:292: 2000: (OCT, 26),
	countries\brunei.py:291: ISRA_AND_MIRAJ_DATES = {
	countries\brunei.py:293: 2001: (OCT, 15),
	countries\brunei.py:291: ISRA_AND_MIRAJ_DATES = {
	countries\brunei.py:294: 2002: (OCT, 4),
	countries\brunei.py:291: ISRA_AND_MIRAJ_DATES = {
	countries\brunei.py:295: 2003: (SEP, 24),
	countries\brunei.py:291: ISRA_AND_MIRAJ_DATES = {
	countries\brunei.py:296: 2004: (SEP, 12),
	countries\brunei.py:291: ISRA_AND_MIRAJ_DATES = {
	countries\brunei.py:297: 2005: (SEP, 1),
	countries\brunei.py:291: ISRA_AND_MIRAJ_DATES = {
	countries\brunei.py:298: 2006: (AUG, 22),
	countries\brunei.py:291: ISRA_AND_MIRAJ_DATES = {
	countries\brunei.py:299: 2007: (AUG, 11),
	countries\brunei.py:291: ISRA_AND_MIRAJ_DATES = {
	countries\brunei.py:300: 2008: (JUL, 31),
	countries\brunei.py:291: ISRA_AND_MIRAJ_DATES = {
	countries\brunei.py:301: 2009: (JUL, 20),
	countries\brunei.py:291: ISRA_AND_MIRAJ_DATES = {
	countries\brunei.py:302: 2010: (JUL, 9),
	countries\brunei.py:291: ISRA_AND_MIRAJ_DATES = {
	countries\brunei.py:303: 2011: (JUN, 29),
	countries\brunei.py:291: ISRA_AND_MIRAJ_DATES = {
	countries\brunei.py:304: 2012: (JUN, 17),
	countries\brunei.py:291: ISRA_AND_MIRAJ_DATES = {
	countries\brunei.py:305: 2013: (JUN, 6),
	countries\brunei.py:291: ISRA_AND_MIRAJ_DATES = {
	countries\brunei.py:306: 2014: (MAY, 27),
	countries\brunei.py:291: ISRA_AND_MIRAJ_DATES = {
	countries\brunei.py:307: 2015: (MAY, 16),
	countries\brunei.py:291: ISRA_AND_MIRAJ_DATES = {
	countries\brunei.py:308: 2016: (MAY, 5),
	countries\brunei.py:291: ISRA_AND_MIRAJ_DATES = {
	countries\brunei.py:309: 2017: (APR, 24),
	countries\brunei.py:310: 2018: (APR, 14),
	countries\brunei.py:311: 2019: (APR, 3),
	countries\brunei.py:312: 2020: (MAR, 22),
	countries\brunei.py:313: 2021: (MAR, 11),
	countries\brunei.py:314: 2022: (MAR, 1),
	countries\brunei.py:315: 2023: (FEB, 18),
	countries\brunei.py:291: ISRA_AND_MIRAJ_DATES = {
	countries\brunei.py:318: MAWLID_DATES = {
	countries\brunei.py:319: 2000: (JUN, 15),
	countries\brunei.py:318: MAWLID_DATES = {
	countries\brunei.py:320: 2001: (JUN, 4),
	countries\brunei.py:318: MAWLID_DATES = {
	countries\brunei.py:321: 2002: (MAY, 24),
	countries\brunei.py:318: MAWLID_DATES = {
	countries\brunei.py:322: 2003: (MAY, 14),
	countries\brunei.py:318: MAWLID_DATES = {
	countries\brunei.py:323: 2004: (MAY, 2),
	countries\brunei.py:318: MAWLID_DATES = {
	countries\brunei.py:324: 2005: (APR, 21),
	countries\brunei.py:318: MAWLID_DATES = {
	countries\brunei.py:325: 2006: (APR, 11),
	countries\brunei.py:318: MAWLID_DATES = {
	countries\brunei.py:326: 2007: (MAR, 31),
	countries\brunei.py:318: MAWLID_DATES = {
	countries\brunei.py:327: 2008: (MAR, 20),
	countries\brunei.py:318: MAWLID_DATES = {
	countries\brunei.py:328: 2009: (MAR, 9),
	countries\brunei.py:318: MAWLID_DATES = {
	countries\brunei.py:329: 2010: (FEB, 26),
	countries\brunei.py:318: MAWLID_DATES = {
	countries\brunei.py:330: 2011: (FEB, 16),
	countries\brunei.py:318: MAWLID_DATES = {
	countries\brunei.py:331: 2012: (FEB, 5),
	countries\brunei.py:318: MAWLID_DATES = {
	countries\brunei.py:332: 2013: (JAN, 24),
	countries\brunei.py:318: MAWLID_DATES = {
	countries\brunei.py:333: 2014: (JAN, 14),
	countries\brunei.py:318: MAWLID_DATES = {
	countries\brunei.py:334: 2015: ((JAN, 3), (DEC, 24)),
	countries\brunei.py:318: MAWLID_DATES = {
	countries\brunei.py:335: 2016: (DEC, 12),
	countries\brunei.py:318: MAWLID_DATES = {
	countries\brunei.py:336: 2017: (DEC, 1),
	countries\brunei.py:337: 2018: (NOV, 21),
	countries\brunei.py:338: 2019: (NOV, 9),
	countries\brunei.py:339: 2020: (OCT, 29),
	countries\brunei.py:340: 2021: (OCT, 19),
	countries\brunei.py:341: 2022: (OCT, 8),
	countries\brunei.py:342: 2023: (SEP, 28),
	countries\brunei.py:318: MAWLID_DATES = {
	countries\brunei.py:345: NUZUL_AL_QURAN_DATES = {
	countries\brunei.py:346: 2000: (DEC, 14),
	countries\brunei.py:345: NUZUL_AL_QURAN_DATES = {
	countries\brunei.py:347: 2001: (DEC, 3),
	countries\brunei.py:345: NUZUL_AL_QURAN_DATES = {
	countries\brunei.py:348: 2002: (NOV, 22),
	countries\brunei.py:345: NUZUL_AL_QURAN_DATES = {
	countries\brunei.py:349: 2003: (NOV, 12),
	countries\brunei.py:345: NUZUL_AL_QURAN_DATES = {
	countries\brunei.py:350: 2004: (NOV, 1),
	countries\brunei.py:345: NUZUL_AL_QURAN_DATES = {
	countries\brunei.py:351: 2005: (OCT, 21),
	countries\brunei.py:345: NUZUL_AL_QURAN_DATES = {
	countries\brunei.py:352: 2006: (OCT, 10),
	countries\brunei.py:345: NUZUL_AL_QURAN_DATES = {
	countries\brunei.py:353: 2007: (SEP, 29),
	countries\brunei.py:345: NUZUL_AL_QURAN_DATES = {
	countries\brunei.py:354: 2008: (SEP, 18),
	countries\brunei.py:345: NUZUL_AL_QURAN_DATES = {
	countries\brunei.py:355: 2009: (SEP, 7),
	countries\brunei.py:345: NUZUL_AL_QURAN_DATES = {
	countries\brunei.py:356: 2010: (AUG, 27),
	countries\brunei.py:345: NUZUL_AL_QURAN_DATES = {
	countries\brunei.py:357: 2011: (AUG, 17),
	countries\brunei.py:345: NUZUL_AL_QURAN_DATES = {
	countries\brunei.py:358: 2012: (AUG, 5),
	countries\brunei.py:345: NUZUL_AL_QURAN_DATES = {
	countries\brunei.py:359: 2013: (JUL, 25),
	countries\brunei.py:345: NUZUL_AL_QURAN_DATES = {
	countries\brunei.py:360: 2014: (JUL, 15),
	countries\brunei.py:345: NUZUL_AL_QURAN_DATES = {
	countries\brunei.py:361: 2015: (JUL, 4),
	countries\brunei.py:345: NUZUL_AL_QURAN_DATES = {
	countries\brunei.py:362: 2016: (JUN, 23),
	countries\brunei.py:345: NUZUL_AL_QURAN_DATES = {
	countries\brunei.py:363: 2017: (JUN, 12),
	countries\brunei.py:364: 2018: (JUN, 2),
	countries\brunei.py:365: 2019: (MAY, 23),
	countries\brunei.py:366: 2020: (MAY, 10),
	countries\brunei.py:367: 2021: (APR, 29),
	countries\brunei.py:368: 2022: (APR, 19),
	countries\brunei.py:369: 2023: (APR, 8),
	countries\brunei.py:345: NUZUL_AL_QURAN_DATES = {
	countries\brunei.py:372: RAMADAN_BEGINNING_DATES = {
	countries\brunei.py:373: 2000: (NOV, 28),
	countries\brunei.py:372: RAMADAN_BEGINNING_DATES = {
	countries\brunei.py:374: 2001: (NOV, 17),
	countries\brunei.py:372: RAMADAN_BEGINNING_DATES = {
	countries\brunei.py:375: 2002: (NOV, 6),
	countries\brunei.py:372: RAMADAN_BEGINNING_DATES = {
	countries\brunei.py:376: 2003: (OCT, 27),
	countries\brunei.py:372: RAMADAN_BEGINNING_DATES = {
	countries\brunei.py:377: 2004: (OCT, 16),
	countries\brunei.py:372: RAMADAN_BEGINNING_DATES = {
	countries\brunei.py:378: 2005: (OCT, 5),
	countries\brunei.py:372: RAMADAN_BEGINNING_DATES = {
	countries\brunei.py:379: 2006: (SEP, 24),
	countries\brunei.py:372: RAMADAN_BEGINNING_DATES = {
	countries\brunei.py:380: 2007: (SEP, 13),
	countries\brunei.py:372: RAMADAN_BEGINNING_DATES = {
	countries\brunei.py:381: 2008: (SEP, 2),
	countries\brunei.py:372: RAMADAN_BEGINNING_DATES = {
	countries\brunei.py:382: 2009: (AUG, 22),
	countries\brunei.py:372: RAMADAN_BEGINNING_DATES = {
	countries\brunei.py:383: 2010: (AUG, 11),
	countries\brunei.py:372: RAMADAN_BEGINNING_DATES = {
	countries\brunei.py:384: 2011: (AUG, 1),
	countries\brunei.py:372: RAMADAN_BEGINNING_DATES = {
	countries\brunei.py:385: 2012: (JUL, 20),
	countries\brunei.py:372: RAMADAN_BEGINNING_DATES = {
	countries\brunei.py:386: 2013: (JUL, 9),
	countries\brunei.py:372: RAMADAN_BEGINNING_DATES = {
	countries\brunei.py:387: 2014: (JUN, 29),
	countries\brunei.py:372: RAMADAN_BEGINNING_DATES = {
	countries\brunei.py:388: 2015: (JUN, 18),
	countries\brunei.py:372: RAMADAN_BEGINNING_DATES = {
	countries\brunei.py:389: 2016: (JUN, 7),
	countries\brunei.py:372: RAMADAN_BEGINNING_DATES = {
	countries\brunei.py:390: 2017: (MAY, 27),
	countries\brunei.py:391: 2018: (MAY, 16),
	countries\brunei.py:392: 2019: (MAY, 6),
	countries\brunei.py:393: 2020: (APR, 25),
	countries\brunei.py:394: 2021: (APR, 13),
	countries\brunei.py:395: 2022: (APR, 3),
	countries\brunei.py:396: 2023: (MAR, 23),
	countries\brunei.py:372: RAMADAN_BEGINNING_DATES = {
(call) calendars\custom.py:24: __new__
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
(call) calendars\custom.py:25: <genexpr>
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:26: namespace[f"{attr}_{_CustomCalendar.CUSTOM_ATTR_POSTFIX}"] = namespace[attr]
	calendars\custom.py:27: del namespace[attr]
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
(call) calendars\custom.py:25: <genexpr>
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:26: namespace[f"{attr}_{_CustomCalendar.CUSTOM_ATTR_POSTFIX}"] = namespace[attr]
	calendars\custom.py:27: del namespace[attr]
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
(call) calendars\custom.py:25: <genexpr>
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:26: namespace[f"{attr}_{_CustomCalendar.CUSTOM_ATTR_POSTFIX}"] = namespace[attr]
	calendars\custom.py:27: del namespace[attr]
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
(call) calendars\custom.py:25: <genexpr>
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:26: namespace[f"{attr}_{_CustomCalendar.CUSTOM_ATTR_POSTFIX}"] = namespace[attr]
	calendars\custom.py:27: del namespace[attr]
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
(call) calendars\custom.py:25: <genexpr>
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:26: namespace[f"{attr}_{_CustomCalendar.CUSTOM_ATTR_POSTFIX}"] = namespace[attr]
	calendars\custom.py:27: del namespace[attr]
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
(call) calendars\custom.py:25: <genexpr>
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:26: namespace[f"{attr}_{_CustomCalendar.CUSTOM_ATTR_POSTFIX}"] = namespace[attr]
	calendars\custom.py:27: del namespace[attr]
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
(call) calendars\custom.py:25: <genexpr>
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:26: namespace[f"{attr}_{_CustomCalendar.CUSTOM_ATTR_POSTFIX}"] = namespace[attr]
	calendars\custom.py:27: del namespace[attr]
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
(call) calendars\custom.py:25: <genexpr>
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:29: return super().__new__(cls, name, bases, namespace)
	countries\brunei.py:400: class BruneiStaticHolidays:
(call) countries\brunei.py:400: BruneiStaticHolidays
	countries\brunei.py:400: class BruneiStaticHolidays:
	countries\brunei.py:403: 2017: (OCT, 5, tr("Jubli Emas Sultan Hassanal Bolkiah")),
	countries\brunei.py:401: special_public_holidays = {
	countries\__init__.py:37: from .bulgaria import Bulgaria, BG, BLG
(call) countries\bulgaria.py:0: <module>
	countries\bulgaria.py:12: from datetime import date
	countries\bulgaria.py:13: from gettext import gettext as tr
	countries\bulgaria.py:14: from typing import Set
	countries\bulgaria.py:16: from holidays.calendars.julian_revised import JULIAN_REVISED_CALENDAR
	countries\bulgaria.py:17: from holidays.constants import PUBLIC, SCHOOL
	countries\bulgaria.py:18: from holidays.groups import ChristianHolidays, InternationalHolidays
	countries\bulgaria.py:19: from holidays.observed_holiday_base import ObservedHolidayBase, SAT_SUN_TO_NEXT_WORKDAY
	countries\bulgaria.py:22: class Bulgaria(ObservedHolidayBase, ChristianHolidays, InternationalHolidays):
(call) countries\bulgaria.py:22: Bulgaria
	countries\bulgaria.py:22: class Bulgaria(ObservedHolidayBase, ChristianHolidays, InternationalHolidays):
	countries\bulgaria.py:23: """
	countries\bulgaria.py:45: country = "BG"
	countries\bulgaria.py:46: default_language = "bg"
	countries\bulgaria.py:48: observed_label = tr("%s (почивен ден)")
	countries\bulgaria.py:49: supported_categories = (PUBLIC, SCHOOL)
	countries\bulgaria.py:50: supported_languages = ("bg", "en_US", "uk")
	countries\bulgaria.py:52: def __init__(self, *args, **kwargs):
	countries\bulgaria.py:59: def _populate_observed(self, dts: Set[date], excluded_names: Set[str]) -> None:
	countries\bulgaria.py:67: def _populate_public_holidays(self):
	countries\bulgaria.py:131: def _populate_school_holidays(self):
	countries\bulgaria.py:139: class BG(Bulgaria):
(call) countries\bulgaria.py:139: BG
	countries\bulgaria.py:139: class BG(Bulgaria):
	countries\bulgaria.py:140: pass
	countries\bulgaria.py:143: class BLG(Bulgaria):
(call) countries\bulgaria.py:143: BLG
	countries\bulgaria.py:143: class BLG(Bulgaria):
	countries\bulgaria.py:144: pass
	countries\__init__.py:38: from .burkina_faso import BurkinaFaso, BF, BFA
(call) countries\burkina_faso.py:0: <module>
	countries\burkina_faso.py:12: from holidays.calendars import _CustomIslamicHolidays
	countries\burkina_faso.py:13: from holidays.calendars.gregorian import JAN, APR, MAY, JUN, JUL, AUG, SEP, OCT, NOV, DEC
	countries\burkina_faso.py:14: from holidays.groups import ChristianHolidays, InternationalHolidays, IslamicHolidays
	countries\burkina_faso.py:15: from holidays.observed_holiday_base import ObservedHolidayBase, SUN_TO_NEXT_MON
	countries\burkina_faso.py:18: class BurkinaFaso(ObservedHolidayBase, ChristianHolidays, InternationalHolidays, IslamicHolidays):
(call) countries\burkina_faso.py:18: BurkinaFaso
	countries\burkina_faso.py:18: class BurkinaFaso(ObservedHolidayBase, ChristianHolidays, InternationalHolidays, IslamicHolidays):
	countries\burkina_faso.py:19: """
	countries\burkina_faso.py:24: country = "BF"
	countries\burkina_faso.py:25: observed_label = "%s (observed)"
	countries\burkina_faso.py:27: def __init__(self, *args, **kwargs):
	countries\burkina_faso.py:34: def _populate_public_holidays(self):
	countries\burkina_faso.py:90: class BF(BurkinaFaso):
(call) countries\burkina_faso.py:90: BF
	countries\burkina_faso.py:90: class BF(BurkinaFaso):
	countries\burkina_faso.py:91: pass
	countries\burkina_faso.py:94: class BFA(BurkinaFaso):
(call) countries\burkina_faso.py:94: BFA
	countries\burkina_faso.py:94: class BFA(BurkinaFaso):
	countries\burkina_faso.py:95: pass
	countries\burkina_faso.py:98: class BurkinaFasoIslamicHolidays(_CustomIslamicHolidays):
(call) countries\burkina_faso.py:98: BurkinaFasoIslamicHolidays
	countries\burkina_faso.py:98: class BurkinaFasoIslamicHolidays(_CustomIslamicHolidays):
	countries\burkina_faso.py:100: 2014: (OCT, 5),
	countries\burkina_faso.py:101: 2015: (SEP, 24),
	countries\burkina_faso.py:102: 2016: (SEP, 13),
	countries\burkina_faso.py:103: 2017: (SEP, 2),
	countries\burkina_faso.py:104: 2018: (AUG, 21),
	countries\burkina_faso.py:105: 2019: (AUG, 11),
	countries\burkina_faso.py:106: 2020: (JUL, 31),
	countries\burkina_faso.py:107: 2021: (JUL, 20),
	countries\burkina_faso.py:108: 2022: (JUL, 9),
	countries\burkina_faso.py:109: 2023: (JUN, 28),
	countries\burkina_faso.py:99: EID_AL_ADHA_DATES = {
	countries\burkina_faso.py:113: 2014: (JUL, 29),
	countries\burkina_faso.py:114: 2015: (JUL, 18),
	countries\burkina_faso.py:115: 2016: (JUL, 7),
	countries\burkina_faso.py:116: 2017: (JUN, 26),
	countries\burkina_faso.py:117: 2018: (JUN, 15),
	countries\burkina_faso.py:118: 2019: (JUN, 4),
	countries\burkina_faso.py:119: 2020: (MAY, 24),
	countries\burkina_faso.py:120: 2021: (MAY, 13),
	countries\burkina_faso.py:121: 2022: (MAY, 2),
	countries\burkina_faso.py:122: 2023: (APR, 21),
	countries\burkina_faso.py:112: EID_AL_FITR_DATES = {
	countries\burkina_faso.py:126: 2014: (JAN, 14),
	countries\burkina_faso.py:127: 2015: ((JAN, 3), (DEC, 24)),
	countries\burkina_faso.py:128: 2016: (DEC, 12),
	countries\burkina_faso.py:129: 2017: (DEC, 1),
	countries\burkina_faso.py:130: 2018: (NOV, 21),
	countries\burkina_faso.py:131: 2019: (NOV, 10),
	countries\burkina_faso.py:132: 2020: (OCT, 29),
	countries\burkina_faso.py:133: 2021: (OCT, 19),
	countries\burkina_faso.py:134: 2022: (OCT, 9),
	countries\burkina_faso.py:125: MAWLID_DATES = {
(call) calendars\custom.py:24: __new__
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
(call) calendars\custom.py:25: <genexpr>
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:26: namespace[f"{attr}_{_CustomCalendar.CUSTOM_ATTR_POSTFIX}"] = namespace[attr]
	calendars\custom.py:27: del namespace[attr]
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
(call) calendars\custom.py:25: <genexpr>
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:26: namespace[f"{attr}_{_CustomCalendar.CUSTOM_ATTR_POSTFIX}"] = namespace[attr]
	calendars\custom.py:27: del namespace[attr]
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
(call) calendars\custom.py:25: <genexpr>
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:26: namespace[f"{attr}_{_CustomCalendar.CUSTOM_ATTR_POSTFIX}"] = namespace[attr]
	calendars\custom.py:27: del namespace[attr]
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
(call) calendars\custom.py:25: <genexpr>
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:29: return super().__new__(cls, name, bases, namespace)
	countries\__init__.py:39: from .burundi import Burundi, BI, BDI
(call) countries\burundi.py:0: <module>
	countries\burundi.py:12: from holidays.groups import ChristianHolidays, IslamicHolidays, InternationalHolidays
	countries\burundi.py:13: from holidays.observed_holiday_base import ObservedHolidayBase, SUN_TO_NEXT_MON
	countries\burundi.py:16: class Burundi(ObservedHolidayBase, ChristianHolidays, InternationalHolidays, IslamicHolidays):
(call) countries\burundi.py:16: Burundi
	countries\burundi.py:16: class Burundi(ObservedHolidayBase, ChristianHolidays, InternationalHolidays, IslamicHolidays):
	countries\burundi.py:17: """
	countries\burundi.py:28: country = "BI"
	countries\burundi.py:29: observed_label = "%s (observed)"
	countries\burundi.py:31: def __init__(self, *args, **kwargs):
	countries\burundi.py:38: def _populate_public_holidays(self):
	countries\burundi.py:91: class BI(Burundi):
(call) countries\burundi.py:91: BI
	countries\burundi.py:91: class BI(Burundi):
	countries\burundi.py:92: pass
	countries\burundi.py:95: class BDI(Burundi):
(call) countries\burundi.py:95: BDI
	countries\burundi.py:95: class BDI(Burundi):
	countries\burundi.py:96: pass
	countries\__init__.py:40: from .cambodia import Cambodia, KH, KHM
(call) countries\cambodia.py:0: <module>
	countries\cambodia.py:12: from datetime import timedelta as td
	countries\cambodia.py:13: from gettext import gettext as tr
	countries\cambodia.py:15: from holidays.calendars.gregorian import MAY, AUG, SEP
	countries\cambodia.py:16: from holidays.calendars.thai import KHMER_CALENDAR
	countries\cambodia.py:17: from holidays.groups import InternationalHolidays, StaticHolidays, ThaiCalendarHolidays
	countries\cambodia.py:18: from holidays.holiday_base import HolidayBase
	countries\cambodia.py:21: class Cambodia(HolidayBase, InternationalHolidays, StaticHolidays, ThaiCalendarHolidays):
(call) countries\cambodia.py:21: Cambodia
	countries\cambodia.py:21: class Cambodia(HolidayBase, InternationalHolidays, StaticHolidays, ThaiCalendarHolidays):
	countries\cambodia.py:22: """
	countries\cambodia.py:51: country = "KH"
	countries\cambodia.py:52: default_language = "km"
	countries\cambodia.py:53: supported_languages = ("en_US", "km", "th")
	countries\cambodia.py:55: def __init__(self, *args, **kwargs):
	countries\cambodia.py:61: def _populate_public_holidays(self):
	countries\cambodia.py:274: class KH(Cambodia):
(call) countries\cambodia.py:274: KH
	countries\cambodia.py:274: class KH(Cambodia):
	countries\cambodia.py:275: pass
	countries\cambodia.py:278: class KHM(Cambodia):
(call) countries\cambodia.py:278: KHM
	countries\cambodia.py:278: class KHM(Cambodia):
	countries\cambodia.py:279: pass
	countries\cambodia.py:282: class CambodiaStaticHolidays:
(call) countries\cambodia.py:282: CambodiaStaticHolidays
	countries\cambodia.py:282: class CambodiaStaticHolidays:
	countries\cambodia.py:283: sangkranta_in_lieu_covid = tr(
	countries\cambodia.py:285: "ថ្ងៃឈប់សម្រាកសងជំនួសឲ្យពិធីបុណ្យចូលឆ្នាំថ្មីប្រពៃណីជាតិ"
	countries\cambodia.py:283: sangkranta_in_lieu_covid = tr(
	countries\cambodia.py:288: special_in_lieu_holidays = tr("ថ្ងៃឈប់សម្រាកសងជំនួស")
	countries\cambodia.py:292: (MAY, 2, special_in_lieu_holidays),
	countries\cambodia.py:293: (MAY, 16, special_in_lieu_holidays),
	countries\cambodia.py:291: 2016: (
	countries\cambodia.py:295: 2018: (MAY, 21, special_in_lieu_holidays),
	countries\cambodia.py:296: 2019: (SEP, 30, special_in_lieu_holidays),
	countries\cambodia.py:298: (MAY, 11, special_in_lieu_holidays),
	countries\cambodia.py:299: (AUG, 17, sangkranta_in_lieu_covid),
	countries\cambodia.py:300: (AUG, 18, sangkranta_in_lieu_covid),
	countries\cambodia.py:301: (AUG, 19, sangkranta_in_lieu_covid),
	countries\cambodia.py:302: (AUG, 20, sangkranta_in_lieu_covid),
	countries\cambodia.py:303: (AUG, 21, sangkranta_in_lieu_covid),
	countries\cambodia.py:297: 2020: (
	countries\cambodia.py:290: special_public_holidays = {
	countries\__init__.py:41: from .cameroon import Cameroon, CM, CMR
(call) countries\cameroon.py:0: <module>
	countries\cameroon.py:12: from holidays.calendars import _CustomIslamicHolidays
	countries\cameroon.py:13: from holidays.calendars.gregorian import JAN, FEB, MAR, APR, MAY, JUN, JUL, AUG, SEP, OCT, NOV, DEC
	countries\cameroon.py:14: from holidays.groups import (
	countries\cameroon.py:20: from holidays.observed_holiday_base import ObservedHolidayBase, SUN_TO_NEXT_WORKDAY
	countries\cameroon.py:23: class Cameroon(
	countries\cameroon.py:24: ObservedHolidayBase, ChristianHolidays, InternationalHolidays, IslamicHolidays, StaticHolidays
	countries\cameroon.py:23: class Cameroon(
(call) countries\cameroon.py:23: Cameroon
	countries\cameroon.py:23: class Cameroon(
	countries\cameroon.py:26: """
	countries\cameroon.py:33: country = "CM"
	countries\cameroon.py:34: observed_label = "%s (observed)"
	countries\cameroon.py:36: def __init__(self, *args, **kwargs):
	countries\cameroon.py:44: def _populate_public_holidays(self):
	countries\cameroon.py:90: class CM(Cameroon):
(call) countries\cameroon.py:90: CM
	countries\cameroon.py:90: class CM(Cameroon):
	countries\cameroon.py:91: pass
	countries\cameroon.py:94: class CMR(Cameroon):
(call) countries\cameroon.py:94: CMR
	countries\cameroon.py:94: class CMR(Cameroon):
	countries\cameroon.py:95: pass
	countries\cameroon.py:98: class CameroonIslamicHolidays(_CustomIslamicHolidays):
(call) countries\cameroon.py:98: CameroonIslamicHolidays
	countries\cameroon.py:98: class CameroonIslamicHolidays(_CustomIslamicHolidays):
	countries\cameroon.py:99: EID_AL_ADHA_DATES = {
	countries\cameroon.py:100: 2001: (MAR, 6),
	countries\cameroon.py:99: EID_AL_ADHA_DATES = {
	countries\cameroon.py:101: 2002: (FEB, 23),
	countries\cameroon.py:99: EID_AL_ADHA_DATES = {
	countries\cameroon.py:102: 2003: (FEB, 12),
	countries\cameroon.py:99: EID_AL_ADHA_DATES = {
	countries\cameroon.py:103: 2004: (FEB, 2),
	countries\cameroon.py:99: EID_AL_ADHA_DATES = {
	countries\cameroon.py:104: 2005: (JAN, 21),
	countries\cameroon.py:99: EID_AL_ADHA_DATES = {
	countries\cameroon.py:105: 2006: ((JAN, 10), (DEC, 31)),
	countries\cameroon.py:99: EID_AL_ADHA_DATES = {
	countries\cameroon.py:106: 2007: (DEC, 20),
	countries\cameroon.py:99: EID_AL_ADHA_DATES = {
	countries\cameroon.py:107: 2008: (DEC, 9),
	countries\cameroon.py:99: EID_AL_ADHA_DATES = {
	countries\cameroon.py:108: 2009: (NOV, 28),
	countries\cameroon.py:99: EID_AL_ADHA_DATES = {
	countries\cameroon.py:109: 2010: (NOV, 17),
	countries\cameroon.py:99: EID_AL_ADHA_DATES = {
	countries\cameroon.py:110: 2011: (NOV, 7),
	countries\cameroon.py:99: EID_AL_ADHA_DATES = {
	countries\cameroon.py:111: 2012: (OCT, 26),
	countries\cameroon.py:99: EID_AL_ADHA_DATES = {
	countries\cameroon.py:112: 2013: (OCT, 15),
	countries\cameroon.py:99: EID_AL_ADHA_DATES = {
	countries\cameroon.py:113: 2014: (OCT, 5),
	countries\cameroon.py:99: EID_AL_ADHA_DATES = {
	countries\cameroon.py:114: 2015: (SEP, 24),
	countries\cameroon.py:99: EID_AL_ADHA_DATES = {
	countries\cameroon.py:115: 2016: (SEP, 13),
	countries\cameroon.py:99: EID_AL_ADHA_DATES = {
	countries\cameroon.py:116: 2017: (SEP, 2),
	countries\cameroon.py:99: EID_AL_ADHA_DATES = {
	countries\cameroon.py:117: 2018: (AUG, 21),
	countries\cameroon.py:118: 2019: (AUG, 11),
	countries\cameroon.py:119: 2020: (JUL, 31),
	countries\cameroon.py:120: 2021: (JUL, 20),
	countries\cameroon.py:121: 2022: (JUL, 9),
	countries\cameroon.py:122: 2023: (JUN, 28),
	countries\cameroon.py:99: EID_AL_ADHA_DATES = {
	countries\cameroon.py:125: EID_AL_FITR_DATES = {
	countries\cameroon.py:126: 2001: (DEC, 17),
	countries\cameroon.py:125: EID_AL_FITR_DATES = {
	countries\cameroon.py:127: 2002: (DEC, 6),
	countries\cameroon.py:125: EID_AL_FITR_DATES = {
	countries\cameroon.py:128: 2003: (NOV, 26),
	countries\cameroon.py:125: EID_AL_FITR_DATES = {
	countries\cameroon.py:129: 2004: (NOV, 14),
	countries\cameroon.py:125: EID_AL_FITR_DATES = {
	countries\cameroon.py:130: 2005: (NOV, 4),
	countries\cameroon.py:125: EID_AL_FITR_DATES = {
	countries\cameroon.py:131: 2006: (OCT, 24),
	countries\cameroon.py:125: EID_AL_FITR_DATES = {
	countries\cameroon.py:132: 2007: (OCT, 13),
	countries\cameroon.py:125: EID_AL_FITR_DATES = {
	countries\cameroon.py:133: 2008: (OCT, 2),
	countries\cameroon.py:125: EID_AL_FITR_DATES = {
	countries\cameroon.py:134: 2009: (SEP, 21),
	countries\cameroon.py:125: EID_AL_FITR_DATES = {
	countries\cameroon.py:135: 2010: (SEP, 10),
	countries\cameroon.py:125: EID_AL_FITR_DATES = {
	countries\cameroon.py:136: 2011: (AUG, 31),
	countries\cameroon.py:125: EID_AL_FITR_DATES = {
	countries\cameroon.py:137: 2012: (AUG, 19),
	countries\cameroon.py:125: EID_AL_FITR_DATES = {
	countries\cameroon.py:138: 2013: (AUG, 8),
	countries\cameroon.py:125: EID_AL_FITR_DATES = {
	countries\cameroon.py:139: 2014: (JUL, 28),
	countries\cameroon.py:125: EID_AL_FITR_DATES = {
	countries\cameroon.py:140: 2015: (JUL, 18),
	countries\cameroon.py:125: EID_AL_FITR_DATES = {
	countries\cameroon.py:141: 2016: (JUL, 7),
	countries\cameroon.py:125: EID_AL_FITR_DATES = {
	countries\cameroon.py:142: 2017: (JUN, 26),
	countries\cameroon.py:125: EID_AL_FITR_DATES = {
	countries\cameroon.py:143: 2018: (JUN, 15),
	countries\cameroon.py:144: 2019: (JUN, 4),
	countries\cameroon.py:145: 2020: (MAY, 24),
	countries\cameroon.py:146: 2021: (MAY, 13),
	countries\cameroon.py:147: 2022: (MAY, 2),
	countries\cameroon.py:148: 2023: (APR, 21),
	countries\cameroon.py:125: EID_AL_FITR_DATES = {
	countries\cameroon.py:151: MAWLID_DATES = {
	countries\cameroon.py:152: 2001: (JUN, 4),
	countries\cameroon.py:151: MAWLID_DATES = {
	countries\cameroon.py:153: 2002: (MAY, 24),
	countries\cameroon.py:151: MAWLID_DATES = {
	countries\cameroon.py:154: 2003: (MAY, 14),
	countries\cameroon.py:151: MAWLID_DATES = {
	countries\cameroon.py:155: 2004: (MAY, 2),
	countries\cameroon.py:151: MAWLID_DATES = {
	countries\cameroon.py:156: 2005: (APR, 21),
	countries\cameroon.py:151: MAWLID_DATES = {
	countries\cameroon.py:157: 2006: (APR, 11),
	countries\cameroon.py:151: MAWLID_DATES = {
	countries\cameroon.py:158: 2007: (MAR, 31),
	countries\cameroon.py:151: MAWLID_DATES = {
	countries\cameroon.py:159: 2008: (MAR, 20),
	countries\cameroon.py:151: MAWLID_DATES = {
	countries\cameroon.py:160: 2009: (MAR, 9),
	countries\cameroon.py:151: MAWLID_DATES = {
	countries\cameroon.py:161: 2010: (FEB, 26),
	countries\cameroon.py:151: MAWLID_DATES = {
	countries\cameroon.py:162: 2011: (FEB, 16),
	countries\cameroon.py:151: MAWLID_DATES = {
	countries\cameroon.py:163: 2012: (FEB, 5),
	countries\cameroon.py:151: MAWLID_DATES = {
	countries\cameroon.py:164: 2013: (JAN, 24),
	countries\cameroon.py:151: MAWLID_DATES = {
	countries\cameroon.py:165: 2014: (JAN, 14),
	countries\cameroon.py:151: MAWLID_DATES = {
	countries\cameroon.py:166: 2015: ((JAN, 3), (DEC, 24)),
	countries\cameroon.py:151: MAWLID_DATES = {
	countries\cameroon.py:167: 2016: (DEC, 12),
	countries\cameroon.py:151: MAWLID_DATES = {
	countries\cameroon.py:168: 2017: (DEC, 1),
	countries\cameroon.py:151: MAWLID_DATES = {
	countries\cameroon.py:169: 2018: (NOV, 21),
	countries\cameroon.py:170: 2019: (NOV, 10),
	countries\cameroon.py:171: 2020: (OCT, 29),
	countries\cameroon.py:172: 2021: (OCT, 19),
	countries\cameroon.py:173: 2022: (OCT, 8),
	countries\cameroon.py:151: MAWLID_DATES = {
(call) calendars\custom.py:24: __new__
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
(call) calendars\custom.py:25: <genexpr>
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:26: namespace[f"{attr}_{_CustomCalendar.CUSTOM_ATTR_POSTFIX}"] = namespace[attr]
	calendars\custom.py:27: del namespace[attr]
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
(call) calendars\custom.py:25: <genexpr>
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:26: namespace[f"{attr}_{_CustomCalendar.CUSTOM_ATTR_POSTFIX}"] = namespace[attr]
	calendars\custom.py:27: del namespace[attr]
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
(call) calendars\custom.py:25: <genexpr>
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:26: namespace[f"{attr}_{_CustomCalendar.CUSTOM_ATTR_POSTFIX}"] = namespace[attr]
	calendars\custom.py:27: del namespace[attr]
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
(call) calendars\custom.py:25: <genexpr>
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:29: return super().__new__(cls, name, bases, namespace)
	countries\cameroon.py:177: class CameroonStaticHolidays:
(call) countries\cameroon.py:177: CameroonStaticHolidays
	countries\cameroon.py:177: class CameroonStaticHolidays:
	countries\cameroon.py:179: 2021: (
	countries\cameroon.py:180: (MAY, 14, "Public Holiday"),
	countries\cameroon.py:181: (JUL, 19, "Public Holiday"),
	countries\cameroon.py:179: 2021: (
	countries\cameroon.py:178: special_public_holidays = {
	countries\cameroon.py:186: 2007: (JAN, 2, "Eid al-Adha"),
	countries\cameroon.py:185: special_public_holidays_observed = {
	countries\__init__.py:42: from .canada import Canada, CA, CAN
(call) countries\canada.py:0: <module>
	countries\canada.py:12: from datetime import date
	countries\canada.py:13: from gettext import gettext as tr
	countries\canada.py:15: from holidays.calendars.gregorian import MAR, APR, JUN, JUL, SEP
	countries\canada.py:16: from holidays.constants import GOVERNMENT, OPTIONAL, PUBLIC
	countries\canada.py:17: from holidays.groups import ChristianHolidays, InternationalHolidays, StaticHolidays
	countries\canada.py:18: from holidays.observed_holiday_base import (
	countries\canada.py:28: class Canada(ObservedHolidayBase, ChristianHolidays, InternationalHolidays, StaticHolidays):
(call) countries\canada.py:28: Canada
	countries\canada.py:28: class Canada(ObservedHolidayBase, ChristianHolidays, InternationalHolidays, StaticHolidays):
	countries\canada.py:29: """
	countries\canada.py:42: country = "CA"
	countries\canada.py:43: default_language = "en_CA"
	countries\canada.py:45: observed_label = tr("%s (observed)")
	countries\canada.py:46: supported_categories = (GOVERNMENT, OPTIONAL, PUBLIC)
	countries\canada.py:47: subdivisions = (
	countries\canada.py:62: supported_languages = ("ar", "en_CA", "en_US", "fr", "th")
	countries\canada.py:64: def __init__(self, *args, **kwargs):
	countries\canada.py:71: def _get_nearest_monday(self, *args) -> date:
	countries\canada.py:74: def _add_statutory_holidays(self):
	countries\canada.py:99: def _populate_public_holidays(self):
	countries\canada.py:107: def _populate_government_holidays(self):
	countries\canada.py:141: def _populate_optional_holidays(self):
	countries\canada.py:155: def _add_thanksgiving_day(self):
	countries\canada.py:167: def _populate_subdiv_ab_public_holidays(self):
	countries\canada.py:185: def _populate_subdiv_ab_optional_holidays(self):
	countries\canada.py:201: def _populate_subdiv_bc_public_holidays(self):
	countries\canada.py:231: def _populate_subdiv_mb_public_holidays(self):
	countries\canada.py:242: def _populate_subdiv_mb_optional_holidays(self):
	countries\canada.py:257: def _populate_subdiv_nb_public_holidays(self):
	countries\canada.py:271: def _populate_subdiv_nb_optional_holidays(self):
	countries\canada.py:281: def _populate_subdiv_nl_public_holidays(self):
	countries\canada.py:293: def _populate_subdiv_nl_optional_holidays(self):
	countries\canada.py:319: def _populate_subdiv_ns_public_holidays(self):
	countries\canada.py:329: def _populate_subdiv_ns_optional_holidays(self):
	countries\canada.py:334: def _populate_subdiv_nt_public_holidays(self):
	countries\canada.py:357: def _populate_subdiv_nu_public_holidays(self):
	countries\canada.py:376: def _populate_subdiv_nu_optional_holidays(self):
	countries\canada.py:385: def _populate_subdiv_on_public_holidays(self):
	countries\canada.py:398: def _populate_subdiv_on_optional_holidays(self):
	countries\canada.py:403: def _populate_subdiv_pe_public_holidays(self):
	countries\canada.py:423: def _populate_subdiv_qc_public_holidays(self):
	countries\canada.py:440: def _populate_subdiv_qc_optional_holidays(self):
	countries\canada.py:444: def _populate_subdiv_sk_public_holidays(self):
	countries\canada.py:467: def _populate_subdiv_yt_public_holidays(self):
	countries\canada.py:493: def _populate_subdiv_yt_optional_holidays(self):
	countries\canada.py:499: class CA(Canada):
(call) countries\canada.py:499: CA
	countries\canada.py:499: class CA(Canada):
	countries\canada.py:500: pass
	countries\canada.py:503: class CAN(Canada):
(call) countries\canada.py:503: CAN
	countries\canada.py:503: class CAN(Canada):
	countries\canada.py:504: pass
	countries\canada.py:507: class CanadaStaticHolidays:
(call) countries\canada.py:507: CanadaStaticHolidays
	countries\canada.py:507: class CanadaStaticHolidays:
	countries\canada.py:509: queen_funeral = tr("Funeral of Her Majesty the Queen Elizabeth II")
	countries\canada.py:512: 2022: (SEP, 19, queen_funeral),
	countries\canada.py:511: special_bc_public_holidays = {
	countries\canada.py:516: 2022: (SEP, 19, queen_funeral),
	countries\canada.py:515: special_nb_public_holidays = {
	countries\canada.py:520: 2022: (SEP, 19, queen_funeral),
	countries\canada.py:519: special_nl_public_holidays = {
	countries\canada.py:524: 2022: (SEP, 19, queen_funeral),
	countries\canada.py:523: special_ns_public_holidays = {
	countries\canada.py:528: 2022: (SEP, 19, queen_funeral),
	countries\canada.py:527: special_pe_public_holidays = {
	countries\canada.py:532: 2022: (SEP, 19, queen_funeral),
	countries\canada.py:531: special_yt_public_holidays = {
	countries\__init__.py:43: from .chad import Chad, TD, TCD
(call) countries\chad.py:0: <module>
	countries\chad.py:12: from holidays.calendars import _CustomIslamicHolidays
	countries\chad.py:13: from holidays.calendars.gregorian import JAN, APR, MAY, JUN, JUL, AUG, SEP, OCT, NOV, DEC
	countries\chad.py:14: from holidays.groups import (
	countries\chad.py:20: from holidays.observed_holiday_base import ObservedHolidayBase, SUN_TO_NEXT_MON
	countries\chad.py:23: class Chad(
	countries\chad.py:24: ObservedHolidayBase, ChristianHolidays, InternationalHolidays, IslamicHolidays, StaticHolidays
	countries\chad.py:23: class Chad(
(call) countries\chad.py:23: Chad
	countries\chad.py:23: class Chad(
	countries\chad.py:26: """
	countries\chad.py:32: country = "TD"
	countries\chad.py:33: observed_label = "%s (observed)"
	countries\chad.py:35: def __init__(self, *args, **kwargs):
	countries\chad.py:43: def _populate_public_holidays(self):
	countries\chad.py:86: class TD(Chad):
(call) countries\chad.py:86: TD
	countries\chad.py:86: class TD(Chad):
	countries\chad.py:87: pass
	countries\chad.py:90: class TCD(Chad):
(call) countries\chad.py:90: TCD
	countries\chad.py:90: class TCD(Chad):
	countries\chad.py:91: pass
	countries\chad.py:94: class ChadIslamicHolidays(_CustomIslamicHolidays):
(call) countries\chad.py:94: ChadIslamicHolidays
	countries\chad.py:94: class ChadIslamicHolidays(_CustomIslamicHolidays):
	countries\chad.py:96: 2015: (SEP, 24),
	countries\chad.py:97: 2016: (SEP, 13),
	countries\chad.py:98: 2017: (SEP, 2),
	countries\chad.py:99: 2018: (AUG, 22),
	countries\chad.py:100: 2019: (AUG, 11),
	countries\chad.py:101: 2020: (JUL, 31),
	countries\chad.py:102: 2021: (JUL, 20),
	countries\chad.py:103: 2022: (JUL, 9),
	countries\chad.py:104: 2023: (JUN, 28),
	countries\chad.py:95: EID_AL_ADHA_DATES = {
	countries\chad.py:108: 2015: (JUL, 18),
	countries\chad.py:109: 2016: (JUL, 7),
	countries\chad.py:110: 2017: (JUN, 26),
	countries\chad.py:111: 2018: (JUN, 15),
	countries\chad.py:112: 2019: (JUN, 4),
	countries\chad.py:113: 2020: (MAY, 24),
	countries\chad.py:114: 2021: (MAY, 13),
	countries\chad.py:115: 2022: (MAY, 2),
	countries\chad.py:116: 2023: (APR, 21),
	countries\chad.py:107: EID_AL_FITR_DATES = {
	countries\chad.py:120: 2015: ((JAN, 3), (DEC, 24)),
	countries\chad.py:121: 2016: (DEC, 12),
	countries\chad.py:122: 2017: (DEC, 1),
	countries\chad.py:123: 2018: (NOV, 21),
	countries\chad.py:124: 2019: (NOV, 9),
	countries\chad.py:125: 2020: (OCT, 29),
	countries\chad.py:126: 2021: (OCT, 18),
	countries\chad.py:127: 2022: (OCT, 8),
	countries\chad.py:119: MAWLID_DATES = {
(call) calendars\custom.py:24: __new__
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
(call) calendars\custom.py:25: <genexpr>
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:26: namespace[f"{attr}_{_CustomCalendar.CUSTOM_ATTR_POSTFIX}"] = namespace[attr]
	calendars\custom.py:27: del namespace[attr]
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
(call) calendars\custom.py:25: <genexpr>
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:26: namespace[f"{attr}_{_CustomCalendar.CUSTOM_ATTR_POSTFIX}"] = namespace[attr]
	calendars\custom.py:27: del namespace[attr]
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
(call) calendars\custom.py:25: <genexpr>
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:26: namespace[f"{attr}_{_CustomCalendar.CUSTOM_ATTR_POSTFIX}"] = namespace[attr]
	calendars\custom.py:27: del namespace[attr]
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
(call) calendars\custom.py:25: <genexpr>
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:29: return super().__new__(cls, name, bases, namespace)
	countries\chad.py:131: class ChadStaticHolidays:
(call) countries\chad.py:131: ChadStaticHolidays
	countries\chad.py:131: class ChadStaticHolidays:
	countries\chad.py:133: 2021: (APR, 23, "Funeral of Idriss Déby Itno"),
	countries\chad.py:132: special_public_holidays = {
	countries\__init__.py:44: from .chile import Chile, CL, CHL
(call) countries\chile.py:0: <module>
	countries\chile.py:12: from datetime import timedelta as td
	countries\chile.py:13: from gettext import gettext as tr
	countries\chile.py:14: from typing import Tuple
	countries\chile.py:16: from holidays.calendars.gregorian import JUN, SEP
	countries\chile.py:17: from holidays.groups import ChristianHolidays, InternationalHolidays, StaticHolidays
	countries\chile.py:18: from holidays.observed_holiday_base import (
	countries\chile.py:26: class Chile(ObservedHolidayBase, ChristianHolidays, InternationalHolidays, StaticHolidays):
(call) countries\chile.py:26: Chile
	countries\chile.py:26: class Chile(ObservedHolidayBase, ChristianHolidays, InternationalHolidays, StaticHolidays):
	countries\chile.py:27: """
	countries\chile.py:52: country = "CL"
	countries\chile.py:53: default_language = "es"
	countries\chile.py:54: subdivisions = (
	countries\chile.py:72: supported_languages = ("en_US", "es", "uk")
	countries\chile.py:74: def __init__(self, *args, **kwargs):
	countries\chile.py:82: def _populate_public_holidays(self):
	countries\chile.py:196: def _populate_subdiv_ap_public_holidays(self):
	countries\chile.py:201: def _populate_subdiv_nb_public_holidays(self):
	countries\chile.py:208: @property
	countries\chile.py:209: def _summer_solstice_date(self) -> Tuple[int, int]:
	countries\chile.py:208: @property
	countries\chile.py:209: def _summer_solstice_date(self) -> Tuple[int, int]:
	countries\chile.py:218: class CL(Chile):
(call) countries\chile.py:218: CL
	countries\chile.py:218: class CL(Chile):
	countries\chile.py:219: pass
	countries\chile.py:222: class CHL(Chile):
(call) countries\chile.py:222: CHL
	countries\chile.py:222: class CHL(Chile):
	countries\chile.py:223: pass
	countries\chile.py:226: class ChileStaticHolidays:
(call) countries\chile.py:226: ChileStaticHolidays
	countries\chile.py:226: class ChileStaticHolidays:
	countries\chile.py:229: 2022: (SEP, 16, tr("Feriado nacional")),
	countries\chile.py:227: special_public_holidays = {
	countries\__init__.py:45: from .china import China, CN, CHN
(call) countries\china.py:0: <module>
	countries\china.py:12: from gettext import gettext as tr
	countries\china.py:14: from holidays.calendars.gregorian import JAN, FEB, MAR, APR, MAY, JUN, SEP, OCT, DEC
	countries\china.py:15: from holidays.constants import HALF_DAY, PUBLIC
	countries\china.py:16: from holidays.groups import ChineseCalendarHolidays, InternationalHolidays, StaticHolidays
	countries\china.py:17: from holidays.observed_holiday_base import ObservedHolidayBase, SAT_SUN_TO_NEXT_WORKDAY
	countries\china.py:20: class China(ObservedHolidayBase, ChineseCalendarHolidays, InternationalHolidays, StaticHolidays):
(call) countries\china.py:20: China
	countries\china.py:20: class China(ObservedHolidayBase, ChineseCalendarHolidays, InternationalHolidays, StaticHolidays):
	countries\china.py:21: """
	countries\china.py:62: country = "CN"
	countries\china.py:64: observed_label = tr("%s（观察日）")
	countries\china.py:65: supported_categories = (PUBLIC, HALF_DAY)
	countries\china.py:66: default_language = "zh_CN"
	countries\china.py:67: supported_languages = ("en_US", "th", "zh_CN", "zh_TW")
	countries\china.py:69: def __init__(self, *args, **kwargs):
	countries\china.py:77: def _populate_public_holidays(self):
	countries\china.py:176: def _populate_half_day_holidays(self):
	countries\china.py:195: class CN(China):
(call) countries\china.py:195: CN
	countries\china.py:195: class CN(China):
	countries\china.py:196: pass
	countries\china.py:199: class CHN(China):
(call) countries\china.py:199: CHN
	countries\china.py:199: class CHN(China):
	countries\china.py:200: pass
	countries\china.py:203: class ChinaStaticHolidays:
(call) countries\china.py:203: ChinaStaticHolidays
	countries\china.py:203: class ChinaStaticHolidays:
	countries\china.py:205: substituted_date_format = tr("%Y-%m-%d")
	countries\china.py:207: substituted_label = tr("休息日（%s日起取代）")
	countries\china.py:210: dragon_boat_festival = tr("端午节")
	countries\china.py:213: mid_autumn_festival = tr("中秋节")
	countries\china.py:217: victory_70_anniversary = tr("中国人民抗日战争暨世界反法西斯战争胜利70周年纪念日")
	countries\china.py:219: special_public_holidays = {
	countries\china.py:220: 2001: (
	countries\china.py:221: (JAN, 29, JAN, 20),  # Spring Festival
	countries\china.py:222: (JAN, 30, JAN, 21),  # Spring Festival
	countries\china.py:223: (MAY, 4, APR, 28),  # Labor Day
	countries\china.py:224: (MAY, 7, APR, 29),  # Labor Day
	countries\china.py:225: (OCT, 4, SEP, 29),  # National Day
	countries\china.py:226: (OCT, 5, SEP, 30),  # National Day
	countries\china.py:220: 2001: (
	countries\china.py:219: special_public_holidays = {
	countries\china.py:228: 2002: (
	countries\china.py:229: (JAN, 2, DEC, 29, 2001),  # New Year's Day
	countries\china.py:230: (JAN, 3, DEC, 30, 2001),  # New Year's Day
	countries\china.py:231: (FEB, 15, FEB, 9),  # Spring Festival
	countries\china.py:232: (FEB, 18, FEB, 10),  # Spring Festival
	countries\china.py:233: (MAY, 6, APR, 27),  # Labor Day
	countries\china.py:234: (MAY, 7, APR, 28),  # Labor Day
	countries\china.py:235: (OCT, 4, SEP, 28),  # National Day
	countries\china.py:236: (OCT, 7, SEP, 29),  # National Day
	countries\china.py:228: 2002: (
	countries\china.py:219: special_public_holidays = {
	countries\china.py:238: 2003: (
	countries\china.py:239: (FEB, 6, FEB, 8),  # Spring Festival
	countries\china.py:240: (FEB, 7, FEB, 9),  # Spring Festival
	countries\china.py:241: (MAY, 6, APR, 26),  # Labor Day
	countries\china.py:242: (MAY, 7, APR, 27),  # Labor Day
	countries\china.py:243: (OCT, 6, SEP, 27),  # National Day
	countries\china.py:244: (OCT, 7, SEP, 28),  # National Day
	countries\china.py:238: 2003: (
	countries\china.py:219: special_public_holidays = {
	countries\china.py:246: 2004: (
	countries\china.py:247: (JAN, 27, JAN, 17),  # Spring Festival
	countries\china.py:248: (JAN, 28, JAN, 18),  # Spring Festival
	countries\china.py:249: (MAY, 6, MAY, 8),  # Labor Day
	countries\china.py:250: (MAY, 7, MAY, 9),  # Labor Day
	countries\china.py:251: (OCT, 6, OCT, 9),  # National Day
	countries\china.py:252: (OCT, 7, OCT, 10),  # National Day
	countries\china.py:246: 2004: (
	countries\china.py:219: special_public_holidays = {
	countries\china.py:254: 2005: (
	countries\china.py:255: (FEB, 14, FEB, 5),  # Spring Festival
	countries\china.py:256: (FEB, 15, FEB, 6),  # Spring Festival
	countries\china.py:257: (MAY, 5, APR, 30),  # Labor Day
	countries\china.py:258: (MAY, 6, MAY, 8),  # Labor Day
	countries\china.py:259: (OCT, 6, OCT, 8),  # National Day
	countries\china.py:260: (OCT, 7, OCT, 9),  # National Day
	countries\china.py:254: 2005: (
	countries\china.py:219: special_public_holidays = {
	countries\china.py:262: 2006: (
	countries\china.py:263: (JAN, 3, DEC, 31, 2005),  # New Year's Day
	countries\china.py:264: (FEB, 2, JAN, 28),  # Spring Festival
	countries\china.py:265: (FEB, 3, FEB, 5),  # Spring Festival
	countries\china.py:266: (MAY, 4, APR, 29),  # Labor Day
	countries\china.py:267: (MAY, 5, APR, 30),  # Labor Day
	countries\china.py:268: (OCT, 5, SEP, 30),  # National Day
	countries\china.py:269: (OCT, 6, OCT, 8),  # National Day
	countries\china.py:262: 2006: (
	countries\china.py:219: special_public_holidays = {
	countries\china.py:271: 2007: (
	countries\china.py:272: (JAN, 2, DEC, 30, 2006),  # New Year's Day
	countries\china.py:273: (JAN, 3, DEC, 31, 2006),  # New Year's Day
	countries\china.py:274: (FEB, 22, FEB, 17),  # Spring Festival
	countries\china.py:275: (FEB, 23, FEB, 25),  # Spring Festival
	countries\china.py:276: (MAY, 4, APR, 28),  # Labor Day
	countries\china.py:277: (MAY, 7, APR, 29),  # Labor Day
	countries\china.py:278: (OCT, 4, SEP, 29),  # National Day
	countries\china.py:279: (OCT, 5, SEP, 30),  # National Day
	countries\china.py:280: (DEC, 31, DEC, 29),  # New Year's Day
	countries\china.py:271: 2007: (
	countries\china.py:219: special_public_holidays = {
	countries\china.py:282: 2008: (
	countries\china.py:283: (FEB, 11, FEB, 2),  # Spring Festival
	countries\china.py:284: (FEB, 12, FEB, 3),  # Spring Festival
	countries\china.py:285: (MAY, 2, MAY, 4),  # Labor Day
	countries\china.py:286: (SEP, 29, SEP, 27),  # National Day
	countries\china.py:287: (SEP, 30, SEP, 28),  # National Day
	countries\china.py:282: 2008: (
	countries\china.py:219: special_public_holidays = {
	countries\china.py:289: 2009: (
	countries\china.py:290: (JAN, 2, JAN, 4),  # New Year's Day
	countries\china.py:291: (JAN, 29, JAN, 24),  # Spring Festival
	countries\china.py:292: (JAN, 30, FEB, 1),  # Spring Festival
	countries\china.py:293: (MAY, 29, MAY, 31),  # Dragon Boat Festival
	countries\china.py:294: (OCT, 7, SEP, 27),  # National Day
	countries\china.py:295: (OCT, 8, OCT, 10),  # National Day
	countries\china.py:289: 2009: (
	countries\china.py:219: special_public_holidays = {
	countries\china.py:297: 2010: (
	countries\china.py:298: (FEB, 18, FEB, 20),  # Spring Festival
	countries\china.py:299: (FEB, 19, FEB, 21),  # Spring Festival
	countries\china.py:300: (JUN, 14, JUN, 12),  # Dragon Boat Festival
	countries\china.py:301: (JUN, 15, JUN, 13),  # Dragon Boat Festival
	countries\china.py:302: (SEP, 23, SEP, 19),  # Mid-Autumn Festival
	countries\china.py:303: (SEP, 24, SEP, 25),  # Mid-Autumn Festival
	countries\china.py:304: (OCT, 6, SEP, 26),  # National Day
	countries\china.py:305: (OCT, 7, OCT, 9),  # National Day
	countries\china.py:297: 2010: (
	countries\china.py:219: special_public_holidays = {
	countries\china.py:307: 2011: (
	countries\china.py:308: (FEB, 7, JAN, 30),  # Spring Festival
	countries\china.py:309: (FEB, 8, FEB, 12),  # Spring Festival
	countries\china.py:310: (APR, 4, APR, 2),  # Tomb-Sweeping Day
	countries\china.py:311: (OCT, 6, OCT, 8),  # National Day
	countries\china.py:312: (OCT, 7, OCT, 9),  # National Day
	countries\china.py:307: 2011: (
	countries\china.py:219: special_public_holidays = {
	countries\china.py:314: 2012: (
	countries\china.py:315: (JAN, 3, DEC, 31, 2011),  # New Year's Day
	countries\china.py:316: (JAN, 26, JAN, 21),  # Spring Festival
	countries\china.py:317: (JAN, 27, JAN, 29),  # Spring Festival
	countries\china.py:318: (APR, 2, MAR, 31),  # Tomb-Sweeping Day
	countries\china.py:319: (APR, 3, APR, 1),  # Tomb-Sweeping Day
	countries\china.py:320: (APR, 30, APR, 28),  # Labor Day
	countries\china.py:321: (OCT, 5, SEP, 29),  # National Day
	countries\china.py:314: 2012: (
	countries\china.py:219: special_public_holidays = {
	countries\china.py:323: 2013: (
	countries\china.py:324: (JAN, 2, JAN, 5),  # New Year's Day
	countries\china.py:325: (JAN, 3, JAN, 6),  # New Year's Day
	countries\china.py:326: (FEB, 14, FEB, 16),  # Spring Festival
	countries\china.py:327: (FEB, 15, FEB, 17),  # Spring Festival
	countries\china.py:328: (APR, 5, APR, 7),  # Tomb-Sweeping Day
	countries\china.py:329: (APR, 29, APR, 27),  # Labor Day
	countries\china.py:330: (APR, 30, APR, 28),  # Labor Day
	countries\china.py:331: (JUN, 10, JUN, 8),  # Dragon Boat Festival
	countries\china.py:332: (JUN, 11, JUN, 9),  # Dragon Boat Festival
	countries\china.py:333: (SEP, 20, SEP, 22),  # Mid-Autumn Festival
	countries\china.py:334: (OCT, 4, SEP, 29),  # National Day
	countries\china.py:335: (OCT, 7, OCT, 12),  # National Day
	countries\china.py:323: 2013: (
	countries\china.py:219: special_public_holidays = {
	countries\china.py:337: 2014: (
	countries\china.py:338: (FEB, 5, JAN, 26),  # Spring Festival
	countries\china.py:339: (FEB, 6, FEB, 8),  # Spring Festival
	countries\china.py:340: (MAY, 2, MAY, 4),  # Labor Day
	countries\china.py:341: (OCT, 6, SEP, 28),  # National Day
	countries\china.py:342: (OCT, 7, OCT, 11),  # National Day
	countries\china.py:337: 2014: (
	countries\china.py:219: special_public_holidays = {
	countries\china.py:344: 2015: (
	countries\china.py:345: (JAN, 2, JAN, 4),  # New Year's Day
	countries\china.py:346: (FEB, 18, FEB, 15),  # Spring Festival
	countries\china.py:347: (FEB, 24, FEB, 28),  # Spring Festival
	countries\china.py:348: (SEP, 3, victory_70_anniversary),
	countries\china.py:349: (SEP, 4, SEP, 6),  # 70th Anniversary of the Victory
	countries\china.py:350: (OCT, 7, OCT, 10),  # National Day
	countries\china.py:344: 2015: (
	countries\china.py:219: special_public_holidays = {
	countries\china.py:352: 2016: (
	countries\china.py:353: (FEB, 11, FEB, 6),  # Spring Festival
	countries\china.py:354: (FEB, 12, FEB, 14),  # Spring Festival
	countries\china.py:355: (JUN, 10, JUN, 12),  # Dragon Boat Festival
	countries\china.py:356: (SEP, 16, SEP, 18),  # Mid-Autumn Festival
	countries\china.py:357: (OCT, 6, OCT, 8),  # National Day
	countries\china.py:358: (OCT, 7, OCT, 9),  # National Day
	countries\china.py:352: 2016: (
	countries\china.py:219: special_public_holidays = {
	countries\china.py:360: 2017: (
	countries\china.py:361: (JAN, 27, JAN, 22),  # Spring Festival
	countries\china.py:362: (FEB, 2, FEB, 4),  # Spring Festival
	countries\china.py:363: (APR, 3, APR, 1),  # Tomb-Sweeping Day
	countries\china.py:364: (MAY, 29, MAY, 27),  # Dragon Boat Festival
	countries\china.py:365: (OCT, 6, SEP, 30),  # National Day
	countries\china.py:360: 2017: (
	countries\china.py:219: special_public_holidays = {
	countries\china.py:368: (FEB, 15, FEB, 11),  # Spring Festival
	countries\china.py:369: (FEB, 21, FEB, 24),  # Spring Festival
	countries\china.py:370: (APR, 6, APR, 8),  # Tomb-Sweeping Day
	countries\china.py:371: (APR, 30, APR, 28),  # Labor Day
	countries\china.py:372: (OCT, 4, SEP, 29),  # National Day
	countries\china.py:373: (OCT, 5, SEP, 30),  # National Day
	countries\china.py:374: (DEC, 31, DEC, 29),  # New Year's Day
	countries\china.py:367: 2018: (
	countries\china.py:377: (FEB, 4, FEB, 2),  # Spring Festival
	countries\china.py:378: (FEB, 8, FEB, 3),  # Spring Festival
	countries\china.py:379: (OCT, 4, SEP, 29),  # National Day
	countries\china.py:380: (OCT, 7, OCT, 12),  # National Day
	countries\china.py:376: 2019: (
	countries\china.py:383: (JAN, 24, JAN, 19),  # Spring Festival
	countries\china.py:384: (JAN, 30, FEB, 1),  # Spring Festival
	countries\china.py:385: (MAY, 4, APR, 26),  # Labor Day
	countries\china.py:386: (MAY, 5, MAY, 9),  # Labor Day
	countries\china.py:387: (JUN, 26, JUN, 28),  # Dragon Boat Festival
	countries\china.py:388: (OCT, 7, SEP, 27),  # National Day
	countries\china.py:389: (OCT, 8, OCT, 10),  # National Day
	countries\china.py:382: 2020: (
	countries\china.py:392: (FEB, 11, FEB, 7),  # Spring Festival
	countries\china.py:393: (FEB, 17, FEB, 20),  # Spring Festival
	countries\china.py:394: (MAY, 4, APR, 25),  # Labor Day
	countries\china.py:395: (MAY, 5, MAY, 8),  # Labor Day
	countries\china.py:396: (SEP, 20, SEP, 18),  # Mid-Autumn Festival
	countries\china.py:397: (OCT, 6, SEP, 26),  # National Day
	countries\china.py:398: (OCT, 7, OCT, 9),  # National Day
	countries\china.py:391: 2021: (
	countries\china.py:401: (JAN, 31, JAN, 29),  # Spring Festival
	countries\china.py:402: (FEB, 4, JAN, 30),  # Spring Festival
	countries\china.py:403: (APR, 4, APR, 2),  # Tomb-Sweeping Day
	countries\china.py:404: (MAY, 3, APR, 24),  # Labor Day
	countries\china.py:405: (MAY, 4, MAY, 7),  # Labor Day
	countries\china.py:406: (OCT, 6, OCT, 8),  # National Day
	countries\china.py:407: (OCT, 7, OCT, 9),  # National Day
	countries\china.py:400: 2022: (
	countries\china.py:410: (JAN, 26, JAN, 28),  # Spring Festival
	countries\china.py:411: (JAN, 27, JAN, 29),  # Spring Festival
	countries\china.py:412: (MAY, 2, APR, 23),  # Labor Day
	countries\china.py:413: (MAY, 3, MAY, 6),  # Labor Day
	countries\china.py:414: (JUN, 23, JUN, 25),  # Dragon Boat Festival
	countries\china.py:415: (OCT, 5, OCT, 7),  # National Day
	countries\china.py:416: (OCT, 6, OCT, 8),  # National Day
	countries\china.py:409: 2023: (
	countries\china.py:419: (FEB, 15, FEB, 4),  # Spring Festival
	countries\china.py:420: (FEB, 16, FEB, 18),  # Spring Festival
	countries\china.py:421: (APR, 5, APR, 7),  # Tomb-Sweeping Day
	countries\china.py:422: (MAY, 2, APR, 28),  # Labor Day
	countries\china.py:423: (MAY, 3, MAY, 11),  # Labor Day
	countries\china.py:424: (SEP, 16, SEP, 14),  # Mid-Autumn Festival
	countries\china.py:425: (OCT, 4, SEP, 29),  # National Day
	countries\china.py:426: (OCT, 7, OCT, 12),  # National Day
	countries\china.py:418: 2024: (
	countries\china.py:219: special_public_holidays = {
	countries\china.py:431: 2012: (JUN, 22, dragon_boat_festival),  # observed from Jun 23
	countries\china.py:432: 2015: (OCT, 6, mid_autumn_festival),  # observed from Sep 27
	countries\china.py:433: 2020: (OCT, 6, mid_autumn_festival),  # observed from Oct 1, overlap with National Day
	countries\china.py:430: special_public_holidays_observed = {
	countries\__init__.py:46: from .colombia import Colombia, CO, COL
(call) countries\colombia.py:0: <module>
	countries\colombia.py:12: from datetime import timedelta as td
	countries\colombia.py:13: from gettext import gettext as tr
	countries\colombia.py:15: from holidays.groups import ChristianHolidays, InternationalHolidays
	countries\colombia.py:16: from holidays.observed_holiday_base import ObservedHolidayBase, ALL_TO_NEXT_MON
	countries\colombia.py:19: class Colombia(ObservedHolidayBase, ChristianHolidays, InternationalHolidays):
(call) countries\colombia.py:19: Colombia
	countries\colombia.py:19: class Colombia(ObservedHolidayBase, ChristianHolidays, InternationalHolidays):
	countries\colombia.py:20: """
	countries\colombia.py:41: country = "CO"
	countries\colombia.py:42: default_language = "es"
	countries\colombia.py:44: observed_label = tr("%s (observado)")
	countries\colombia.py:45: supported_languages = ("en_US", "es", "uk")
	countries\colombia.py:47: def __init__(self, *args, **kwargs):
	countries\colombia.py:54: def _populate_public_holidays(self):
	countries\colombia.py:120: class CO(Colombia):
(call) countries\colombia.py:120: CO
	countries\colombia.py:120: class CO(Colombia):
	countries\colombia.py:121: pass
	countries\colombia.py:124: class COL(Colombia):
(call) countries\colombia.py:124: COL
	countries\colombia.py:124: class COL(Colombia):
	countries\colombia.py:125: pass
	countries\__init__.py:47: from .costa_rica import CostaRica, CR, CRI
(call) countries\costa_rica.py:0: <module>
	countries\costa_rica.py:12: from gettext import gettext as tr
	countries\costa_rica.py:14: from holidays.groups import ChristianHolidays, InternationalHolidays
	countries\costa_rica.py:15: from holidays.observed_holiday_base import (
	countries\costa_rica.py:23: class CostaRica(ObservedHolidayBase, ChristianHolidays, InternationalHolidays):
(call) countries\costa_rica.py:23: CostaRica
	countries\costa_rica.py:23: class CostaRica(ObservedHolidayBase, ChristianHolidays, InternationalHolidays):
	countries\costa_rica.py:24: """
	countries\costa_rica.py:35: country = "CR"
	countries\costa_rica.py:36: default_language = "es"
	countries\costa_rica.py:38: observed_label = tr("%s (observado)")
	countries\costa_rica.py:39: supported_languages = ("en_US", "es", "uk")
	countries\costa_rica.py:41: def __init__(self, *args, **kwargs):
	countries\costa_rica.py:47: def _populate_public_holidays(self):
	countries\costa_rica.py:117: class CR(CostaRica):
(call) countries\costa_rica.py:117: CR
	countries\costa_rica.py:117: class CR(CostaRica):
	countries\costa_rica.py:118: pass
	countries\costa_rica.py:121: class CRI(CostaRica):
(call) countries\costa_rica.py:121: CRI
	countries\costa_rica.py:121: class CRI(CostaRica):
	countries\costa_rica.py:122: pass
	countries\__init__.py:48: from .croatia import Croatia, HR, HRV
(call) countries\croatia.py:0: <module>
	countries\croatia.py:12: from gettext import gettext as tr
	countries\croatia.py:14: from holidays.groups import ChristianHolidays, InternationalHolidays
	countries\croatia.py:15: from holidays.holiday_base import HolidayBase
	countries\croatia.py:18: class Croatia(HolidayBase, ChristianHolidays, InternationalHolidays):
(call) countries\croatia.py:18: Croatia
	countries\croatia.py:18: class Croatia(HolidayBase, ChristianHolidays, InternationalHolidays):
	countries\croatia.py:19: """
	countries\croatia.py:26: country = "HR"
	countries\croatia.py:27: default_language = "hr"
	countries\croatia.py:28: supported_languages = ("en_US", "hr", "uk")
	countries\croatia.py:30: def __init__(self, *args, **kwargs):
	countries\croatia.py:35: def _populate_public_holidays(self):
	countries\croatia.py:98: class HR(Croatia):
(call) countries\croatia.py:98: HR
	countries\croatia.py:98: class HR(Croatia):
	countries\croatia.py:99: pass
	countries\croatia.py:102: class HRV(Croatia):
(call) countries\croatia.py:102: HRV
	countries\croatia.py:102: class HRV(Croatia):
	countries\croatia.py:103: pass
	countries\__init__.py:49: from .cuba import Cuba, CU, CUB
(call) countries\cuba.py:0: <module>
	countries\cuba.py:12: from gettext import gettext as tr
	countries\cuba.py:14: from holidays.groups import ChristianHolidays, InternationalHolidays
	countries\cuba.py:15: from holidays.observed_holiday_base import ObservedHolidayBase, SUN_TO_NEXT_MON
	countries\cuba.py:18: class Cuba(ObservedHolidayBase, ChristianHolidays, InternationalHolidays):
(call) countries\cuba.py:18: Cuba
	countries\cuba.py:18: class Cuba(ObservedHolidayBase, ChristianHolidays, InternationalHolidays):
	countries\cuba.py:19: """
	countries\cuba.py:33: country = "CU"
	countries\cuba.py:34: default_language = "es"
	countries\cuba.py:36: observed_label = tr("%s (observado)")
	countries\cuba.py:37: supported_languages = ("en_US", "es", "uk")
	countries\cuba.py:39: def __init__(self, *args, **kwargs):
	countries\cuba.py:45: def _populate_public_holidays(self):
	countries\cuba.py:101: class CU(Cuba):
(call) countries\cuba.py:101: CU
	countries\cuba.py:101: class CU(Cuba):
	countries\cuba.py:102: pass
	countries\cuba.py:105: class CUB(Cuba):
(call) countries\cuba.py:105: CUB
	countries\cuba.py:105: class CUB(Cuba):
	countries\cuba.py:106: pass
	countries\__init__.py:50: from .curacao import Curacao, CW, CUW
(call) countries\curacao.py:0: <module>
	countries\curacao.py:12: from datetime import date
	countries\curacao.py:13: from datetime import timedelta as td
	countries\curacao.py:14: from gettext import gettext as tr
	countries\curacao.py:16: from holidays.calendars.gregorian import APR, MAY
	countries\curacao.py:17: from holidays.groups import ChristianHolidays, InternationalHolidays
	countries\curacao.py:18: from holidays.holiday_base import HolidayBase
	countries\curacao.py:21: class Curacao(HolidayBase, ChristianHolidays, InternationalHolidays):
(call) countries\curacao.py:21: Curacao
	countries\curacao.py:21: class Curacao(HolidayBase, ChristianHolidays, InternationalHolidays):
	countries\curacao.py:22: """
	countries\curacao.py:30: country = "CW"
	countries\curacao.py:31: default_language = "pap"
	countries\curacao.py:32: supported_languages = ("en_US", "nl", "pap", "uk")
	countries\curacao.py:34: def __init__(self, *args, **kwargs):
	countries\curacao.py:39: def _populate_public_holidays(self):
	countries\curacao.py:140: class CW(Curacao):
(call) countries\curacao.py:140: CW
	countries\curacao.py:140: class CW(Curacao):
	countries\curacao.py:141: pass
	countries\curacao.py:144: class CUW(Curacao):
(call) countries\curacao.py:144: CUW
	countries\curacao.py:144: class CUW(Curacao):
	countries\curacao.py:145: pass
	countries\__init__.py:51: from .cyprus import Cyprus, CY, CYP
(call) countries\cyprus.py:0: <module>
	countries\cyprus.py:12: from datetime import timedelta as td
	countries\cyprus.py:13: from gettext import gettext as tr
	countries\cyprus.py:15: from holidays.calendars.julian_revised import JULIAN_REVISED_CALENDAR
	countries\cyprus.py:16: from holidays.constants import BANK, OPTIONAL, PUBLIC
	countries\cyprus.py:17: from holidays.groups import ChristianHolidays, InternationalHolidays
	countries\cyprus.py:18: from holidays.holiday_base import HolidayBase
	countries\cyprus.py:21: class Cyprus(HolidayBase, ChristianHolidays, InternationalHolidays):
(call) countries\cyprus.py:21: Cyprus
	countries\cyprus.py:21: class Cyprus(HolidayBase, ChristianHolidays, InternationalHolidays):
	countries\cyprus.py:22: """
	countries\cyprus.py:30: country = "CY"
	countries\cyprus.py:31: default_language = "el"
	countries\cyprus.py:32: supported_categories = (BANK, OPTIONAL, PUBLIC)
	countries\cyprus.py:33: supported_languages = ("el", "en_CY", "en_US", "uk")
	countries\cyprus.py:35: def __init__(self, *args, **kwargs):
	countries\cyprus.py:40: def _populate_public_holidays(self):
	countries\cyprus.py:90: def _populate_bank_holidays(self):
	countries\cyprus.py:97: def _populate_optional_holidays(self):
	countries\cyprus.py:108: class CY(Cyprus):
(call) countries\cyprus.py:108: CY
	countries\cyprus.py:108: class CY(Cyprus):
	countries\cyprus.py:109: pass
	countries\cyprus.py:112: class CYP(Cyprus):
(call) countries\cyprus.py:112: CYP
	countries\cyprus.py:112: class CYP(Cyprus):
	countries\cyprus.py:113: pass
	countries\__init__.py:52: from .czechia import Czechia, CZ, CZE
(call) countries\czechia.py:0: <module>
	countries\czechia.py:12: from gettext import gettext as tr
	countries\czechia.py:14: from holidays.groups import ChristianHolidays, InternationalHolidays
	countries\czechia.py:15: from holidays.holiday_base import HolidayBase
	countries\czechia.py:18: class Czechia(HolidayBase, ChristianHolidays, InternationalHolidays):
(call) countries\czechia.py:18: Czechia
	countries\czechia.py:18: class Czechia(HolidayBase, ChristianHolidays, InternationalHolidays):
	countries\czechia.py:19: """
	countries\czechia.py:23: country = "CZ"
	countries\czechia.py:24: default_language = "cs"
	countries\czechia.py:25: supported_languages = ("cs", "en_US", "sk", "uk")
	countries\czechia.py:27: def __init__(self, *args, **kwargs):
	countries\czechia.py:32: def _populate_public_holidays(self):
	countries\czechia.py:89: class CZ(Czechia):
(call) countries\czechia.py:89: CZ
	countries\czechia.py:89: class CZ(Czechia):
	countries\czechia.py:90: pass
	countries\czechia.py:93: class CZE(Czechia):
(call) countries\czechia.py:93: CZE
	countries\czechia.py:93: class CZE(Czechia):
	countries\czechia.py:94: pass
	countries\__init__.py:53: from .denmark import Denmark, DK, DNK
(call) countries\denmark.py:0: <module>
	countries\denmark.py:12: from datetime import timedelta as td
	countries\denmark.py:13: from gettext import gettext as tr
	countries\denmark.py:15: from holidays.constants import OPTIONAL, PUBLIC
	countries\denmark.py:16: from holidays.groups import ChristianHolidays, InternationalHolidays
	countries\denmark.py:17: from holidays.holiday_base import HolidayBase
	countries\denmark.py:20: class Denmark(HolidayBase, ChristianHolidays, InternationalHolidays):
(call) countries\denmark.py:20: Denmark
	countries\denmark.py:20: class Denmark(HolidayBase, ChristianHolidays, InternationalHolidays):
	countries\denmark.py:21: """
	countries\denmark.py:30: country = "DK"
	countries\denmark.py:31: default_language = "da"
	countries\denmark.py:32: supported_categories = (OPTIONAL, PUBLIC)
	countries\denmark.py:33: supported_languages = ("da", "en_US", "uk")
	countries\denmark.py:35: def __init__(self, *args, **kwargs):
	countries\denmark.py:40: def _populate_public_holidays(self):
	countries\denmark.py:76: def _populate_optional_holidays(self):
	countries\denmark.py:90: class DK(Denmark):
(call) countries\denmark.py:90: DK
	countries\denmark.py:90: class DK(Denmark):
	countries\denmark.py:91: pass
	countries\denmark.py:94: class DNK(Denmark):
(call) countries\denmark.py:94: DNK
	countries\denmark.py:94: class DNK(Denmark):
	countries\denmark.py:95: pass
	countries\__init__.py:54: from .djibouti import Djibouti, DJ, DJI
(call) countries\djibouti.py:0: <module>
	countries\djibouti.py:12: from gettext import gettext as tr
	countries\djibouti.py:14: from holidays.calendars.gregorian import FRI, SAT
	countries\djibouti.py:15: from holidays.groups import ChristianHolidays, IslamicHolidays, InternationalHolidays
	countries\djibouti.py:16: from holidays.holiday_base import HolidayBase
	countries\djibouti.py:19: class Djibouti(HolidayBase, ChristianHolidays, IslamicHolidays, InternationalHolidays):
(call) countries\djibouti.py:19: Djibouti
	countries\djibouti.py:19: class Djibouti(HolidayBase, ChristianHolidays, IslamicHolidays, InternationalHolidays):
	countries\djibouti.py:20: country = "DJ"
	countries\djibouti.py:21: default_language = "fr"
	countries\djibouti.py:23: estimated_label = tr("%s (estimé)")
	countries\djibouti.py:24: supported_languages = ("ar", "en_US", "fr")
	countries\djibouti.py:25: weekend = {FRI, SAT}
	countries\djibouti.py:27: def __init__(self, *args, **kwargs):
	countries\djibouti.py:33: def _populate_public_holidays(self):
	countries\djibouti.py:78: class DJ(Djibouti):
(call) countries\djibouti.py:78: DJ
	countries\djibouti.py:78: class DJ(Djibouti):
	countries\djibouti.py:79: pass
	countries\djibouti.py:82: class DJI(Djibouti):
(call) countries\djibouti.py:82: DJI
	countries\djibouti.py:82: class DJI(Djibouti):
	countries\djibouti.py:83: pass
	countries\__init__.py:55: from .dominican_republic import DominicanRepublic, DO, DOM
(call) countries\dominican_republic.py:0: <module>
	countries\dominican_republic.py:12: from datetime import date
	countries\dominican_republic.py:13: from gettext import gettext as tr
	countries\dominican_republic.py:15: from holidays.calendars.gregorian import JUN
	countries\dominican_republic.py:16: from holidays.groups import ChristianHolidays, InternationalHolidays
	countries\dominican_republic.py:17: from holidays.observed_holiday_base import (
	countries\dominican_republic.py:25: class DominicanRepublic(ObservedHolidayBase, ChristianHolidays, InternationalHolidays):
(call) countries\dominican_republic.py:25: DominicanRepublic
	countries\dominican_republic.py:25: class DominicanRepublic(ObservedHolidayBase, ChristianHolidays, InternationalHolidays):
	countries\dominican_republic.py:26: """
	countries\dominican_republic.py:31: country = "DO"
	countries\dominican_republic.py:32: default_language = "es"
	countries\dominican_republic.py:33: supported_languages = ("en_US", "es", "uk")
	countries\dominican_republic.py:35: def __init__(self, *args, **kwargs):
	countries\dominican_republic.py:41: def _is_observed(self, dt: date) -> bool:
	countries\dominican_republic.py:45: def _populate_public_holidays(self):
	countries\dominican_republic.py:91: class DO(DominicanRepublic):
(call) countries\dominican_republic.py:91: DO
	countries\dominican_republic.py:91: class DO(DominicanRepublic):
	countries\dominican_republic.py:92: pass
	countries\dominican_republic.py:95: class DOM(DominicanRepublic):
(call) countries\dominican_republic.py:95: DOM
	countries\dominican_republic.py:95: class DOM(DominicanRepublic):
	countries\dominican_republic.py:96: pass
	countries\__init__.py:56: from .ecuador import Ecuador, EC, ECU
(call) countries\ecuador.py:0: <module>
	countries\ecuador.py:12: from gettext import gettext as tr
	countries\ecuador.py:14: from holidays.groups import ChristianHolidays, InternationalHolidays
	countries\ecuador.py:15: from holidays.observed_holiday_base import (
	countries\ecuador.py:25: class Ecuador(ObservedHolidayBase, ChristianHolidays, InternationalHolidays):
(call) countries\ecuador.py:25: Ecuador
	countries\ecuador.py:25: class Ecuador(ObservedHolidayBase, ChristianHolidays, InternationalHolidays):
	countries\ecuador.py:26: """
	countries\ecuador.py:32: country = "EC"
	countries\ecuador.py:33: default_language = "es"
	countries\ecuador.py:35: observed_label = tr("%s (observado)")
	countries\ecuador.py:36: supported_languages = ("en_US", "es", "uk")
	countries\ecuador.py:38: def __init__(self, *args, **kwargs):
	countries\ecuador.py:57: def _populate_public_holidays(self):
	countries\ecuador.py:102: class EC(Ecuador):
(call) countries\ecuador.py:102: EC
	countries\ecuador.py:102: class EC(Ecuador):
	countries\ecuador.py:103: pass
	countries\ecuador.py:106: class ECU(Ecuador):
(call) countries\ecuador.py:106: ECU
	countries\ecuador.py:106: class ECU(Ecuador):
	countries\ecuador.py:107: pass
	countries\__init__.py:57: from .egypt import Egypt, EG, EGY
(call) countries\egypt.py:0: <module>
	countries\egypt.py:13: from gettext import gettext as tr
	countries\egypt.py:15: from holidays.calendars.julian import JULIAN_CALENDAR
	countries\egypt.py:16: from holidays.groups import ChristianHolidays, IslamicHolidays, InternationalHolidays
	countries\egypt.py:17: from holidays.holiday_base import HolidayBase
	countries\egypt.py:20: class Egypt(HolidayBase, ChristianHolidays, IslamicHolidays, InternationalHolidays):
(call) countries\egypt.py:20: Egypt
	countries\egypt.py:20: class Egypt(HolidayBase, ChristianHolidays, IslamicHolidays, InternationalHolidays):
	countries\egypt.py:34: country = "EG"
	countries\egypt.py:35: default_language = "ar"
	countries\egypt.py:37: estimated_label = tr("(تقدير) %s")
	countries\egypt.py:38: supported_languages = ("ar", "en_US")
	countries\egypt.py:40: def __init__(self, *args, **kwargs):
	countries\egypt.py:47: def _populate_public_holidays(self):
	countries\egypt.py:105: class EG(Egypt):
(call) countries\egypt.py:105: EG
	countries\egypt.py:105: class EG(Egypt):
	countries\egypt.py:106: pass
	countries\egypt.py:109: class EGY(Egypt):
(call) countries\egypt.py:109: EGY
	countries\egypt.py:109: class EGY(Egypt):
	countries\egypt.py:110: pass
	countries\__init__.py:58: from .el_salvador import ElSalvador, SV, SLV
(call) countries\el_salvador.py:0: <module>
	countries\el_salvador.py:12: from holidays.groups import ChristianHolidays, InternationalHolidays
	countries\el_salvador.py:13: from holidays.holiday_base import HolidayBase
	countries\el_salvador.py:16: class ElSalvador(HolidayBase, ChristianHolidays, InternationalHolidays):
(call) countries\el_salvador.py:16: ElSalvador
	countries\el_salvador.py:16: class ElSalvador(HolidayBase, ChristianHolidays, InternationalHolidays):
	countries\el_salvador.py:17: """
	countries\el_salvador.py:24: country = "SV"
	countries\el_salvador.py:25: subdivisions = (
	countries\el_salvador.py:42: def __init__(self, *args, **kwargs):
	countries\el_salvador.py:47: def _populate_public_holidays(self):
	countries\el_salvador.py:85: def _populate_subdiv_ss_public_holidays(self):
	countries\el_salvador.py:93: class SV(ElSalvador):
(call) countries\el_salvador.py:93: SV
	countries\el_salvador.py:93: class SV(ElSalvador):
	countries\el_salvador.py:94: pass
	countries\el_salvador.py:97: class SLV(ElSalvador):
(call) countries\el_salvador.py:97: SLV
	countries\el_salvador.py:97: class SLV(ElSalvador):
	countries\el_salvador.py:98: pass
	countries\__init__.py:59: from .estonia import Estonia, EE, EST
(call) countries\estonia.py:0: <module>
	countries\estonia.py:12: from gettext import gettext as tr
	countries\estonia.py:14: from holidays.groups import ChristianHolidays, InternationalHolidays
	countries\estonia.py:15: from holidays.holiday_base import HolidayBase
	countries\estonia.py:18: class Estonia(HolidayBase, ChristianHolidays, InternationalHolidays):
(call) countries\estonia.py:18: Estonia
	countries\estonia.py:18: class Estonia(HolidayBase, ChristianHolidays, InternationalHolidays):
	countries\estonia.py:19: country = "EE"
	countries\estonia.py:20: default_language = "et"
	countries\estonia.py:21: supported_languages = ("en_US", "et", "uk")
	countries\estonia.py:23: def __init__(self, *args, **kwargs):
	countries\estonia.py:28: def _populate_public_holidays(self):
	countries\estonia.py:68: class EE(Estonia):
(call) countries\estonia.py:68: EE
	countries\estonia.py:68: class EE(Estonia):
	countries\estonia.py:69: pass
	countries\estonia.py:72: class EST(Estonia):
(call) countries\estonia.py:72: EST
	countries\estonia.py:72: class EST(Estonia):
	countries\estonia.py:73: pass
	countries\__init__.py:60: from .eswatini import Eswatini, SZ, SZW, Swaziland
(call) countries\eswatini.py:0: <module>
	countries\eswatini.py:12: import warnings
	countries\eswatini.py:14: from holidays.calendars.gregorian import JAN, DEC
	countries\eswatini.py:15: from holidays.groups import ChristianHolidays, InternationalHolidays, StaticHolidays
	countries\eswatini.py:16: from holidays.observed_holiday_base import ObservedHolidayBase, SUN_TO_NEXT_MON, SUN_TO_NEXT_TUE
	countries\eswatini.py:19: class Eswatini(ObservedHolidayBase, ChristianHolidays, InternationalHolidays, StaticHolidays):
(call) countries\eswatini.py:19: Eswatini
	countries\eswatini.py:19: class Eswatini(ObservedHolidayBase, ChristianHolidays, InternationalHolidays, StaticHolidays):
	countries\eswatini.py:20: """
	countries\eswatini.py:25: country = "SZ"
	countries\eswatini.py:26: observed_label = "%s (observed)"
	countries\eswatini.py:28: def __init__(self, *args, **kwargs):
	countries\eswatini.py:36: def _populate_public_holidays(self):
	countries\eswatini.py:73: class Swaziland(Eswatini):
(call) countries\eswatini.py:73: Swaziland
	countries\eswatini.py:73: class Swaziland(Eswatini):
	countries\eswatini.py:74: def __init__(self, *args, **kwargs) -> None:
	countries\eswatini.py:80: class SZ(Eswatini):
(call) countries\eswatini.py:80: SZ
	countries\eswatini.py:80: class SZ(Eswatini):
	countries\eswatini.py:81: pass
	countries\eswatini.py:84: class SZW(Eswatini):
(call) countries\eswatini.py:84: SZW
	countries\eswatini.py:84: class SZW(Eswatini):
	countries\eswatini.py:85: pass
	countries\eswatini.py:88: class EswatiniStaticHolidays:
(call) countries\eswatini.py:88: EswatiniStaticHolidays
	countries\eswatini.py:88: class EswatiniStaticHolidays:
	countries\eswatini.py:91: 1999: (DEC, 31, "Y2K changeover"),
	countries\eswatini.py:92: 2000: (JAN, 3, "Y2K changeover"),
	countries\eswatini.py:89: special_public_holidays = {
	countries\__init__.py:61: from .ethiopia import Ethiopia, ET, ETH
(call) countries\ethiopia.py:0: <module>
	countries\ethiopia.py:12: from calendar import isleap
	countries\ethiopia.py:13: from gettext import gettext as tr
	countries\ethiopia.py:15: from holidays.calendars.gregorian import SEP
	countries\ethiopia.py:16: from holidays.calendars.julian import JULIAN_CALENDAR
	countries\ethiopia.py:17: from holidays.groups import ChristianHolidays, InternationalHolidays, IslamicHolidays
	countries\ethiopia.py:18: from holidays.holiday_base import HolidayBase
	countries\ethiopia.py:21: class Ethiopia(HolidayBase, ChristianHolidays, InternationalHolidays, IslamicHolidays):
(call) countries\ethiopia.py:21: Ethiopia
	countries\ethiopia.py:21: class Ethiopia(HolidayBase, ChristianHolidays, InternationalHolidays, IslamicHolidays):
	countries\ethiopia.py:22: country = "ET"
	countries\ethiopia.py:23: default_language = "am"
	countries\ethiopia.py:24: estimated_label = tr("%s (ግምት)")
	countries\ethiopia.py:25: supported_languages = ("am", "ar", "en_US")
	countries\ethiopia.py:27: def _is_leap_year(self):
	countries\ethiopia.py:39: def __init__(self, *args, **kwargs):
	countries\ethiopia.py:45: def _populate_public_holidays(self):
	countries\ethiopia.py:105: class ET(Ethiopia):
(call) countries\ethiopia.py:105: ET
	countries\ethiopia.py:105: class ET(Ethiopia):
	countries\ethiopia.py:106: pass
	countries\ethiopia.py:109: class ETH(Ethiopia):
(call) countries\ethiopia.py:109: ETH
	countries\ethiopia.py:109: class ETH(Ethiopia):
	countries\ethiopia.py:110: pass
	countries\__init__.py:62: from .finland import Finland, FI, FIN
(call) countries\finland.py:0: <module>
	countries\finland.py:12: from datetime import timedelta as td
	countries\finland.py:13: from gettext import gettext as tr
	countries\finland.py:15: from holidays.groups import ChristianHolidays, InternationalHolidays
	countries\finland.py:16: from holidays.holiday_base import HolidayBase
	countries\finland.py:19: class Finland(HolidayBase, ChristianHolidays, InternationalHolidays):
(call) countries\finland.py:19: Finland
	countries\finland.py:19: class Finland(HolidayBase, ChristianHolidays, InternationalHolidays):
	countries\finland.py:20: """
	countries\finland.py:24: country = "FI"
	countries\finland.py:25: default_language = "fi"
	countries\finland.py:26: supported_languages = ("en_US", "fi", "sv", "uk")
	countries\finland.py:28: def __init__(self, *args, **kwargs):
	countries\finland.py:33: def _populate_public_holidays(self):
	countries\finland.py:96: class FI(Finland):
(call) countries\finland.py:96: FI
	countries\finland.py:96: class FI(Finland):
	countries\finland.py:97: pass
	countries\finland.py:100: class FIN(Finland):
(call) countries\finland.py:100: FIN
	countries\finland.py:100: class FIN(Finland):
	countries\finland.py:101: pass
	countries\__init__.py:63: from .france import France, FR, FRA
(call) countries\france.py:0: <module>
	countries\france.py:12: from datetime import timedelta as td
	countries\france.py:13: from gettext import gettext as tr
	countries\france.py:15: from holidays.groups import ChristianHolidays, InternationalHolidays
	countries\france.py:16: from holidays.holiday_base import HolidayBase
	countries\france.py:19: class France(HolidayBase, ChristianHolidays, InternationalHolidays):
(call) countries\france.py:19: France
	countries\france.py:19: class France(HolidayBase, ChristianHolidays, InternationalHolidays):
	countries\france.py:20: """Official French holidays.
	countries\france.py:34: country = "FR"
	countries\france.py:35: default_language = "fr"
	countries\france.py:36: supported_languages = ("en_US", "fr", "uk")
	countries\france.py:37: subdivisions = (
	countries\france.py:51: _deprecated_subdivisions = (
	countries\france.py:66: def __init__(self, *args, **kwargs):
	countries\france.py:71: def _populate_public_holidays(self):
	countries\france.py:142: def _populate_subdiv_bl_public_holidays(self):
	countries\france.py:147: def _populate_subdiv_ges_public_holidays(self):
	countries\france.py:155: def _populate_subdiv_gp_public_holidays(self):
	countries\france.py:169: def _populate_subdiv_gy_public_holidays(self):
	countries\france.py:174: def _populate_subdiv_mf_public_holidays(self):
	countries\france.py:180: def _populate_subdiv_mq_public_holidays(self):
	countries\france.py:191: def _populate_subdiv_nc_public_holidays(self):
	countries\france.py:196: def _populate_subdiv_pf_public_holidays(self):
	countries\france.py:207: def _populate_subdiv_re_public_holidays(self):
	countries\france.py:213: def _populate_subdiv_wf_public_holidays(self):
	countries\france.py:221: def _populate_subdiv_yt_public_holidays(self):
	countries\france.py:226: class FR(France):
(call) countries\france.py:226: FR
	countries\france.py:226: class FR(France):
	countries\france.py:227: """FR is also used by dateutil (Friday), so be careful with this one."""
	countries\france.py:229: pass
	countries\france.py:232: class FRA(France):
(call) countries\france.py:232: FRA
	countries\france.py:232: class FRA(France):
	countries\france.py:233: pass
	countries\__init__.py:64: from .gabon import Gabon, GA, GAB
(call) countries\gabon.py:0: <module>
	countries\gabon.py:12: from holidays.calendars import _CustomIslamicHolidays
	countries\gabon.py:13: from holidays.calendars.gregorian import JAN, FEB, MAR, APR, MAY, JUN, JUL, AUG, SEP, OCT, NOV, DEC
	countries\gabon.py:14: from holidays.groups import ChristianHolidays, InternationalHolidays, IslamicHolidays
	countries\gabon.py:15: from holidays.holiday_base import HolidayBase
	countries\gabon.py:18: class Gabon(HolidayBase, ChristianHolidays, InternationalHolidays, IslamicHolidays):
(call) countries\gabon.py:18: Gabon
	countries\gabon.py:18: class Gabon(HolidayBase, ChristianHolidays, InternationalHolidays, IslamicHolidays):
	countries\gabon.py:19: """
	countries\gabon.py:27: country = "GA"
	countries\gabon.py:29: def __init__(self, *args, **kwargs) -> None:
	countries\gabon.py:35: def _populate_public_holidays(self):
	countries\gabon.py:79: class GA(Gabon):
(call) countries\gabon.py:79: GA
	countries\gabon.py:79: class GA(Gabon):
	countries\gabon.py:80: pass
	countries\gabon.py:83: class GAB(Gabon):
(call) countries\gabon.py:83: GAB
	countries\gabon.py:83: class GAB(Gabon):
	countries\gabon.py:84: pass
	countries\gabon.py:87: class GabonIslamicHolidays(_CustomIslamicHolidays):
(call) countries\gabon.py:87: GabonIslamicHolidays
	countries\gabon.py:87: class GabonIslamicHolidays(_CustomIslamicHolidays):
	countries\gabon.py:88: EID_AL_ADHA_DATES = {
	countries\gabon.py:89: 2001: (MAR, 6),
	countries\gabon.py:88: EID_AL_ADHA_DATES = {
	countries\gabon.py:90: 2002: (FEB, 23),
	countries\gabon.py:88: EID_AL_ADHA_DATES = {
	countries\gabon.py:91: 2003: (FEB, 12),
	countries\gabon.py:88: EID_AL_ADHA_DATES = {
	countries\gabon.py:92: 2004: (FEB, 2),
	countries\gabon.py:88: EID_AL_ADHA_DATES = {
	countries\gabon.py:93: 2005: (JAN, 21),
	countries\gabon.py:88: EID_AL_ADHA_DATES = {
	countries\gabon.py:94: 2006: ((JAN, 10), (DEC, 31)),
	countries\gabon.py:88: EID_AL_ADHA_DATES = {
	countries\gabon.py:95: 2007: (DEC, 20),
	countries\gabon.py:88: EID_AL_ADHA_DATES = {
	countries\gabon.py:96: 2008: (DEC, 9),
	countries\gabon.py:88: EID_AL_ADHA_DATES = {
	countries\gabon.py:97: 2009: (NOV, 28),
	countries\gabon.py:88: EID_AL_ADHA_DATES = {
	countries\gabon.py:98: 2010: (NOV, 17),
	countries\gabon.py:88: EID_AL_ADHA_DATES = {
	countries\gabon.py:99: 2011: (NOV, 7),
	countries\gabon.py:88: EID_AL_ADHA_DATES = {
	countries\gabon.py:100: 2012: (OCT, 26),
	countries\gabon.py:88: EID_AL_ADHA_DATES = {
	countries\gabon.py:101: 2013: (OCT, 15),
	countries\gabon.py:88: EID_AL_ADHA_DATES = {
	countries\gabon.py:102: 2014: (OCT, 5),
	countries\gabon.py:88: EID_AL_ADHA_DATES = {
	countries\gabon.py:103: 2015: (SEP, 24),
	countries\gabon.py:88: EID_AL_ADHA_DATES = {
	countries\gabon.py:104: 2016: (SEP, 13),
	countries\gabon.py:88: EID_AL_ADHA_DATES = {
	countries\gabon.py:105: 2017: (SEP, 2),
	countries\gabon.py:88: EID_AL_ADHA_DATES = {
	countries\gabon.py:106: 2018: (AUG, 22),
	countries\gabon.py:107: 2019: (AUG, 11),
	countries\gabon.py:108: 2020: (JUL, 31),
	countries\gabon.py:109: 2021: (JUL, 20),
	countries\gabon.py:110: 2022: (JUL, 9),
	countries\gabon.py:111: 2023: (JUN, 28),
	countries\gabon.py:88: EID_AL_ADHA_DATES = {
	countries\gabon.py:114: EID_AL_FITR_DATES = {
	countries\gabon.py:115: 2001: (DEC, 17),
	countries\gabon.py:114: EID_AL_FITR_DATES = {
	countries\gabon.py:116: 2002: (DEC, 6),
	countries\gabon.py:114: EID_AL_FITR_DATES = {
	countries\gabon.py:117: 2003: (NOV, 26),
	countries\gabon.py:114: EID_AL_FITR_DATES = {
	countries\gabon.py:118: 2004: (NOV, 14),
	countries\gabon.py:114: EID_AL_FITR_DATES = {
	countries\gabon.py:119: 2005: (NOV, 4),
	countries\gabon.py:114: EID_AL_FITR_DATES = {
	countries\gabon.py:120: 2006: (OCT, 24),
	countries\gabon.py:114: EID_AL_FITR_DATES = {
	countries\gabon.py:121: 2007: (OCT, 13),
	countries\gabon.py:114: EID_AL_FITR_DATES = {
	countries\gabon.py:122: 2008: (OCT, 2),
	countries\gabon.py:114: EID_AL_FITR_DATES = {
	countries\gabon.py:123: 2009: (SEP, 21),
	countries\gabon.py:114: EID_AL_FITR_DATES = {
	countries\gabon.py:124: 2010: (SEP, 10),
	countries\gabon.py:114: EID_AL_FITR_DATES = {
	countries\gabon.py:125: 2011: (AUG, 31),
	countries\gabon.py:114: EID_AL_FITR_DATES = {
	countries\gabon.py:126: 2012: (AUG, 19),
	countries\gabon.py:114: EID_AL_FITR_DATES = {
	countries\gabon.py:127: 2013: (AUG, 8),
	countries\gabon.py:114: EID_AL_FITR_DATES = {
	countries\gabon.py:128: 2014: (JUL, 29),
	countries\gabon.py:114: EID_AL_FITR_DATES = {
	countries\gabon.py:129: 2015: (JUL, 18),
	countries\gabon.py:114: EID_AL_FITR_DATES = {
	countries\gabon.py:130: 2016: (JUL, 7),
	countries\gabon.py:114: EID_AL_FITR_DATES = {
	countries\gabon.py:131: 2017: (JUN, 26),
	countries\gabon.py:114: EID_AL_FITR_DATES = {
	countries\gabon.py:132: 2018: (JUN, 15),
	countries\gabon.py:133: 2019: (JUN, 4),
	countries\gabon.py:134: 2020: (MAY, 24),
	countries\gabon.py:135: 2021: (MAY, 13),
	countries\gabon.py:136: 2022: (MAY, 2),
	countries\gabon.py:137: 2023: (APR, 21),
	countries\gabon.py:114: EID_AL_FITR_DATES = {
(call) calendars\custom.py:24: __new__
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
(call) calendars\custom.py:25: <genexpr>
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:26: namespace[f"{attr}_{_CustomCalendar.CUSTOM_ATTR_POSTFIX}"] = namespace[attr]
	calendars\custom.py:27: del namespace[attr]
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
(call) calendars\custom.py:25: <genexpr>
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:26: namespace[f"{attr}_{_CustomCalendar.CUSTOM_ATTR_POSTFIX}"] = namespace[attr]
	calendars\custom.py:27: del namespace[attr]
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
(call) calendars\custom.py:25: <genexpr>
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:29: return super().__new__(cls, name, bases, namespace)
	countries\__init__.py:65: from .georgia import Georgia, GE, GEO
(call) countries\georgia.py:0: <module>
	countries\georgia.py:12: from gettext import gettext as tr
	countries\georgia.py:14: from holidays.calendars.julian import JULIAN_CALENDAR
	countries\georgia.py:15: from holidays.groups import ChristianHolidays, InternationalHolidays
	countries\georgia.py:16: from holidays.holiday_base import HolidayBase
	countries\georgia.py:19: class Georgia(HolidayBase, ChristianHolidays, InternationalHolidays):
(call) countries\georgia.py:19: Georgia
	countries\georgia.py:19: class Georgia(HolidayBase, ChristianHolidays, InternationalHolidays):
	countries\georgia.py:20: """
	countries\georgia.py:28: country = "GE"
	countries\georgia.py:29: default_language = "ka"
	countries\georgia.py:30: supported_languages = ("en_US", "ka", "uk")
	countries\georgia.py:32: def __init__(self, *args, **kwargs):
	countries\georgia.py:37: def _populate_public_holidays(self):
	countries\georgia.py:92: class GE(Georgia):
(call) countries\georgia.py:92: GE
	countries\georgia.py:92: class GE(Georgia):
	countries\georgia.py:93: pass
	countries\georgia.py:96: class GEO(Georgia):
(call) countries\georgia.py:96: GEO
	countries\georgia.py:96: class GEO(Georgia):
	countries\georgia.py:97: pass
	countries\__init__.py:66: from .germany import Germany, DE, DEU
(call) countries\germany.py:0: <module>
	countries\germany.py:12: from gettext import gettext as tr
	countries\germany.py:14: from holidays.calendars.gregorian import MAY, OCT
	countries\germany.py:15: from holidays.groups import ChristianHolidays, InternationalHolidays, StaticHolidays
	countries\germany.py:16: from holidays.holiday_base import HolidayBase
	countries\germany.py:19: class Germany(HolidayBase, ChristianHolidays, InternationalHolidays, StaticHolidays):
(call) countries\germany.py:19: Germany
	countries\germany.py:19: class Germany(HolidayBase, ChristianHolidays, InternationalHolidays, StaticHolidays):
	countries\germany.py:20: """Official holidays for Germany in its current form.
	countries\germany.py:54: country = "DE"
	countries\germany.py:55: default_language = "de"
	countries\germany.py:56: supported_languages = ("de", "en_US", "uk")
	countries\germany.py:57: subdivisions = (
	countries\germany.py:77: def __init__(self, *args, **kwargs) -> None:
	countries\germany.py:83: def _populate_public_holidays(self):
	countries\germany.py:119: def _populate_subdiv_bb_public_holidays(self):
	countries\germany.py:133: def _populate_subdiv_be_public_holidays(self):
	countries\germany.py:141: def _populate_subdiv_bw_public_holidays(self):
	countries\germany.py:155: def _populate_subdiv_by_public_holidays(self):
	countries\germany.py:168: def _populate_subdiv_byp_public_holidays(self):
	countries\germany.py:178: def _populate_subdiv_hb_public_holidays(self):
	countries\germany.py:185: def _populate_subdiv_he_public_holidays(self):
	countries\germany.py:192: def _populate_subdiv_hh_public_holidays(self):
	countries\germany.py:199: def _populate_subdiv_mv_public_holidays(self):
	countries\germany.py:208: def _populate_subdiv_ni_public_holidays(self):
	countries\germany.py:215: def _populate_subdiv_nw_public_holidays(self):
	countries\germany.py:224: def _populate_subdiv_rp_public_holidays(self):
	countries\germany.py:233: def _populate_subdiv_sh_public_holidays(self):
	countries\germany.py:240: def _populate_subdiv_sl_public_holidays(self):
	countries\germany.py:250: def _populate_subdiv_sn_public_holidays(self):
	countries\germany.py:260: def _populate_subdiv_st_public_holidays(self):
	countries\germany.py:269: def _populate_subdiv_th_public_holidays(self):
	countries\germany.py:280: class DE(Germany):
(call) countries\germany.py:280: DE
	countries\germany.py:280: class DE(Germany):
	countries\germany.py:281: pass
	countries\germany.py:284: class DEU(Germany):
(call) countries\germany.py:284: DEU
	countries\germany.py:284: class DEU(Germany):
	countries\germany.py:285: pass
	countries\germany.py:288: class GermanyStaticHolidays:
(call) countries\germany.py:288: GermanyStaticHolidays
	countries\germany.py:288: class GermanyStaticHolidays:
	countries\germany.py:290: 2017: (OCT, 31, tr("Reformationstag")),
	countries\germany.py:289: special_public_holidays = {
	countries\germany.py:294: 2020: (
	countries\germany.py:295: MAY,
	countries\germany.py:296: 8,
	countries\germany.py:299: tr(
	countries\germany.py:300: "75. Jahrestag der Befreiung vom Nationalsozialismus "
	countries\germany.py:299: tr(
	countries\germany.py:294: 2020: (
	countries\germany.py:293: special_be_public_holidays = {
	countries\__init__.py:67: from .greece import Greece, GR, GRC
(call) countries\greece.py:0: <module>
	countries\greece.py:12: from gettext import gettext as tr
	countries\greece.py:14: from holidays.calendars.julian_revised import JULIAN_REVISED_CALENDAR
	countries\greece.py:15: from holidays.constants import HALF_DAY, PUBLIC
	countries\greece.py:16: from holidays.groups import ChristianHolidays, InternationalHolidays
	countries\greece.py:17: from holidays.observed_holiday_base import ObservedHolidayBase, SAT_SUN_TO_NEXT_WORKDAY
	countries\greece.py:20: class Greece(ObservedHolidayBase, ChristianHolidays, InternationalHolidays):
(call) countries\greece.py:20: Greece
	countries\greece.py:20: class Greece(ObservedHolidayBase, ChristianHolidays, InternationalHolidays):
	countries\greece.py:21: """
	countries\greece.py:28: country = "GR"
	countries\greece.py:29: default_language = "el"
	countries\greece.py:31: observed_label = tr("%s (παρατηρήθηκε)")
	countries\greece.py:32: supported_categories = (HALF_DAY, PUBLIC)
	countries\greece.py:33: supported_languages = ("el", "en_US", "uk")
	countries\greece.py:35: def __init__(self, *args, **kwargs):
	countries\greece.py:41: def _populate_public_holidays(self):
	countries\greece.py:78: def _populate_half_day_holidays(self):
	countries\greece.py:86: class GR(Greece):
(call) countries\greece.py:86: GR
	countries\greece.py:86: class GR(Greece):
	countries\greece.py:87: pass
	countries\greece.py:90: class GRC(Greece):
(call) countries\greece.py:90: GRC
	countries\greece.py:90: class GRC(Greece):
	countries\greece.py:91: pass
	countries\__init__.py:68: from .guam import Guam, GU, GUM, HolidaysGU
(call) countries\guam.py:0: <module>
	countries\guam.py:12: from holidays.countries.united_states import US
	countries\guam.py:15: class HolidaysGU(US):
(call) countries\guam.py:15: HolidaysGU
	countries\guam.py:15: class HolidaysGU(US):
	countries\guam.py:20: country = "GU"
	countries\guam.py:21: subdivisions = ()  # Override US subdivisions.
	countries\guam.py:23: def _populate_public_holidays(self) -> None:
	countries\guam.py:28: class GU(HolidaysGU):
(call) countries\guam.py:28: GU
	countries\guam.py:28: class GU(HolidaysGU):
	countries\guam.py:29: pass
	countries\guam.py:32: class GUM(HolidaysGU):
(call) countries\guam.py:32: GUM
	countries\guam.py:32: class GUM(HolidaysGU):
	countries\guam.py:33: pass
	countries\guam.py:36: class Guam(HolidaysGU):
(call) countries\guam.py:36: Guam
	countries\guam.py:36: class Guam(HolidaysGU):
	countries\guam.py:37: pass
	countries\__init__.py:69: from .guatemala import Guatemala, GT, GUA
(call) countries\guatemala.py:0: <module>
	countries\guatemala.py:12: from datetime import date
	countries\guatemala.py:13: from gettext import gettext as tr
	countries\guatemala.py:15: from holidays.calendars.gregorian import OCT
	countries\guatemala.py:16: from holidays.groups import ChristianHolidays, InternationalHolidays
	countries\guatemala.py:17: from holidays.observed_holiday_base import ObservedHolidayBase, ALL_TO_NEAREST_MON_LATAM
	countries\guatemala.py:20: class Guatemala(ObservedHolidayBase, ChristianHolidays, InternationalHolidays):
(call) countries\guatemala.py:20: Guatemala
	countries\guatemala.py:20: class Guatemala(ObservedHolidayBase, ChristianHolidays, InternationalHolidays):
	countries\guatemala.py:21: """
	countries\guatemala.py:34: country = "GT"
	countries\guatemala.py:35: default_language = "es"
	countries\guatemala.py:36: supported_languages = ("en_US", "es")
	countries\guatemala.py:38: def __init__(self, *args, **kwargs):
	countries\guatemala.py:44: def _is_observed(self, dt: date) -> bool:
	countries\guatemala.py:47: def _populate_public_holidays(self):
	countries\guatemala.py:86: class GT(Guatemala):
(call) countries\guatemala.py:86: GT
	countries\guatemala.py:86: class GT(Guatemala):
	countries\guatemala.py:87: pass
	countries\guatemala.py:90: class GUA(Guatemala):
(call) countries\guatemala.py:90: GUA
	countries\guatemala.py:90: class GUA(Guatemala):
	countries\guatemala.py:91: pass
	countries\__init__.py:70: from .honduras import Honduras, HN, HND
(call) countries\honduras.py:0: <module>
	countries\honduras.py:12: from datetime import timedelta as td
	countries\honduras.py:13: from gettext import gettext as tr
	countries\honduras.py:15: from holidays.groups import ChristianHolidays, InternationalHolidays
	countries\honduras.py:16: from holidays.holiday_base import HolidayBase
	countries\honduras.py:19: class Honduras(HolidayBase, ChristianHolidays, InternationalHolidays):
(call) countries\honduras.py:19: Honduras
	countries\honduras.py:19: class Honduras(HolidayBase, ChristianHolidays, InternationalHolidays):
	countries\honduras.py:23: country = "HN"
	countries\honduras.py:24: default_language = "es"
	countries\honduras.py:25: supported_languages = ("en_US", "es", "uk")
	countries\honduras.py:27: def __init__(self, *args, **kwargs):
	countries\honduras.py:32: def _populate_public_holidays(self):
	countries\honduras.py:76: class HN(Honduras):
(call) countries\honduras.py:76: HN
	countries\honduras.py:76: class HN(Honduras):
	countries\honduras.py:77: pass
	countries\honduras.py:80: class HND(Honduras):
(call) countries\honduras.py:80: HND
	countries\honduras.py:80: class HND(Honduras):
	countries\honduras.py:81: pass
	countries\__init__.py:71: from .hongkong import HongKong, HK, HKG
(call) countries\hongkong.py:0: <module>
	countries\hongkong.py:12: from datetime import date
	countries\hongkong.py:13: from datetime import timedelta as td
	countries\hongkong.py:14: from typing import Optional
	countries\hongkong.py:16: from holidays.calendars.gregorian import JUL, AUG, SEP, MON, SUN, _get_nth_weekday_of_month
	countries\hongkong.py:17: from holidays.groups import (
	countries\hongkong.py:23: from holidays.observed_holiday_base import (
	countries\hongkong.py:32: class HongKong(
	countries\hongkong.py:33: ObservedHolidayBase,
	countries\hongkong.py:34: ChineseCalendarHolidays,
	countries\hongkong.py:35: ChristianHolidays,
	countries\hongkong.py:36: InternationalHolidays,
	countries\hongkong.py:37: StaticHolidays,
	countries\hongkong.py:32: class HongKong(
(call) countries\hongkong.py:32: HongKong
	countries\hongkong.py:32: class HongKong(
	countries\hongkong.py:39: """
	countries\hongkong.py:45: country = "HK"
	countries\hongkong.py:46: observed_label = "The day following %s"
	countries\hongkong.py:48: def __init__(self, *args, **kwargs):
	countries\hongkong.py:56: def _add_holiday(self, name: str, *args) -> Optional[date]:
	countries\hongkong.py:67: def _populate_public_holidays(self):
	countries\hongkong.py:209: class HK(HongKong):
(call) countries\hongkong.py:209: HK
	countries\hongkong.py:209: class HK(HongKong):
	countries\hongkong.py:210: pass
	countries\hongkong.py:213: class HKG(HongKong):
(call) countries\hongkong.py:213: HKG
	countries\hongkong.py:213: class HKG(HongKong):
	countries\hongkong.py:214: pass
	countries\hongkong.py:217: class HongKongStaticHolidays:
(call) countries\hongkong.py:217: HongKongStaticHolidays
	countries\hongkong.py:217: class HongKongStaticHolidays:
	countries\hongkong.py:219: 1997: (JUL, 2, "Hong Kong Special Administrative Region Establishment Day"),
	countries\hongkong.py:222: SEP,
	countries\hongkong.py:223: 3,
	countries\hongkong.py:224: "The 70th anniversary day of the victory of the Chinese "
	countries\hongkong.py:221: (
	countries\hongkong.py:218: special_public_holidays = {
	countries\__init__.py:72: from .hungary import Hungary, HU, HUN
(call) countries\hungary.py:0: <module>
	countries\hungary.py:12: from gettext import gettext as tr
	countries\hungary.py:14: from holidays.calendars.gregorian import JAN, MAR, APR, MAY, AUG, OCT, NOV, DEC
	countries\hungary.py:15: from holidays.groups import ChristianHolidays, InternationalHolidays, StaticHolidays
	countries\hungary.py:16: from holidays.holiday_base import HolidayBase
	countries\hungary.py:19: class Hungary(HolidayBase, ChristianHolidays, InternationalHolidays, StaticHolidays):
(call) countries\hungary.py:19: Hungary
	countries\hungary.py:19: class Hungary(HolidayBase, ChristianHolidays, InternationalHolidays, StaticHolidays):
	countries\hungary.py:20: """
	countries\hungary.py:43: country = "HU"
	countries\hungary.py:44: default_language = "hu"
	countries\hungary.py:45: supported_languages = ("en_US", "hu", "uk")
	countries\hungary.py:47: def __init__(self, *args, **kwargs):
	countries\hungary.py:53: def _populate_public_holidays(self):
	countries\hungary.py:123: class HU(Hungary):
(call) countries\hungary.py:123: HU
	countries\hungary.py:123: class HU(Hungary):
	countries\hungary.py:124: pass
	countries\hungary.py:127: class HUN(Hungary):
(call) countries\hungary.py:127: HUN
	countries\hungary.py:127: class HUN(Hungary):
	countries\hungary.py:128: pass
	countries\hungary.py:131: class HungaryStaticHolidays:
(call) countries\hungary.py:131: HungaryStaticHolidays
	countries\hungary.py:131: class HungaryStaticHolidays:
	countries\hungary.py:133: substituted_date_format = tr("%Y. %m. %d.")
	countries\hungary.py:135: substituted_label = tr("Pihenőnap (%s-től helyettesítve)")
	countries\hungary.py:137: 2010: (DEC, 24, DEC, 11),
	countries\hungary.py:139: (MAR, 14, MAR, 19),
	countries\hungary.py:140: (OCT, 31, NOV, 5),
	countries\hungary.py:138: 2011: (
	countries\hungary.py:143: (MAR, 16, MAR, 24),
	countries\hungary.py:144: (APR, 30, APR, 21),
	countries\hungary.py:145: (OCT, 22, OCT, 27),
	countries\hungary.py:146: (NOV, 2, NOV, 10),
	countries\hungary.py:147: (DEC, 24, DEC, 15),
	countries\hungary.py:148: (DEC, 31, DEC, 1),
	countries\hungary.py:142: 2012: (
	countries\hungary.py:151: (AUG, 19, AUG, 24),
	countries\hungary.py:152: (DEC, 24, DEC, 7),
	countries\hungary.py:153: (DEC, 27, DEC, 21),
	countries\hungary.py:150: 2013: (
	countries\hungary.py:156: (MAY, 2, MAY, 10),
	countries\hungary.py:157: (OCT, 24, OCT, 18),
	countries\hungary.py:158: (DEC, 24, DEC, 13),
	countries\hungary.py:155: 2014: (
	countries\hungary.py:161: (JAN, 2, JAN, 10),
	countries\hungary.py:162: (AUG, 21, AUG, 8),
	countries\hungary.py:163: (DEC, 24, DEC, 12),
	countries\hungary.py:160: 2015: (
	countries\hungary.py:166: (MAR, 14, MAR, 5),
	countries\hungary.py:167: (OCT, 31, OCT, 15),
	countries\hungary.py:165: 2016: (
	countries\hungary.py:170: (MAR, 16, MAR, 10),
	countries\hungary.py:171: (APR, 30, APR, 21),
	countries\hungary.py:172: (OCT, 22, OCT, 13),
	countries\hungary.py:173: (NOV, 2, NOV, 10),
	countries\hungary.py:174: (DEC, 24, DEC, 1),
	countries\hungary.py:175: (DEC, 31, DEC, 15),
	countries\hungary.py:169: 2018: (
	countries\hungary.py:178: (AUG, 19, AUG, 10),
	countries\hungary.py:179: (DEC, 24, DEC, 7),
	countries\hungary.py:180: (DEC, 27, DEC, 14),
	countries\hungary.py:177: 2019: (
	countries\hungary.py:183: (AUG, 21, AUG, 29),
	countries\hungary.py:184: (DEC, 24, DEC, 12),
	countries\hungary.py:182: 2020: (
	countries\hungary.py:186: 2021: (DEC, 24, DEC, 11),
	countries\hungary.py:188: (MAR, 14, MAR, 26),
	countries\hungary.py:189: (OCT, 31, OCT, 15),
	countries\hungary.py:187: 2022: (
	countries\hungary.py:192: (AUG, 19, AUG, 3),
	countries\hungary.py:193: (DEC, 24, DEC, 7),
	countries\hungary.py:194: (DEC, 27, DEC, 14),
	countries\hungary.py:191: 2024: (
	countries\hungary.py:136: special_public_holidays = {
	countries\__init__.py:73: from .iceland import Iceland, IS, ISL
(call) countries\iceland.py:0: <module>
	countries\iceland.py:12: from gettext import gettext as tr
	countries\iceland.py:14: from holidays.groups import ChristianHolidays, InternationalHolidays
	countries\iceland.py:15: from holidays.holiday_base import HolidayBase
	countries\iceland.py:18: class Iceland(HolidayBase, ChristianHolidays, InternationalHolidays):
(call) countries\iceland.py:18: Iceland
	countries\iceland.py:18: class Iceland(HolidayBase, ChristianHolidays, InternationalHolidays):
	countries\iceland.py:19: """
	countries\iceland.py:24: country = "IS"
	countries\iceland.py:25: default_language = "is"
	countries\iceland.py:26: supported_languages = ("en_US", "is", "uk")
	countries\iceland.py:28: def __init__(self, *args, **kwargs):
	countries\iceland.py:33: def _populate_public_holidays(self):
	countries\iceland.py:83: class IS(Iceland):
(call) countries\iceland.py:83: IS
	countries\iceland.py:83: class IS(Iceland):
	countries\iceland.py:84: pass
	countries\iceland.py:87: class ISL(Iceland):
(call) countries\iceland.py:87: ISL
	countries\iceland.py:87: class ISL(Iceland):
	countries\iceland.py:88: pass
	countries\__init__.py:74: from .india import India, IN, IND
(call) countries\india.py:0: <module>
	countries\india.py:12: import warnings
	countries\india.py:14: from holidays.calendars.gregorian import MAR, OCT, NOV
	countries\india.py:15: from holidays.groups import ChristianHolidays, InternationalHolidays, IslamicHolidays
	countries\india.py:16: from holidays.holiday_base import HolidayBase
	countries\india.py:19: class India(HolidayBase, ChristianHolidays, InternationalHolidays, IslamicHolidays):
(call) countries\india.py:19: India
	countries\india.py:19: class India(HolidayBase, ChristianHolidays, InternationalHolidays, IslamicHolidays):
	countries\india.py:20: """
	countries\india.py:29: country = "IN"
	countries\india.py:30: subdivisions = (
	countries\india.py:70: def __init__(self, *args, **kwargs):
	countries\india.py:76: def _populate_public_holidays(self):
	countries\india.py:200: def _populate_subdiv_ap_public_holidays(self):
	countries\india.py:205: def _populate_subdiv_as_public_holidays(self):
	countries\india.py:209: def _populate_subdiv_br_public_holidays(self):
	countries\india.py:214: def _populate_subdiv_cg_public_holidays(self):
	countries\india.py:218: def _populate_subdiv_gj_public_holidays(self):
	countries\india.py:224: def _populate_subdiv_hr_public_holidays(self):
	countries\india.py:229: def _populate_subdiv_ka_public_holidays(self):
	countries\india.py:233: def _populate_subdiv_kl_public_holidays(self):
	countries\india.py:238: def _populate_subdiv_mh_public_holidays(self):
	countries\india.py:244: def _populate_subdiv_mp_public_holidays(self):
	countries\india.py:248: def _populate_subdiv_or_public_holidays(self):
	countries\india.py:254: def _populate_subdiv_rj_public_holidays(self):
	countries\india.py:259: def _populate_subdiv_sk_public_holidays(self):
	countries\india.py:263: def _populate_subdiv_tn_public_holidays(self):
	countries\india.py:269: def _populate_subdiv_ts_public_holidays(self):
	countries\india.py:274: def _populate_subdiv_uk_public_holidays(self):
	countries\india.py:278: def _populate_subdiv_up_public_holidays(self):
	countries\india.py:282: def _populate_subdiv_wb_public_holidays(self):
	countries\india.py:289: class IN(India):
(call) countries\india.py:289: IN
	countries\india.py:289: class IN(India):
	countries\india.py:290: pass
	countries\india.py:293: class IND(India):
(call) countries\india.py:293: IND
	countries\india.py:293: class IND(India):
	countries\india.py:294: pass
	countries\__init__.py:75: from .indonesia import Indonesia, ID, IDN
(call) countries\indonesia.py:0: <module>
	countries\indonesia.py:12: from gettext import gettext as tr
	countries\indonesia.py:14: from holidays.calendars import (
	countries\indonesia.py:19: from holidays.calendars.gregorian import JAN, FEB, MAR, APR, MAY, JUN, JUL, AUG, SEP, OCT, NOV, DEC
	countries\indonesia.py:20: from holidays.constants import GOVERNMENT, PUBLIC
	countries\indonesia.py:21: from holidays.groups import (
	countries\indonesia.py:29: from holidays.holiday_base import HolidayBase
	countries\indonesia.py:32: class Indonesia(
	countries\indonesia.py:33: HolidayBase,
	countries\indonesia.py:34: BuddhistCalendarHolidays,
	countries\indonesia.py:35: ChineseCalendarHolidays,
	countries\indonesia.py:36: ChristianHolidays,
	countries\indonesia.py:37: InternationalHolidays,
	countries\indonesia.py:38: IslamicHolidays,
	countries\indonesia.py:39: StaticHolidays,
	countries\indonesia.py:32: class Indonesia(
(call) countries\indonesia.py:32: Indonesia
	countries\indonesia.py:32: class Indonesia(
	countries\indonesia.py:41: """
	countries\indonesia.py:49: country = "ID"
	countries\indonesia.py:50: default_language = "id"
	countries\indonesia.py:51: estimated_label = tr("%s (perkiraan)")
	countries\indonesia.py:52: supported_languages = ("en_US", "id", "uk")
	countries\indonesia.py:53: supported_categories = (GOVERNMENT, PUBLIC)
	countries\indonesia.py:55: def __init__(self, *args, **kwargs):
	countries\indonesia.py:64: def _populate_public_holidays(self):
	countries\indonesia.py:170: class ID(Indonesia):
(call) countries\indonesia.py:170: ID
	countries\indonesia.py:170: class ID(Indonesia):
	countries\indonesia.py:171: pass
	countries\indonesia.py:174: class IDN(Indonesia):
(call) countries\indonesia.py:174: IDN
	countries\indonesia.py:174: class IDN(Indonesia):
	countries\indonesia.py:175: pass
	countries\indonesia.py:178: class IndonesiaBuddhistHolidays(_CustomBuddhistHolidays):
(call) countries\indonesia.py:178: IndonesiaBuddhistHolidays
	countries\indonesia.py:178: class IndonesiaBuddhistHolidays(_CustomBuddhistHolidays):
	countries\indonesia.py:179: VESAK_DATES = {
	countries\indonesia.py:180: 2007: (JUN, 1),
	countries\indonesia.py:179: VESAK_DATES = {
	countries\indonesia.py:181: 2008: (MAY, 20),
	countries\indonesia.py:179: VESAK_DATES = {
	countries\indonesia.py:182: 2009: (MAY, 9),
	countries\indonesia.py:179: VESAK_DATES = {
	countries\indonesia.py:183: 2010: (MAY, 28),
	countries\indonesia.py:179: VESAK_DATES = {
	countries\indonesia.py:184: 2011: (MAY, 17),
	countries\indonesia.py:179: VESAK_DATES = {
	countries\indonesia.py:185: 2012: (MAY, 6),
	countries\indonesia.py:179: VESAK_DATES = {
	countries\indonesia.py:186: 2013: (MAY, 25),
	countries\indonesia.py:179: VESAK_DATES = {
	countries\indonesia.py:187: 2014: (MAY, 15),
	countries\indonesia.py:179: VESAK_DATES = {
	countries\indonesia.py:188: 2015: (JUN, 2),
	countries\indonesia.py:179: VESAK_DATES = {
	countries\indonesia.py:189: 2016: (MAY, 22),
	countries\indonesia.py:179: VESAK_DATES = {
	countries\indonesia.py:190: 2017: (MAY, 11),
	countries\indonesia.py:179: VESAK_DATES = {
	countries\indonesia.py:191: 2018: (MAY, 29),
	countries\indonesia.py:179: VESAK_DATES = {
	countries\indonesia.py:192: 2019: (MAY, 19),
	countries\indonesia.py:179: VESAK_DATES = {
	countries\indonesia.py:193: 2020: (MAY, 7),
	countries\indonesia.py:179: VESAK_DATES = {
	countries\indonesia.py:194: 2021: (MAY, 26),
	countries\indonesia.py:179: VESAK_DATES = {
	countries\indonesia.py:195: 2022: (MAY, 16),
	countries\indonesia.py:179: VESAK_DATES = {
	countries\indonesia.py:196: 2023: (JUN, 4),
	countries\indonesia.py:179: VESAK_DATES = {
(call) calendars\custom.py:24: __new__
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
(call) calendars\custom.py:25: <genexpr>
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:26: namespace[f"{attr}_{_CustomCalendar.CUSTOM_ATTR_POSTFIX}"] = namespace[attr]
	calendars\custom.py:27: del namespace[attr]
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
(call) calendars\custom.py:25: <genexpr>
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:29: return super().__new__(cls, name, bases, namespace)
	countries\indonesia.py:200: class IndonesiaChineseHolidays(_CustomChineseHolidays):
(call) countries\indonesia.py:200: IndonesiaChineseHolidays
	countries\indonesia.py:200: class IndonesiaChineseHolidays(_CustomChineseHolidays):
	countries\indonesia.py:201: LUNAR_NEW_YEAR_DATES = {
	countries\indonesia.py:202: 2003: (FEB, 1),
	countries\indonesia.py:201: LUNAR_NEW_YEAR_DATES = {
	countries\indonesia.py:203: 2004: (JAN, 22),
	countries\indonesia.py:201: LUNAR_NEW_YEAR_DATES = {
	countries\indonesia.py:204: 2005: (FEB, 9),
	countries\indonesia.py:201: LUNAR_NEW_YEAR_DATES = {
	countries\indonesia.py:205: 2006: (JAN, 30),
	countries\indonesia.py:201: LUNAR_NEW_YEAR_DATES = {
	countries\indonesia.py:206: 2007: (FEB, 19),
	countries\indonesia.py:201: LUNAR_NEW_YEAR_DATES = {
	countries\indonesia.py:207: 2008: (FEB, 7),
	countries\indonesia.py:201: LUNAR_NEW_YEAR_DATES = {
	countries\indonesia.py:208: 2009: (JAN, 26),
	countries\indonesia.py:201: LUNAR_NEW_YEAR_DATES = {
	countries\indonesia.py:209: 2010: (FEB, 15),
	countries\indonesia.py:201: LUNAR_NEW_YEAR_DATES = {
	countries\indonesia.py:210: 2011: (FEB, 3),
	countries\indonesia.py:201: LUNAR_NEW_YEAR_DATES = {
	countries\indonesia.py:211: 2012: (JAN, 23),
	countries\indonesia.py:201: LUNAR_NEW_YEAR_DATES = {
	countries\indonesia.py:212: 2013: (FEB, 11),
	countries\indonesia.py:201: LUNAR_NEW_YEAR_DATES = {
	countries\indonesia.py:213: 2014: (JAN, 31),
	countries\indonesia.py:201: LUNAR_NEW_YEAR_DATES = {
	countries\indonesia.py:214: 2015: (FEB, 19),
	countries\indonesia.py:201: LUNAR_NEW_YEAR_DATES = {
	countries\indonesia.py:215: 2016: (FEB, 8),
	countries\indonesia.py:201: LUNAR_NEW_YEAR_DATES = {
	countries\indonesia.py:216: 2017: (JAN, 28),
	countries\indonesia.py:201: LUNAR_NEW_YEAR_DATES = {
	countries\indonesia.py:217: 2018: (FEB, 16),
	countries\indonesia.py:201: LUNAR_NEW_YEAR_DATES = {
	countries\indonesia.py:218: 2019: (FEB, 5),
	countries\indonesia.py:201: LUNAR_NEW_YEAR_DATES = {
	countries\indonesia.py:219: 2020: (JAN, 25),
	countries\indonesia.py:220: 2021: (FEB, 12),
	countries\indonesia.py:221: 2022: (FEB, 1),
	countries\indonesia.py:222: 2023: (JAN, 22),
	countries\indonesia.py:201: LUNAR_NEW_YEAR_DATES = {
(call) calendars\custom.py:24: __new__
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
(call) calendars\custom.py:25: <genexpr>
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:26: namespace[f"{attr}_{_CustomCalendar.CUSTOM_ATTR_POSTFIX}"] = namespace[attr]
	calendars\custom.py:27: del namespace[attr]
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
(call) calendars\custom.py:25: <genexpr>
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:29: return super().__new__(cls, name, bases, namespace)
	countries\indonesia.py:226: class IndonesiaIslamicHolidays(_CustomIslamicHolidays):
(call) countries\indonesia.py:226: IndonesiaIslamicHolidays
	countries\indonesia.py:226: class IndonesiaIslamicHolidays(_CustomIslamicHolidays):
	countries\indonesia.py:227: EID_AL_ADHA_DATES = {
	countries\indonesia.py:228: 2001: (MAR, 6),
	countries\indonesia.py:227: EID_AL_ADHA_DATES = {
	countries\indonesia.py:229: 2002: (FEB, 23),
	countries\indonesia.py:227: EID_AL_ADHA_DATES = {
	countries\indonesia.py:230: 2003: (FEB, 12),
	countries\indonesia.py:227: EID_AL_ADHA_DATES = {
	countries\indonesia.py:231: 2004: (FEB, 2),
	countries\indonesia.py:227: EID_AL_ADHA_DATES = {
	countries\indonesia.py:232: 2005: (JAN, 21),
	countries\indonesia.py:227: EID_AL_ADHA_DATES = {
	countries\indonesia.py:233: 2006: ((JAN, 10), (DEC, 31)),
	countries\indonesia.py:227: EID_AL_ADHA_DATES = {
	countries\indonesia.py:234: 2007: (DEC, 20),
	countries\indonesia.py:227: EID_AL_ADHA_DATES = {
	countries\indonesia.py:235: 2008: (DEC, 8),
	countries\indonesia.py:227: EID_AL_ADHA_DATES = {
	countries\indonesia.py:236: 2009: (NOV, 27),
	countries\indonesia.py:227: EID_AL_ADHA_DATES = {
	countries\indonesia.py:237: 2010: (NOV, 17),
	countries\indonesia.py:227: EID_AL_ADHA_DATES = {
	countries\indonesia.py:238: 2011: (NOV, 6),
	countries\indonesia.py:227: EID_AL_ADHA_DATES = {
	countries\indonesia.py:239: 2012: (OCT, 26),
	countries\indonesia.py:227: EID_AL_ADHA_DATES = {
	countries\indonesia.py:240: 2013: (OCT, 15),
	countries\indonesia.py:227: EID_AL_ADHA_DATES = {
	countries\indonesia.py:241: 2014: (OCT, 5),
	countries\indonesia.py:227: EID_AL_ADHA_DATES = {
	countries\indonesia.py:242: 2015: (SEP, 24),
	countries\indonesia.py:227: EID_AL_ADHA_DATES = {
	countries\indonesia.py:243: 2016: (SEP, 12),
	countries\indonesia.py:227: EID_AL_ADHA_DATES = {
	countries\indonesia.py:244: 2017: (SEP, 1),
	countries\indonesia.py:227: EID_AL_ADHA_DATES = {
	countries\indonesia.py:245: 2018: (AUG, 22),
	countries\indonesia.py:246: 2019: (AUG, 11),
	countries\indonesia.py:247: 2020: (JUL, 31),
	countries\indonesia.py:248: 2021: (JUL, 20),
	countries\indonesia.py:249: 2022: (JUL, 10),
	countries\indonesia.py:250: 2023: (JUN, 29),
	countries\indonesia.py:227: EID_AL_ADHA_DATES = {
	countries\indonesia.py:253: EID_AL_FITR_DATES = {
	countries\indonesia.py:254: 2001: (DEC, 16),
	countries\indonesia.py:253: EID_AL_FITR_DATES = {
	countries\indonesia.py:255: 2002: (DEC, 6),
	countries\indonesia.py:253: EID_AL_FITR_DATES = {
	countries\indonesia.py:256: 2003: (NOV, 25),
	countries\indonesia.py:253: EID_AL_FITR_DATES = {
	countries\indonesia.py:257: 2004: (NOV, 14),
	countries\indonesia.py:253: EID_AL_FITR_DATES = {
	countries\indonesia.py:258: 2005: (NOV, 3),
	countries\indonesia.py:253: EID_AL_FITR_DATES = {
	countries\indonesia.py:259: 2006: (OCT, 24),
	countries\indonesia.py:253: EID_AL_FITR_DATES = {
	countries\indonesia.py:260: 2007: (OCT, 13),
	countries\indonesia.py:253: EID_AL_FITR_DATES = {
	countries\indonesia.py:261: 2008: (OCT, 1),
	countries\indonesia.py:253: EID_AL_FITR_DATES = {
	countries\indonesia.py:262: 2009: (SEP, 20),
	countries\indonesia.py:253: EID_AL_FITR_DATES = {
	countries\indonesia.py:263: 2010: (SEP, 10),
	countries\indonesia.py:253: EID_AL_FITR_DATES = {
	countries\indonesia.py:264: 2011: (AUG, 30),
	countries\indonesia.py:253: EID_AL_FITR_DATES = {
	countries\indonesia.py:265: 2012: (AUG, 19),
	countries\indonesia.py:253: EID_AL_FITR_DATES = {
	countries\indonesia.py:266: 2013: (AUG, 8),
	countries\indonesia.py:253: EID_AL_FITR_DATES = {
	countries\indonesia.py:267: 2014: (JUL, 28),
	countries\indonesia.py:253: EID_AL_FITR_DATES = {
	countries\indonesia.py:268: 2015: (JUL, 17),
	countries\indonesia.py:253: EID_AL_FITR_DATES = {
	countries\indonesia.py:269: 2016: (JUL, 6),
	countries\indonesia.py:253: EID_AL_FITR_DATES = {
	countries\indonesia.py:270: 2017: (JUN, 25),
	countries\indonesia.py:253: EID_AL_FITR_DATES = {
	countries\indonesia.py:271: 2018: (JUN, 15),
	countries\indonesia.py:272: 2019: (JUN, 5),
	countries\indonesia.py:273: 2020: (MAY, 24),
	countries\indonesia.py:274: 2021: (MAY, 13),
	countries\indonesia.py:275: 2022: (MAY, 2),
	countries\indonesia.py:276: 2023: (APR, 22),
	countries\indonesia.py:253: EID_AL_FITR_DATES = {
	countries\indonesia.py:279: HIJRI_NEW_YEAR_DATES = {
	countries\indonesia.py:280: 2001: (MAR, 26),
	countries\indonesia.py:279: HIJRI_NEW_YEAR_DATES = {
	countries\indonesia.py:281: 2002: (MAR, 15),
	countries\indonesia.py:279: HIJRI_NEW_YEAR_DATES = {
	countries\indonesia.py:282: 2003: (MAR, 5),
	countries\indonesia.py:279: HIJRI_NEW_YEAR_DATES = {
	countries\indonesia.py:283: 2004: (FEB, 22),
	countries\indonesia.py:279: HIJRI_NEW_YEAR_DATES = {
	countries\indonesia.py:284: 2005: (FEB, 10),
	countries\indonesia.py:279: HIJRI_NEW_YEAR_DATES = {
	countries\indonesia.py:285: 2006: (JAN, 31),
	countries\indonesia.py:279: HIJRI_NEW_YEAR_DATES = {
	countries\indonesia.py:286: 2007: (JAN, 20),
	countries\indonesia.py:279: HIJRI_NEW_YEAR_DATES = {
	countries\indonesia.py:287: 2008: ((JAN, 10), (DEC, 29)),
	countries\indonesia.py:279: HIJRI_NEW_YEAR_DATES = {
	countries\indonesia.py:288: 2009: (DEC, 18),
	countries\indonesia.py:279: HIJRI_NEW_YEAR_DATES = {
	countries\indonesia.py:289: 2010: (DEC, 7),
	countries\indonesia.py:279: HIJRI_NEW_YEAR_DATES = {
	countries\indonesia.py:290: 2011: (NOV, 27),
	countries\indonesia.py:279: HIJRI_NEW_YEAR_DATES = {
	countries\indonesia.py:291: 2012: (NOV, 15),
	countries\indonesia.py:279: HIJRI_NEW_YEAR_DATES = {
	countries\indonesia.py:292: 2013: (NOV, 5),
	countries\indonesia.py:279: HIJRI_NEW_YEAR_DATES = {
	countries\indonesia.py:293: 2014: (OCT, 25),
	countries\indonesia.py:279: HIJRI_NEW_YEAR_DATES = {
	countries\indonesia.py:294: 2015: (OCT, 14),
	countries\indonesia.py:279: HIJRI_NEW_YEAR_DATES = {
	countries\indonesia.py:295: 2016: (OCT, 2),
	countries\indonesia.py:279: HIJRI_NEW_YEAR_DATES = {
	countries\indonesia.py:296: 2017: (SEP, 21),
	countries\indonesia.py:279: HIJRI_NEW_YEAR_DATES = {
	countries\indonesia.py:297: 2018: (SEP, 11),
	countries\indonesia.py:298: 2019: (SEP, 1),
	countries\indonesia.py:299: 2020: (AUG, 20),
	countries\indonesia.py:300: 2021: (AUG, 11),
	countries\indonesia.py:301: 2022: (JUL, 30),
	countries\indonesia.py:302: 2023: (JUL, 19),
	countries\indonesia.py:279: HIJRI_NEW_YEAR_DATES = {
	countries\indonesia.py:305: ISRA_AND_MIRAJ_DATES = {
	countries\indonesia.py:306: 2001: (OCT, 15),
	countries\indonesia.py:305: ISRA_AND_MIRAJ_DATES = {
	countries\indonesia.py:307: 2002: (OCT, 4),
	countries\indonesia.py:305: ISRA_AND_MIRAJ_DATES = {
	countries\indonesia.py:308: 2003: (SEP, 24),
	countries\indonesia.py:305: ISRA_AND_MIRAJ_DATES = {
	countries\indonesia.py:309: 2004: (SEP, 12),
	countries\indonesia.py:305: ISRA_AND_MIRAJ_DATES = {
	countries\indonesia.py:310: 2005: (SEP, 1),
	countries\indonesia.py:305: ISRA_AND_MIRAJ_DATES = {
	countries\indonesia.py:311: 2006: (AUG, 22),
	countries\indonesia.py:305: ISRA_AND_MIRAJ_DATES = {
	countries\indonesia.py:312: 2007: (AUG, 11),
	countries\indonesia.py:305: ISRA_AND_MIRAJ_DATES = {
	countries\indonesia.py:313: 2008: (JUL, 31),
	countries\indonesia.py:305: ISRA_AND_MIRAJ_DATES = {
	countries\indonesia.py:314: 2009: (JUL, 20),
	countries\indonesia.py:305: ISRA_AND_MIRAJ_DATES = {
	countries\indonesia.py:315: 2010: (JUL, 9),
	countries\indonesia.py:305: ISRA_AND_MIRAJ_DATES = {
	countries\indonesia.py:316: 2011: (JUN, 29),
	countries\indonesia.py:305: ISRA_AND_MIRAJ_DATES = {
	countries\indonesia.py:317: 2012: (JUN, 17),
	countries\indonesia.py:305: ISRA_AND_MIRAJ_DATES = {
	countries\indonesia.py:318: 2013: (JUN, 6),
	countries\indonesia.py:305: ISRA_AND_MIRAJ_DATES = {
	countries\indonesia.py:319: 2014: (MAY, 27),
	countries\indonesia.py:305: ISRA_AND_MIRAJ_DATES = {
	countries\indonesia.py:320: 2015: (MAY, 16),
	countries\indonesia.py:305: ISRA_AND_MIRAJ_DATES = {
	countries\indonesia.py:321: 2016: (MAY, 6),
	countries\indonesia.py:305: ISRA_AND_MIRAJ_DATES = {
	countries\indonesia.py:322: 2017: (APR, 24),
	countries\indonesia.py:305: ISRA_AND_MIRAJ_DATES = {
	countries\indonesia.py:323: 2018: (APR, 14),
	countries\indonesia.py:324: 2019: (APR, 3),
	countries\indonesia.py:325: 2020: (MAR, 22),
	countries\indonesia.py:326: 2021: (MAR, 11),
	countries\indonesia.py:327: 2022: (FEB, 28),
	countries\indonesia.py:328: 2023: (FEB, 18),
	countries\indonesia.py:305: ISRA_AND_MIRAJ_DATES = {
	countries\indonesia.py:331: MAWLID_DATES = {
	countries\indonesia.py:332: 2006: (APR, 10),
	countries\indonesia.py:331: MAWLID_DATES = {
	countries\indonesia.py:333: 2007: (MAR, 31),
	countries\indonesia.py:331: MAWLID_DATES = {
	countries\indonesia.py:334: 2008: (MAR, 20),
	countries\indonesia.py:331: MAWLID_DATES = {
	countries\indonesia.py:335: 2009: (MAR, 9),
	countries\indonesia.py:331: MAWLID_DATES = {
	countries\indonesia.py:336: 2010: (FEB, 26),
	countries\indonesia.py:331: MAWLID_DATES = {
	countries\indonesia.py:337: 2011: (FEB, 15),
	countries\indonesia.py:331: MAWLID_DATES = {
	countries\indonesia.py:338: 2012: (FEB, 5),
	countries\indonesia.py:331: MAWLID_DATES = {
	countries\indonesia.py:339: 2013: (JAN, 24),
	countries\indonesia.py:331: MAWLID_DATES = {
	countries\indonesia.py:340: 2014: (JAN, 14),
	countries\indonesia.py:331: MAWLID_DATES = {
	countries\indonesia.py:341: 2015: ((JAN, 3), (DEC, 24)),
	countries\indonesia.py:331: MAWLID_DATES = {
	countries\indonesia.py:342: 2016: (DEC, 12),
	countries\indonesia.py:331: MAWLID_DATES = {
	countries\indonesia.py:343: 2017: (DEC, 1),
	countries\indonesia.py:331: MAWLID_DATES = {
	countries\indonesia.py:344: 2018: (NOV, 20),
	countries\indonesia.py:331: MAWLID_DATES = {
	countries\indonesia.py:345: 2019: (NOV, 9),
	countries\indonesia.py:331: MAWLID_DATES = {
	countries\indonesia.py:346: 2020: (OCT, 29),
	countries\indonesia.py:331: MAWLID_DATES = {
	countries\indonesia.py:347: 2021: (OCT, 19),
	countries\indonesia.py:331: MAWLID_DATES = {
	countries\indonesia.py:348: 2022: (OCT, 8),
	countries\indonesia.py:331: MAWLID_DATES = {
(call) calendars\custom.py:24: __new__
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
(call) calendars\custom.py:25: <genexpr>
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:26: namespace[f"{attr}_{_CustomCalendar.CUSTOM_ATTR_POSTFIX}"] = namespace[attr]
	calendars\custom.py:27: del namespace[attr]
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
(call) calendars\custom.py:25: <genexpr>
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:26: namespace[f"{attr}_{_CustomCalendar.CUSTOM_ATTR_POSTFIX}"] = namespace[attr]
	calendars\custom.py:27: del namespace[attr]
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
(call) calendars\custom.py:25: <genexpr>
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:26: namespace[f"{attr}_{_CustomCalendar.CUSTOM_ATTR_POSTFIX}"] = namespace[attr]
	calendars\custom.py:27: del namespace[attr]
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
(call) calendars\custom.py:25: <genexpr>
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:26: namespace[f"{attr}_{_CustomCalendar.CUSTOM_ATTR_POSTFIX}"] = namespace[attr]
	calendars\custom.py:27: del namespace[attr]
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
(call) calendars\custom.py:25: <genexpr>
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:26: namespace[f"{attr}_{_CustomCalendar.CUSTOM_ATTR_POSTFIX}"] = namespace[attr]
	calendars\custom.py:27: del namespace[attr]
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
(call) calendars\custom.py:25: <genexpr>
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:29: return super().__new__(cls, name, bases, namespace)
	countries\indonesia.py:352: class IndonesiaStaticHolidays:
(call) countries\indonesia.py:352: IndonesiaStaticHolidays
	countries\indonesia.py:352: class IndonesiaStaticHolidays:
	countries\indonesia.py:354: election_day = tr("Hari Pemilihan")
	countries\indonesia.py:356: eid_al_fitr_joint_holiday = tr("Cuti Bersama Hari Raya Idulfitri")
	countries\indonesia.py:358: christmas_joint_holiday = tr("Cuti Bersama Hari Raya Natal")
	countries\indonesia.py:360: lunar_new_year_joint_holiday = tr("Cuti Bersama Tahun Baru Imlek")
	countries\indonesia.py:362: day_of_silence_joint_holiday = tr("Cuti Bersama Hari Suci Nyepi")
	countries\indonesia.py:365: 2018: (JUN, 27, election_day),
	countries\indonesia.py:366: 2019: (APR, 17, election_day),
	countries\indonesia.py:367: 2020: (DEC, 9, election_day),
	countries\indonesia.py:364: special_public_holidays = {
	countries\indonesia.py:371: (APR, 29, eid_al_fitr_joint_holiday),
	countries\indonesia.py:372: (MAY, 4, eid_al_fitr_joint_holiday),
	countries\indonesia.py:373: (MAY, 5, eid_al_fitr_joint_holiday),
	countries\indonesia.py:374: (MAY, 6, eid_al_fitr_joint_holiday),
	countries\indonesia.py:375: (DEC, 26, christmas_joint_holiday),
	countries\indonesia.py:370: 2022: (
	countries\indonesia.py:378: (JAN, 23, lunar_new_year_joint_holiday),
	countries\indonesia.py:379: (MAR, 23, day_of_silence_joint_holiday),
	countries\indonesia.py:380: (APR, 19, eid_al_fitr_joint_holiday),
	countries\indonesia.py:381: (APR, 20, eid_al_fitr_joint_holiday),
	countries\indonesia.py:382: (APR, 21, eid_al_fitr_joint_holiday),
	countries\indonesia.py:383: (APR, 24, eid_al_fitr_joint_holiday),
	countries\indonesia.py:384: (APR, 25, eid_al_fitr_joint_holiday),
	countries\indonesia.py:385: (DEC, 26, christmas_joint_holiday),
	countries\indonesia.py:377: 2023: (
	countries\indonesia.py:369: special_government_holidays = {
	countries\__init__.py:76: from .iran import Iran, IR, IRN
(call) countries\iran.py:0: <module>
	countries\iran.py:12: from gettext import gettext as tr
	countries\iran.py:14: from holidays.groups import IslamicHolidays, PersianCalendarHolidays
	countries\iran.py:15: from holidays.holiday_base import HolidayBase
	countries\iran.py:18: class Iran(HolidayBase, IslamicHolidays, PersianCalendarHolidays):
(call) countries\iran.py:18: Iran
	countries\iran.py:18: class Iran(HolidayBase, IslamicHolidays, PersianCalendarHolidays):
	countries\iran.py:19: """
	countries\iran.py:25: country = "IR"
	countries\iran.py:26: default_language = "fa"
	countries\iran.py:28: estimated_label = tr("(تخمین زده) %s")
	countries\iran.py:29: supported_languages = ("en_US", "fa")
	countries\iran.py:31: def __init__(self, *args, **kwargs):
	countries\iran.py:36: def _populate_public_holidays(self):
	countries\iran.py:116: class IR(Iran):
(call) countries\iran.py:116: IR
	countries\iran.py:116: class IR(Iran):
	countries\iran.py:117: pass
	countries\iran.py:120: class IRN(Iran):
(call) countries\iran.py:120: IRN
	countries\iran.py:120: class IRN(Iran):
	countries\iran.py:121: pass
	countries\__init__.py:77: from .ireland import Ireland, IE, IRL
(call) countries\ireland.py:0: <module>
	countries\ireland.py:12: from holidays.calendars.gregorian import FEB, MAR
	countries\ireland.py:13: from holidays.groups import ChristianHolidays, InternationalHolidays, StaticHolidays
	countries\ireland.py:14: from holidays.observed_holiday_base import (
	countries\ireland.py:21: class Ireland(ObservedHolidayBase, ChristianHolidays, InternationalHolidays, StaticHolidays):
(call) countries\ireland.py:21: Ireland
	countries\ireland.py:21: class Ireland(ObservedHolidayBase, ChristianHolidays, InternationalHolidays, StaticHolidays):
	countries\ireland.py:22: """
	countries\ireland.py:28: country = "IE"
	countries\ireland.py:29: observed_label = "%s (observed)"
	countries\ireland.py:31: def __init__(self, *args, **kwargs):
	countries\ireland.py:38: def _populate_public_holidays(self):
	countries\ireland.py:82: class IE(Ireland):
(call) countries\ireland.py:82: IE
	countries\ireland.py:82: class IE(Ireland):
	countries\ireland.py:83: pass
	countries\ireland.py:86: class IRL(Ireland):
(call) countries\ireland.py:86: IRL
	countries\ireland.py:86: class IRL(Ireland):
	countries\ireland.py:87: pass
	countries\ireland.py:90: class IrelandStaticHolidays:
(call) countries\ireland.py:90: IrelandStaticHolidays
	countries\ireland.py:90: class IrelandStaticHolidays:
	countries\ireland.py:92: 2022: (MAR, 18, "Day of Remembrance and Recognition"),
	countries\ireland.py:91: special_public_holidays = {
	countries\__init__.py:78: from .isle_of_man import IsleOfMan, IM, IMN
(call) countries\isle_of_man.py:0: <module>
	countries\isle_of_man.py:12: from datetime import date
	countries\isle_of_man.py:14: from holidays.calendars.gregorian import JUL
	countries\isle_of_man.py:15: from holidays.countries.united_kingdom import UnitedKingdom, UnitedKingdomStaticHolidays
(call) countries\united_kingdom.py:0: <module>
	countries\united_kingdom.py:12: from typing import Tuple, Union
	countries\united_kingdom.py:14: from holidays.calendars.gregorian import APR, MAY, JUN, JUL, SEP, DEC
	countries\united_kingdom.py:15: from holidays.groups import ChristianHolidays, InternationalHolidays, StaticHolidays
	countries\united_kingdom.py:16: from holidays.observed_holiday_base import (
	countries\united_kingdom.py:24: class UnitedKingdom(ObservedHolidayBase, ChristianHolidays, InternationalHolidays, StaticHolidays):
(call) countries\united_kingdom.py:24: UnitedKingdom
	countries\united_kingdom.py:24: class UnitedKingdom(ObservedHolidayBase, ChristianHolidays, InternationalHolidays, StaticHolidays):
	countries\united_kingdom.py:25: """
	countries\united_kingdom.py:32: country = "GB"
	countries\united_kingdom.py:33: observed_label = "%s (observed)"
	countries\united_kingdom.py:34: subdivisions: Union[Tuple[()], Tuple[str, ...]] = (
	countries\united_kingdom.py:41: _deprecated_subdivisions: Tuple[str, ...] = (
	countries\united_kingdom.py:49: def __init__(self, *args, **kwargs):
	countries\united_kingdom.py:56: def _populate_public_holidays(self) -> None:
	countries\united_kingdom.py:90: def _populate_subdiv_holidays(self):
	countries\united_kingdom.py:108: def _populate_subdiv_eng_public_holidays(self):
	countries\united_kingdom.py:116: def _populate_subdiv_nir_public_holidays(self):
	countries\united_kingdom.py:131: def _populate_subdiv_sct_public_holidays(self):
	countries\united_kingdom.py:160: def _populate_subdiv_wls_public_holidays(self):
	countries\united_kingdom.py:169: class UK(UnitedKingdom):
(call) countries\united_kingdom.py:169: UK
	countries\united_kingdom.py:169: class UK(UnitedKingdom):
	countries\united_kingdom.py:170: pass
	countries\united_kingdom.py:173: class GB(UnitedKingdom):
(call) countries\united_kingdom.py:173: GB
	countries\united_kingdom.py:173: class GB(UnitedKingdom):
	countries\united_kingdom.py:174: pass
	countries\united_kingdom.py:177: class GBR(UnitedKingdom):
(call) countries\united_kingdom.py:177: GBR
	countries\united_kingdom.py:177: class GBR(UnitedKingdom):
	countries\united_kingdom.py:178: pass
	countries\united_kingdom.py:181: class UnitedKingdomStaticHolidays:
(call) countries\united_kingdom.py:181: UnitedKingdomStaticHolidays
	countries\united_kingdom.py:181: class UnitedKingdomStaticHolidays:
	countries\united_kingdom.py:183: 1977: (JUN, 7, "Silver Jubilee of Elizabeth II"),
	countries\united_kingdom.py:184: 1981: (JUL, 29, "Wedding of Charles and Diana"),
	countries\united_kingdom.py:185: 1999: (DEC, 31, "Millennium Celebrations"),
	countries\united_kingdom.py:186: 2002: (JUN, 3, "Golden Jubilee of Elizabeth II"),
	countries\united_kingdom.py:187: 2011: (APR, 29, "Wedding of William and Catherine"),
	countries\united_kingdom.py:188: 2012: (JUN, 5, "Diamond Jubilee of Elizabeth II"),
	countries\united_kingdom.py:190: (JUN, 3, "Platinum Jubilee of Elizabeth II"),
	countries\united_kingdom.py:191: (SEP, 19, "State Funeral of Queen Elizabeth II"),
	countries\united_kingdom.py:189: 2022: (
	countries\united_kingdom.py:193: 2023: (MAY, 8, "Coronation of Charles III"),
	countries\united_kingdom.py:182: special_public_holidays = {
	countries\isle_of_man.py:16: from holidays.groups import ChristianHolidays, InternationalHolidays, StaticHolidays
	countries\isle_of_man.py:17: from holidays.observed_holiday_base import ObservedHolidayBase, SAT_SUN_TO_NEXT_MON
	countries\isle_of_man.py:20: class IsleOfMan(UnitedKingdom):
(call) countries\isle_of_man.py:20: IsleOfMan
	countries\isle_of_man.py:20: class IsleOfMan(UnitedKingdom):
	countries\isle_of_man.py:21: """Using existing code in UnitedKingdom for now."""
	countries\isle_of_man.py:23: country = "IM"
	countries\isle_of_man.py:24: subdivisions = ()  # Override UnitedKingdom subdivisions.
	countries\isle_of_man.py:26: def __init__(self, *args, **kwargs):  # Override UnitedKingdom __init__().
	countries\isle_of_man.py:33: def _populate_public_holidays(self) -> None:
	countries\isle_of_man.py:55: class IM(IsleOfMan):
(call) countries\isle_of_man.py:55: IM
	countries\isle_of_man.py:55: class IM(IsleOfMan):
	countries\isle_of_man.py:56: pass
	countries\isle_of_man.py:59: class IMN(IsleOfMan):
(call) countries\isle_of_man.py:59: IMN
	countries\isle_of_man.py:59: class IMN(IsleOfMan):
	countries\isle_of_man.py:60: pass
	countries\__init__.py:79: from .israel import Israel, IL, ISR
(call) countries\israel.py:0: <module>
	countries\israel.py:12: from datetime import timedelta as td
	countries\israel.py:13: from gettext import gettext as tr
	countries\israel.py:15: from holidays.calendars import _HebrewLunisolar
	countries\israel.py:16: from holidays.calendars.hebrew import (
	countries\israel.py:27: from holidays.constants import OPTIONAL, PUBLIC, SCHOOL
	countries\israel.py:28: from holidays.observed_holiday_base import (
	countries\israel.py:40: class Israel(ObservedHolidayBase):
(call) countries\israel.py:40: Israel
	countries\israel.py:40: class Israel(ObservedHolidayBase):
	countries\israel.py:41: """
	countries\israel.py:50: country = "IL"
	countries\israel.py:51: default_language = "he"
	countries\israel.py:53: observed_label = tr("(נצפה) %s")
	countries\israel.py:54: supported_categories = (OPTIONAL, PUBLIC, SCHOOL)
	countries\israel.py:55: supported_languages = ("en_US", "he", "uk")
	countries\israel.py:57: def __init__(self, *args, **kwargs):
	countries\israel.py:61: def _get_holiday(self, holiday: str):
	countries\israel.py:64: def _populate_public_holidays(self):
	countries\israel.py:106: def _populate_optional_holidays(self):
	countries\israel.py:152: def _populate_school_holidays(self):
	countries\israel.py:190: class IL(Israel):
(call) countries\israel.py:190: IL
	countries\israel.py:190: class IL(Israel):
	countries\israel.py:191: pass
	countries\israel.py:194: class ISR(Israel):
(call) countries\israel.py:194: ISR
	countries\israel.py:194: class ISR(Israel):
	countries\israel.py:195: pass
	countries\__init__.py:80: from .italy import Italy, IT, ITA
(call) countries\italy.py:0: <module>
	countries\italy.py:13: from datetime import timedelta as td
	countries\italy.py:15: from holidays.groups import ChristianHolidays, InternationalHolidays
	countries\italy.py:16: from holidays.holiday_base import HolidayBase
	countries\italy.py:19: class Italy(HolidayBase, ChristianHolidays, InternationalHolidays):
(call) countries\italy.py:19: Italy
	countries\italy.py:19: class Italy(HolidayBase, ChristianHolidays, InternationalHolidays):
	countries\italy.py:20: country = "IT"
	countries\italy.py:29: subdivisions = (
	countries\italy.py:148: _deprecated_subdivisions = ("Forlì",)
	countries\italy.py:150: def __init__(self, *args, **kwargs):
	countries\italy.py:155: def _populate_public_holidays(self):
	countries\italy.py:200: def _populate_subdiv_ag_public_holidays(self):
	countries\italy.py:203: def _populate_subdiv_al_public_holidays(self):
	countries\italy.py:206: def _populate_subdiv_an_public_holidays(self):
	countries\italy.py:209: def _populate_subdiv_ao_public_holidays(self):
	countries\italy.py:212: def _populate_subdiv_ap_public_holidays(self):
	countries\italy.py:215: def _populate_subdiv_aq_public_holidays(self):
	countries\italy.py:218: def _populate_subdiv_ar_public_holidays(self):
	countries\italy.py:221: def _populate_subdiv_at_public_holidays(self):
	countries\italy.py:224: def _populate_subdiv_av_public_holidays(self):
	countries\italy.py:227: def _populate_subdiv_ba_public_holidays(self):
	countries\italy.py:230: def _populate_subdiv_bg_public_holidays(self):
	countries\italy.py:233: def _populate_subdiv_bi_public_holidays(self):
	countries\italy.py:236: def _populate_subdiv_bl_public_holidays(self):
	countries\italy.py:239: def _populate_subdiv_bn_public_holidays(self):
	countries\italy.py:242: def _populate_subdiv_bo_public_holidays(self):
	countries\italy.py:245: def _populate_subdiv_br_public_holidays(self):
	countries\italy.py:248: def _populate_subdiv_bs_public_holidays(self):
	countries\italy.py:251: def _populate_subdiv_bt_public_holidays(self):
	countries\italy.py:256: def _populate_subdiv_bz_public_holidays(self):
	countries\italy.py:260: def _populate_subdiv_ca_public_holidays(self):
	countries\italy.py:263: def _populate_subdiv_cb_public_holidays(self):
	countries\italy.py:266: def _populate_subdiv_ce_public_holidays(self):
	countries\italy.py:269: def _populate_subdiv_ch_public_holidays(self):
	countries\italy.py:272: def _populate_subdiv_cl_public_holidays(self):
	countries\italy.py:275: def _populate_subdiv_cn_public_holidays(self):
	countries\italy.py:278: def _populate_subdiv_co_public_holidays(self):
	countries\italy.py:281: def _populate_subdiv_cr_public_holidays(self):
	countries\italy.py:284: def _populate_subdiv_cs_public_holidays(self):
	countries\italy.py:287: def _populate_subdiv_ct_public_holidays(self):
	countries\italy.py:290: def _populate_subdiv_cz_public_holidays(self):
	countries\italy.py:293: def _populate_subdiv_en_public_holidays(self):
	countries\italy.py:296: def _populate_subdiv_fc_public_holidays(self):
	countries\italy.py:300: def _populate_subdiv_fe_public_holidays(self):
	countries\italy.py:303: def _populate_subdiv_fg_public_holidays(self):
	countries\italy.py:306: def _populate_subdiv_fi_public_holidays(self):
	countries\italy.py:309: def _populate_subdiv_fm_public_holidays(self):
	countries\italy.py:313: def _populate_subdiv_fr_public_holidays(self):
	countries\italy.py:316: def _populate_subdiv_ge_public_holidays(self):
	countries\italy.py:319: def _populate_subdiv_go_public_holidays(self):
	countries\italy.py:322: def _populate_subdiv_gr_public_holidays(self):
	countries\italy.py:325: def _populate_subdiv_im_public_holidays(self):
	countries\italy.py:328: def _populate_subdiv_is_public_holidays(self):
	countries\italy.py:331: def _populate_subdiv_kr_public_holidays(self):
	countries\italy.py:334: def _populate_subdiv_lc_public_holidays(self):
	countries\italy.py:337: def _populate_subdiv_le_public_holidays(self):
	countries\italy.py:340: def _populate_subdiv_li_public_holidays(self):
	countries\italy.py:343: def _populate_subdiv_lo_public_holidays(self):
	countries\italy.py:346: def _populate_subdiv_lt_public_holidays(self):
	countries\italy.py:349: def _populate_subdiv_lu_public_holidays(self):
	countries\italy.py:352: def _populate_subdiv_mb_public_holidays(self):
	countries\italy.py:355: def _populate_subdiv_mc_public_holidays(self):
	countries\italy.py:358: def _populate_subdiv_me_public_holidays(self):
	countries\italy.py:361: def _populate_subdiv_mi_public_holidays(self):
	countries\italy.py:364: def _populate_subdiv_mn_public_holidays(self):
	countries\italy.py:367: def _populate_subdiv_mo_public_holidays(self):
	countries\italy.py:370: def _populate_subdiv_ms_public_holidays(self):
	countries\italy.py:373: def _populate_subdiv_mt_public_holidays(self):
	countries\italy.py:376: def _populate_subdiv_na_public_holidays(self):
	countries\italy.py:379: def _populate_subdiv_no_public_holidays(self):
	countries\italy.py:382: def _populate_subdiv_nu_public_holidays(self):
	countries\italy.py:385: def _populate_subdiv_or_public_holidays(self):
	countries\italy.py:388: def _populate_subdiv_pa_public_holidays(self):
	countries\italy.py:391: def _populate_subdiv_pc_public_holidays(self):
	countries\italy.py:394: def _populate_subdiv_pd_public_holidays(self):
	countries\italy.py:397: def _populate_subdiv_pe_public_holidays(self):
	countries\italy.py:400: def _populate_subdiv_pg_public_holidays(self):
	countries\italy.py:403: def _populate_subdiv_pi_public_holidays(self):
	countries\italy.py:406: def _populate_subdiv_pn_public_holidays(self):
	countries\italy.py:410: def _populate_subdiv_po_public_holidays(self):
	countries\italy.py:413: def _populate_subdiv_pr_public_holidays(self):
	countries\italy.py:416: def _populate_subdiv_pt_public_holidays(self):
	countries\italy.py:419: def _populate_subdiv_pu_public_holidays(self):
	countries\italy.py:423: def _populate_subdiv_pv_public_holidays(self):
	countries\italy.py:426: def _populate_subdiv_pz_public_holidays(self):
	countries\italy.py:429: def _populate_subdiv_ra_public_holidays(self):
	countries\italy.py:432: def _populate_subdiv_rc_public_holidays(self):
	countries\italy.py:435: def _populate_subdiv_re_public_holidays(self):
	countries\italy.py:438: def _populate_subdiv_rg_public_holidays(self):
	countries\italy.py:441: def _populate_subdiv_ri_public_holidays(self):
	countries\italy.py:444: def _populate_subdiv_rm_public_holidays(self):
	countries\italy.py:447: def _populate_subdiv_rn_public_holidays(self):
	countries\italy.py:450: def _populate_subdiv_ro_public_holidays(self):
	countries\italy.py:453: def _populate_subdiv_sa_public_holidays(self):
	countries\italy.py:456: def _populate_subdiv_si_public_holidays(self):
	countries\italy.py:459: def _populate_subdiv_so_public_holidays(self):
	countries\italy.py:462: def _populate_subdiv_sp_public_holidays(self):
	countries\italy.py:465: def _populate_subdiv_sr_public_holidays(self):
	countries\italy.py:468: def _populate_subdiv_ss_public_holidays(self):
	countries\italy.py:471: def _populate_subdiv_su_public_holidays(self):
	countries\italy.py:474: def _populate_subdiv_sv_public_holidays(self):
	countries\italy.py:477: def _populate_subdiv_ta_public_holidays(self):
	countries\italy.py:480: def _populate_subdiv_te_public_holidays(self):
	countries\italy.py:483: def _populate_subdiv_tn_public_holidays(self):
	countries\italy.py:486: def _populate_subdiv_to_public_holidays(self):
	countries\italy.py:489: def _populate_subdiv_tp_public_holidays(self):
	countries\italy.py:492: def _populate_subdiv_tr_public_holidays(self):
	countries\italy.py:495: def _populate_subdiv_ts_public_holidays(self):
	countries\italy.py:498: def _populate_subdiv_tv_public_holidays(self):
	countries\italy.py:501: def _populate_subdiv_ud_public_holidays(self):
	countries\italy.py:504: def _populate_subdiv_va_public_holidays(self):
	countries\italy.py:507: def _populate_subdiv_vb_public_holidays(self):
	countries\italy.py:510: def _populate_subdiv_vc_public_holidays(self):
	countries\italy.py:513: def _populate_subdiv_ve_public_holidays(self):
	countries\italy.py:516: def _populate_subdiv_vi_public_holidays(self):
	countries\italy.py:519: def _populate_subdiv_vr_public_holidays(self):
	countries\italy.py:522: def _populate_subdiv_vt_public_holidays(self):
	countries\italy.py:525: def _populate_subdiv_vv_public_holidays(self):
	countries\italy.py:528: def _populate_subdiv_andria_public_holidays(self):
	countries\italy.py:531: def _populate_subdiv_barletta_public_holidays(self):
	countries\italy.py:534: def _populate_subdiv_cesena_public_holidays(self):
	countries\italy.py:537: def _populate_subdiv_forli_public_holidays(self):
	countries\italy.py:540: def _populate_subdiv_pesaro_public_holidays(self):
	countries\italy.py:543: def _populate_subdiv_trani_public_holidays(self):
	countries\italy.py:546: def _populate_subdiv_urbino_public_holidays(self):
	countries\italy.py:550: class IT(Italy):
(call) countries\italy.py:550: IT
	countries\italy.py:550: class IT(Italy):
	countries\italy.py:551: pass
	countries\italy.py:554: class ITA(Italy):
(call) countries\italy.py:554: ITA
	countries\italy.py:554: class ITA(Italy):
	countries\italy.py:555: pass
	countries\__init__.py:81: from .jamaica import Jamaica, JM, JAM
(call) countries\jamaica.py:0: <module>
	countries\jamaica.py:12: from holidays.groups import ChristianHolidays, InternationalHolidays
	countries\jamaica.py:13: from holidays.observed_holiday_base import (
	countries\jamaica.py:21: class Jamaica(ObservedHolidayBase, ChristianHolidays, InternationalHolidays):
(call) countries\jamaica.py:21: Jamaica
	countries\jamaica.py:21: class Jamaica(ObservedHolidayBase, ChristianHolidays, InternationalHolidays):
	countries\jamaica.py:22: """
	countries\jamaica.py:27: country = "JM"
	countries\jamaica.py:28: observed_label = "%s (observed)"
	countries\jamaica.py:30: def __init__(self, *args, **kwargs):
	countries\jamaica.py:36: def _populate_public_holidays(self):
	countries\jamaica.py:71: class JM(Jamaica):
(call) countries\jamaica.py:71: JM
	countries\jamaica.py:71: class JM(Jamaica):
	countries\jamaica.py:72: pass
	countries\jamaica.py:75: class JAM(Jamaica):
(call) countries\jamaica.py:75: JAM
	countries\jamaica.py:75: class JAM(Jamaica):
	countries\jamaica.py:76: pass
	countries\__init__.py:82: from .japan import Japan, JP, JPN
(call) countries\japan.py:0: <module>
	countries\japan.py:12: from datetime import date
	countries\japan.py:13: from datetime import timedelta as td
	countries\japan.py:14: from gettext import gettext as tr
	countries\japan.py:15: from typing import Tuple
	countries\japan.py:17: from holidays.calendars.gregorian import FEB, MAR, APR, MAY, JUN, JUL, AUG, SEP, OCT, NOV
	countries\japan.py:18: from holidays.constants import BANK, PUBLIC
	countries\japan.py:19: from holidays.groups import InternationalHolidays, StaticHolidays
	countries\japan.py:20: from holidays.helpers import _normalize_tuple
	countries\japan.py:21: from holidays.holiday_base import HolidayBase
	countries\japan.py:24: class Japan(HolidayBase, InternationalHolidays, StaticHolidays):
(call) countries\japan.py:24: Japan
	countries\japan.py:24: class Japan(HolidayBase, InternationalHolidays, StaticHolidays):
	countries\japan.py:25: """
	countries\japan.py:32: country = "JP"
	countries\japan.py:33: default_language = "ja"
	countries\japan.py:34: supported_categories = (BANK, PUBLIC)
	countries\japan.py:35: supported_languages = ("en_US", "ja", "th")
	countries\japan.py:37: def __init__(self, *args, **kwargs) -> None:
	countries\japan.py:42: def _populate_public_holidays(self):
	countries\japan.py:190: def _populate_bank_holidays(self):
	countries\japan.py:200: @property
	countries\japan.py:201: def _vernal_equinox_date(self) -> Tuple[int, int]:
	countries\japan.py:200: @property
	countries\japan.py:201: def _vernal_equinox_date(self) -> Tuple[int, int]:
	countries\japan.py:214: @property
	countries\japan.py:215: def _autumnal_equinox_date(self) -> Tuple[int, int]:
	countries\japan.py:214: @property
	countries\japan.py:215: def _autumnal_equinox_date(self) -> Tuple[int, int]:
	countries\japan.py:228: class JP(Japan):
(call) countries\japan.py:228: JP
	countries\japan.py:228: class JP(Japan):
	countries\japan.py:229: pass
	countries\japan.py:232: class JPN(Japan):
(call) countries\japan.py:232: JPN
	countries\japan.py:232: class JPN(Japan):
	countries\japan.py:233: pass
	countries\japan.py:236: class JapanStaticHolidays:
(call) countries\japan.py:236: JapanStaticHolidays
	countries\japan.py:236: class JapanStaticHolidays:
	countries\japan.py:238: 1959: (APR, 10, tr("結婚の儀")),  # The Crown Prince marriage ceremony.
	countries\japan.py:239: 1989: (FEB, 24, tr("大喪の礼")),  # State Funeral of Emperor Shōwa.
	countries\japan.py:240: 1990: (NOV, 12, tr("即位礼正殿の儀")),  # Enthronement ceremony.
	countries\japan.py:241: 1993: (JUN, 9, tr("結婚の儀")),  # The Crown Prince marriage ceremony.
	countries\japan.py:243: (MAY, 1, tr("天皇の即位の日")),  # Enthronement day.
	countries\japan.py:244: (OCT, 22, tr("即位礼正殿の儀が行われる日")),  # Enthronement ceremony.
	countries\japan.py:242: 2019: (
	countries\japan.py:237: special_public_holidays = {
	countries\__init__.py:83: from .kazakhstan import Kazakhstan, KZ, KAZ
(call) countries\kazakhstan.py:0: <module>
	countries\kazakhstan.py:12: from holidays.calendars.julian import JULIAN_CALENDAR
	countries\kazakhstan.py:13: from holidays.groups import ChristianHolidays, InternationalHolidays, IslamicHolidays
	countries\kazakhstan.py:14: from holidays.observed_holiday_base import ObservedHolidayBase, SAT_SUN_TO_NEXT_WORKDAY
	countries\kazakhstan.py:17: class Kazakhstan(ObservedHolidayBase, ChristianHolidays, InternationalHolidays, IslamicHolidays):
(call) countries\kazakhstan.py:17: Kazakhstan
	countries\kazakhstan.py:17: class Kazakhstan(ObservedHolidayBase, ChristianHolidays, InternationalHolidays, IslamicHolidays):
	countries\kazakhstan.py:18: """
	countries\kazakhstan.py:26: country = "KZ"
	countries\kazakhstan.py:27: observed_label = "%s (observed)"
	countries\kazakhstan.py:29: def __init__(self, *args, **kwargs):
	countries\kazakhstan.py:37: def _populate_public_holidays(self):
	countries\kazakhstan.py:106: class KZ(Kazakhstan):
(call) countries\kazakhstan.py:106: KZ
	countries\kazakhstan.py:106: class KZ(Kazakhstan):
	countries\kazakhstan.py:107: pass
	countries\kazakhstan.py:110: class KAZ(Kazakhstan):
(call) countries\kazakhstan.py:110: KAZ
	countries\kazakhstan.py:110: class KAZ(Kazakhstan):
	countries\kazakhstan.py:111: pass
	countries\__init__.py:84: from .kenya import Kenya, KE, KEN
(call) countries\kenya.py:0: <module>
	countries\kenya.py:12: from holidays.calendars.gregorian import FEB, APR, AUG, SEP
	countries\kenya.py:13: from holidays.groups import ChristianHolidays, InternationalHolidays, StaticHolidays
	countries\kenya.py:14: from holidays.observed_holiday_base import ObservedHolidayBase, SUN_TO_NEXT_MON, SUN_TO_NEXT_TUE
	countries\kenya.py:17: class Kenya(ObservedHolidayBase, ChristianHolidays, InternationalHolidays, StaticHolidays):
(call) countries\kenya.py:17: Kenya
	countries\kenya.py:17: class Kenya(ObservedHolidayBase, ChristianHolidays, InternationalHolidays, StaticHolidays):
	countries\kenya.py:18: """
	countries\kenya.py:24: country = "KE"
	countries\kenya.py:25: observed_label = "%s (observed)"
	countries\kenya.py:27: def __init__(self, *args, **kwargs):
	countries\kenya.py:34: def _populate_public_holidays(self):
	countries\kenya.py:75: class KE(Kenya):
(call) countries\kenya.py:75: KE
	countries\kenya.py:75: class KE(Kenya):
	countries\kenya.py:76: pass
	countries\kenya.py:79: class KEN(Kenya):
(call) countries\kenya.py:79: KEN
	countries\kenya.py:79: class KEN(Kenya):
	countries\kenya.py:80: pass
	countries\kenya.py:83: class KenyaStaticHolidays:
(call) countries\kenya.py:83: KenyaStaticHolidays
	countries\kenya.py:83: class KenyaStaticHolidays:
	countries\kenya.py:85: 2020: (FEB, 11, "President Moi Celebration of Life Day"),
	countries\kenya.py:87: (APR, 29, "State Funeral for Former President Mwai Kibaki"),
	countries\kenya.py:88: (AUG, 9, "Election Day"),
	countries\kenya.py:89: (SEP, 10, "Day of Mourning for Queen Elizabeth II"),
	countries\kenya.py:90: (SEP, 11, "Day of Mourning for Queen Elizabeth II"),
	countries\kenya.py:91: (SEP, 12, "Day of Mourning for Queen Elizabeth II"),
	countries\kenya.py:92: (SEP, 13, "Inauguration Day"),
	countries\kenya.py:86: 2022: (
	countries\kenya.py:84: special_public_holidays = {
	countries\__init__.py:85: from .kyrgyzstan import Kyrgyzstan, KG, KGZ
(call) countries\kyrgyzstan.py:0: <module>
	countries\kyrgyzstan.py:12: from holidays.calendars.julian import JULIAN_CALENDAR
	countries\kyrgyzstan.py:13: from holidays.groups import ChristianHolidays, IslamicHolidays, InternationalHolidays
	countries\kyrgyzstan.py:14: from holidays.holiday_base import HolidayBase
	countries\kyrgyzstan.py:17: class Kyrgyzstan(HolidayBase, ChristianHolidays, InternationalHolidays, IslamicHolidays):
(call) countries\kyrgyzstan.py:17: Kyrgyzstan
	countries\kyrgyzstan.py:17: class Kyrgyzstan(HolidayBase, ChristianHolidays, InternationalHolidays, IslamicHolidays):
	countries\kyrgyzstan.py:18: """
	countries\kyrgyzstan.py:25: country = "KG"
	countries\kyrgyzstan.py:27: def __init__(self, *args, **kwargs):
	countries\kyrgyzstan.py:33: def _populate_public_holidays(self):
	countries\kyrgyzstan.py:83: class KG(Kyrgyzstan):
(call) countries\kyrgyzstan.py:83: KG
	countries\kyrgyzstan.py:83: class KG(Kyrgyzstan):
	countries\kyrgyzstan.py:84: pass
	countries\kyrgyzstan.py:87: class KGZ(Kyrgyzstan):
(call) countries\kyrgyzstan.py:87: KGZ
	countries\kyrgyzstan.py:87: class KGZ(Kyrgyzstan):
	countries\kyrgyzstan.py:88: pass
	countries\__init__.py:86: from .laos import Laos, LA, LAO
(call) countries\laos.py:0: <module>
	countries\laos.py:12: from gettext import gettext as tr
	countries\laos.py:14: from holidays.calendars.gregorian import JAN, MAR, APR, MAY, JUL, OCT, DEC
	countries\laos.py:15: from holidays.calendars.thai import KHMER_CALENDAR
	countries\laos.py:16: from holidays.constants import BANK, PUBLIC, SCHOOL, WORKDAY
	countries\laos.py:17: from holidays.groups import InternationalHolidays, ThaiCalendarHolidays, StaticHolidays
	countries\laos.py:18: from holidays.observed_holiday_base import (
	countries\laos.py:28: class Laos(ObservedHolidayBase, InternationalHolidays, StaticHolidays, ThaiCalendarHolidays):
(call) countries\laos.py:28: Laos
	countries\laos.py:28: class Laos(ObservedHolidayBase, InternationalHolidays, StaticHolidays, ThaiCalendarHolidays):
	countries\laos.py:29: """
	countries\laos.py:66: country = "LA"
	countries\laos.py:67: supported_categories = (BANK, PUBLIC, SCHOOL, WORKDAY)
	countries\laos.py:68: default_language = "lo"
	countries\laos.py:70: observed_label = tr("ພັກຊົດເຊີຍ%s")
	countries\laos.py:71: supported_languages = ("en_US", "lo", "th")
	countries\laos.py:73: def __init__(self, *args, **kwargs):
	countries\laos.py:81: def _populate_bank_holidays(self):
	countries\laos.py:130: def _populate_public_holidays(self):
	countries\laos.py:189: def _populate_school_holidays(self):
	countries\laos.py:268: def _populate_workday_holidays(self):
	countries\laos.py:381: class LA(Laos):
(call) countries\laos.py:381: LA
	countries\laos.py:381: class LA(Laos):
	countries\laos.py:382: pass
	countries\laos.py:385: class LAO(Laos):
(call) countries\laos.py:385: LAO
	countries\laos.py:385: class LAO(Laos):
	countries\laos.py:386: pass
	countries\laos.py:389: class LaosStaticHolidays:
(call) countries\laos.py:389: LaosStaticHolidays
	countries\laos.py:389: class LaosStaticHolidays:
	countries\laos.py:393: special_bank_day_off = tr("ມື້ປິດການໃຫ້ບໍລິການຂອງທະນາຄານຕົວແທນ")
	countries\laos.py:396: new_year_day = tr("ວັນປີໃໝ່ສາກົນ")
	countries\laos.py:399: international_womens_rights_day = tr("ວັນແມ່ຍິງສາກົນ")
	countries\laos.py:402: lao_new_year = tr("ບຸນປີໃໝ່ລາວ")
	countries\laos.py:405: lao_new_year_special = tr("ພັກບຸນປີໃໝ່ລາວ")
	countries\laos.py:408: labor_day = tr("ວັນກຳມະກອນສາກົນ")
	countries\laos.py:411: lao_womens_union = tr("ວັນສ້າງຕັ້ງສະຫະພັນແມ່ຍິງລາວ")
	countries\laos.py:414: establishment_day_of_bol = tr("ວັນສ້າງຕັ້ງທະນາຄານແຫ່ງ ສປປ ລາວ")
	countries\laos.py:417: lao_national_day = tr("ວັນຊາດ")
	countries\laos.py:420: 2015: (JAN, 2, special_bank_day_off),
	countries\laos.py:419: special_bank_holidays = {
	countries\laos.py:424: 2017: (OCT, 9, establishment_day_of_bol),
	countries\laos.py:423: special_bank_holidays_observed = {
	countries\laos.py:428: 2015: (APR, 17, lao_new_year_special),
	countries\laos.py:430: (APR, 13, lao_new_year_special),
	countries\laos.py:431: (APR, 18, lao_new_year_special),
	countries\laos.py:429: 2016: (
	countries\laos.py:434: (APR, 13, lao_new_year_special),
	countries\laos.py:435: (APR, 17, lao_new_year_special),
	countries\laos.py:433: 2020: (
	countries\laos.py:427: special_public_holidays = {
	countries\laos.py:440: 2011: (APR, 13, lao_new_year),
	countries\laos.py:442: (JAN, 2, new_year_day),
	countries\laos.py:443: (APR, 13, lao_new_year),
	countries\laos.py:444: (APR, 17, lao_new_year),
	countries\laos.py:445: (DEC, 3, lao_national_day),
	countries\laos.py:441: 2012: (
	countries\laos.py:447: 2013: (APR, 17, lao_new_year),
	countries\laos.py:448: 2015: (MAR, 9, international_womens_rights_day),
	countries\laos.py:449: 2016: (MAY, 2, labor_day),
	countries\laos.py:451: (JAN, 2, new_year_day),
	countries\laos.py:452: (APR, 13, lao_new_year),
	countries\laos.py:453: (APR, 17, lao_new_year),
	countries\laos.py:454: (DEC, 4, lao_national_day),
	countries\laos.py:450: 2017: (
	countries\laos.py:439: special_public_holidays_observed = {
	countries\laos.py:459: 2019: (JUL, 22, lao_womens_union),
	countries\laos.py:458: special_workday_holidays_observed = {
	countries\__init__.py:87: from .latvia import Latvia, LV, LVA
(call) countries\latvia.py:0: <module>
	countries\latvia.py:12: from datetime import timedelta as td
	countries\latvia.py:13: from gettext import gettext as tr
	countries\latvia.py:15: from holidays.calendars.gregorian import MAY, JUL, SEP
	countries\latvia.py:16: from holidays.groups import ChristianHolidays, InternationalHolidays, StaticHolidays
	countries\latvia.py:17: from holidays.observed_holiday_base import ObservedHolidayBase, SAT_SUN_TO_NEXT_MON
	countries\latvia.py:20: class Latvia(ObservedHolidayBase, ChristianHolidays, InternationalHolidays, StaticHolidays):
(call) countries\latvia.py:20: Latvia
	countries\latvia.py:20: class Latvia(ObservedHolidayBase, ChristianHolidays, InternationalHolidays, StaticHolidays):
	countries\latvia.py:21: """
	countries\latvia.py:27: country = "LV"
	countries\latvia.py:28: default_language = "lv"
	countries\latvia.py:30: observed_label = tr("%s (brīvdiena)")
	countries\latvia.py:31: supported_languages = ("en_US", "lv", "uk")
	countries\latvia.py:33: def __init__(self, *args, **kwargs):
	countries\latvia.py:40: def _populate_public_holidays(self):
	countries\latvia.py:95: class LV(Latvia):
(call) countries\latvia.py:95: LV
	countries\latvia.py:95: class LV(Latvia):
	countries\latvia.py:96: pass
	countries\latvia.py:99: class LVA(Latvia):
(call) countries\latvia.py:99: LVA
	countries\latvia.py:99: class LVA(Latvia):
	countries\latvia.py:100: pass
	countries\latvia.py:103: class LatviaStaticHolidays:
(call) countries\latvia.py:103: LatviaStaticHolidays
	countries\latvia.py:103: class LatviaStaticHolidays:
	countries\latvia.py:105: song_and_dance_festival_closing_day = tr(
	countries\latvia.py:106: "Vispārējo latviešu Dziesmu un deju svētku noslēguma dienu"
	countries\latvia.py:105: song_and_dance_festival_closing_day = tr(
	countries\latvia.py:109: pope_francis_pastoral_visit_day = tr(
	countries\latvia.py:110: "Viņa Svētības pāvesta Franciska pastorālās vizītes Latvijā diena"
	countries\latvia.py:109: pope_francis_pastoral_visit_day = tr(
	countries\latvia.py:113: hockey_team_win_bronze_medal_day = tr(
	countries\latvia.py:114: "Diena, kad Latvijas hokeja komanda ieguva bronzas medaļu 2023. gada "
	countries\latvia.py:113: hockey_team_win_bronze_medal_day = tr(
	countries\latvia.py:119: (JUL, 9, song_and_dance_festival_closing_day),
	countries\latvia.py:120: (SEP, 24, pope_francis_pastoral_visit_day),
	countries\latvia.py:118: 2018: (
	countries\latvia.py:123: (MAY, 29, hockey_team_win_bronze_medal_day),
	countries\latvia.py:124: (JUL, 10, song_and_dance_festival_closing_day),
	countries\latvia.py:122: 2023: (
	countries\latvia.py:117: special_public_holidays = {
	countries\__init__.py:88: from .lesotho import Lesotho, LS, LSO
(call) countries\lesotho.py:0: <module>
	countries\lesotho.py:12: from holidays.calendars.gregorian import MAY
	countries\lesotho.py:13: from holidays.groups import ChristianHolidays, InternationalHolidays, StaticHolidays
	countries\lesotho.py:14: from holidays.holiday_base import HolidayBase
	countries\lesotho.py:17: class Lesotho(HolidayBase, ChristianHolidays, InternationalHolidays, StaticHolidays):
(call) countries\lesotho.py:17: Lesotho
	countries\lesotho.py:17: class Lesotho(HolidayBase, ChristianHolidays, InternationalHolidays, StaticHolidays):
	countries\lesotho.py:18: """
	countries\lesotho.py:25: country = "LS"
	countries\lesotho.py:27: def __init__(self, *args, **kwargs):
	countries\lesotho.py:33: def _populate_public_holidays(self):
	countries\lesotho.py:81: class LS(Lesotho):
(call) countries\lesotho.py:81: LS
	countries\lesotho.py:81: class LS(Lesotho):
	countries\lesotho.py:82: pass
	countries\lesotho.py:85: class LSO(Lesotho):
(call) countries\lesotho.py:85: LSO
	countries\lesotho.py:85: class LSO(Lesotho):
	countries\lesotho.py:86: pass
	countries\lesotho.py:89: class LesothoStaticHolidays:
(call) countries\lesotho.py:89: LesothoStaticHolidays
	countries\lesotho.py:89: class LesothoStaticHolidays:
	countries\lesotho.py:91: 2002: (MAY, 25, "Africa Day"),
	countries\lesotho.py:90: special_public_holidays = {
	countries\__init__.py:89: from .liechtenstein import Liechtenstein, LI, LIE
(call) countries\liechtenstein.py:0: <module>
	countries\liechtenstein.py:13: from gettext import gettext as tr
	countries\liechtenstein.py:15: from holidays.constants import BANK, PUBLIC
	countries\liechtenstein.py:16: from holidays.groups import ChristianHolidays, InternationalHolidays
	countries\liechtenstein.py:17: from holidays.holiday_base import HolidayBase
	countries\liechtenstein.py:20: class Liechtenstein(HolidayBase, ChristianHolidays, InternationalHolidays):
(call) countries\liechtenstein.py:20: Liechtenstein
	countries\liechtenstein.py:20: class Liechtenstein(HolidayBase, ChristianHolidays, InternationalHolidays):
	countries\liechtenstein.py:21: """
	countries\liechtenstein.py:28: country = "LI"
	countries\liechtenstein.py:29: default_language = "de"
	countries\liechtenstein.py:30: supported_categories = (BANK, PUBLIC)
	countries\liechtenstein.py:31: supported_languages = ("de", "en_US", "uk")
	countries\liechtenstein.py:33: def __init__(self, *args, **kwargs) -> None:
	countries\liechtenstein.py:38: def _populate_public_holidays(self):
	countries\liechtenstein.py:90: def _populate_bank_holidays(self):
	countries\liechtenstein.py:107: class LI(Liechtenstein):
(call) countries\liechtenstein.py:107: LI
	countries\liechtenstein.py:107: class LI(Liechtenstein):
	countries\liechtenstein.py:108: pass
	countries\liechtenstein.py:111: class LIE(Liechtenstein):
(call) countries\liechtenstein.py:111: LIE
	countries\liechtenstein.py:111: class LIE(Liechtenstein):
	countries\liechtenstein.py:112: pass
	countries\__init__.py:90: from .lithuania import Lithuania, LT, LTU
(call) countries\lithuania.py:0: <module>
	countries\lithuania.py:12: from gettext import gettext as tr
	countries\lithuania.py:14: from holidays.groups import ChristianHolidays, InternationalHolidays
	countries\lithuania.py:15: from holidays.holiday_base import HolidayBase
	countries\lithuania.py:18: class Lithuania(HolidayBase, ChristianHolidays, InternationalHolidays):
(call) countries\lithuania.py:18: Lithuania
	countries\lithuania.py:18: class Lithuania(HolidayBase, ChristianHolidays, InternationalHolidays):
	countries\lithuania.py:19: """
	countries\lithuania.py:27: country = "LT"
	countries\lithuania.py:28: default_language = "lt"
	countries\lithuania.py:29: supported_languages = ("en_US", "lt", "uk")
	countries\lithuania.py:31: def __init__(self, *args, **kwargs) -> None:
	countries\lithuania.py:36: def _populate_public_holidays(self) -> None:
	countries\lithuania.py:97: class LT(Lithuania):
(call) countries\lithuania.py:97: LT
	countries\lithuania.py:97: class LT(Lithuania):
	countries\lithuania.py:98: pass
	countries\lithuania.py:101: class LTU(Lithuania):
(call) countries\lithuania.py:101: LTU
	countries\lithuania.py:101: class LTU(Lithuania):
	countries\lithuania.py:102: pass
	countries\__init__.py:91: from .luxembourg import Luxembourg, LU, LUX
(call) countries\luxembourg.py:0: <module>
	countries\luxembourg.py:12: from gettext import gettext as tr
	countries\luxembourg.py:14: from holidays.groups import ChristianHolidays, InternationalHolidays
	countries\luxembourg.py:15: from holidays.holiday_base import HolidayBase
	countries\luxembourg.py:18: class Luxembourg(HolidayBase, ChristianHolidays, InternationalHolidays):
(call) countries\luxembourg.py:18: Luxembourg
	countries\luxembourg.py:18: class Luxembourg(HolidayBase, ChristianHolidays, InternationalHolidays):
	countries\luxembourg.py:19: """
	countries\luxembourg.py:23: country = "LU"
	countries\luxembourg.py:24: default_language = "lb"
	countries\luxembourg.py:25: supported_languages = ("de", "en_US", "fr", "lb", "uk")
	countries\luxembourg.py:27: def __init__(self, *args, **kwargs):
	countries\luxembourg.py:32: def _populate_public_holidays(self):
	countries\luxembourg.py:68: class LU(Luxembourg):
(call) countries\luxembourg.py:68: LU
	countries\luxembourg.py:68: class LU(Luxembourg):
	countries\luxembourg.py:69: pass
	countries\luxembourg.py:72: class LUX(Luxembourg):
(call) countries\luxembourg.py:72: LUX
	countries\luxembourg.py:72: class LUX(Luxembourg):
	countries\luxembourg.py:73: pass
	countries\__init__.py:92: from .madagascar import Madagascar, MG, MDG
(call) countries\madagascar.py:0: <module>
	countries\madagascar.py:12: from datetime import timedelta as td
	countries\madagascar.py:13: from gettext import gettext as tr
	countries\madagascar.py:15: from holidays.calendars.gregorian import MAY, SUN, _get_nth_weekday_of_month
	countries\madagascar.py:16: from holidays.groups import ChristianHolidays, InternationalHolidays
	countries\madagascar.py:17: from holidays.holiday_base import HolidayBase
	countries\madagascar.py:20: class Madagascar(HolidayBase, ChristianHolidays, InternationalHolidays):
(call) countries\madagascar.py:20: Madagascar
	countries\madagascar.py:20: class Madagascar(HolidayBase, ChristianHolidays, InternationalHolidays):
	countries\madagascar.py:21: """
	countries\madagascar.py:27: country = "MG"
	countries\madagascar.py:28: default_language = "mg"
	countries\madagascar.py:29: supported_languages = ("en_US", "mg", "uk")
	countries\madagascar.py:31: def __init__(self, *args, **kwargs):
	countries\madagascar.py:36: def _populate_public_holidays(self):
	countries\madagascar.py:96: class MG(Madagascar):
(call) countries\madagascar.py:96: MG
	countries\madagascar.py:96: class MG(Madagascar):
	countries\madagascar.py:97: pass
	countries\madagascar.py:100: class MDG(Madagascar):
(call) countries\madagascar.py:100: MDG
	countries\madagascar.py:100: class MDG(Madagascar):
	countries\madagascar.py:101: pass
	countries\__init__.py:93: from .malawi import Malawi, MW, MWI
(call) countries\malawi.py:0: <module>
	countries\malawi.py:12: from holidays.groups import ChristianHolidays, InternationalHolidays
	countries\malawi.py:13: from holidays.observed_holiday_base import (
	countries\malawi.py:20: class Malawi(ObservedHolidayBase, ChristianHolidays, InternationalHolidays):
(call) countries\malawi.py:20: Malawi
	countries\malawi.py:20: class Malawi(ObservedHolidayBase, ChristianHolidays, InternationalHolidays):
	countries\malawi.py:21: """
	countries\malawi.py:26: country = "MW"
	countries\malawi.py:27: observed_label = "%s (observed)"
	countries\malawi.py:29: def __init__(self, *args, **kwargs):
	countries\malawi.py:35: def _populate_public_holidays(self):
	countries\malawi.py:63: class MW(Malawi):
(call) countries\malawi.py:63: MW
	countries\malawi.py:63: class MW(Malawi):
	countries\malawi.py:64: pass
	countries\malawi.py:67: class MWI(Malawi):
(call) countries\malawi.py:67: MWI
	countries\malawi.py:67: class MWI(Malawi):
	countries\malawi.py:68: pass
	countries\__init__.py:94: from .malaysia import Malaysia, MY, MYS
(call) countries\malaysia.py:0: <module>
	countries\malaysia.py:12: from holidays.calendars import (
	countries\malaysia.py:18: from holidays.calendars.gregorian import (
	countries\malaysia.py:34: from holidays.groups import (
	countries\malaysia.py:43: from holidays.observed_holiday_base import (
	countries\malaysia.py:51: class Malaysia(
	countries\malaysia.py:52: ObservedHolidayBase,
	countries\malaysia.py:53: BuddhistCalendarHolidays,
	countries\malaysia.py:54: ChineseCalendarHolidays,
	countries\malaysia.py:55: ChristianHolidays,
	countries\malaysia.py:56: HinduCalendarHolidays,
	countries\malaysia.py:57: InternationalHolidays,
	countries\malaysia.py:58: IslamicHolidays,
	countries\malaysia.py:59: StaticHolidays,
	countries\malaysia.py:51: class Malaysia(
(call) countries\malaysia.py:51: Malaysia
	countries\malaysia.py:51: class Malaysia(
	countries\malaysia.py:61: country = "MY"
	countries\malaysia.py:62: observed_label = "%s (in lieu)"
	countries\malaysia.py:63: subdivisions = (
	countries\malaysia.py:82: def __init__(self, *args, **kwargs):
	countries\malaysia.py:139: def _populate_public_holidays(self):
	countries\malaysia.py:393: class MY(Malaysia):
(call) countries\malaysia.py:393: MY
	countries\malaysia.py:393: class MY(Malaysia):
	countries\malaysia.py:394: pass
	countries\malaysia.py:397: class MYS(Malaysia):
(call) countries\malaysia.py:397: MYS
	countries\malaysia.py:397: class MYS(Malaysia):
	countries\malaysia.py:398: pass
	countries\malaysia.py:401: class MalaysiaBuddhistHolidays(_CustomBuddhistHolidays):
(call) countries\malaysia.py:401: MalaysiaBuddhistHolidays
	countries\malaysia.py:401: class MalaysiaBuddhistHolidays(_CustomBuddhistHolidays):
	countries\malaysia.py:402: VESAK_MAY_DATES = {
	countries\malaysia.py:403: 2001: (MAY, 7),
	countries\malaysia.py:402: VESAK_MAY_DATES = {
	countries\malaysia.py:404: 2002: (MAY, 27),
	countries\malaysia.py:402: VESAK_MAY_DATES = {
	countries\malaysia.py:405: 2003: (MAY, 15),
	countries\malaysia.py:402: VESAK_MAY_DATES = {
	countries\malaysia.py:406: 2004: (MAY, 3),
	countries\malaysia.py:402: VESAK_MAY_DATES = {
	countries\malaysia.py:407: 2005: (MAY, 22),
	countries\malaysia.py:402: VESAK_MAY_DATES = {
	countries\malaysia.py:408: 2006: (MAY, 12),
	countries\malaysia.py:402: VESAK_MAY_DATES = {
	countries\malaysia.py:409: 2007: (MAY, 1),
	countries\malaysia.py:402: VESAK_MAY_DATES = {
	countries\malaysia.py:410: 2008: (MAY, 19),
	countries\malaysia.py:402: VESAK_MAY_DATES = {
	countries\malaysia.py:411: 2009: (MAY, 9),
	countries\malaysia.py:402: VESAK_MAY_DATES = {
	countries\malaysia.py:412: 2010: (MAY, 28),
	countries\malaysia.py:402: VESAK_MAY_DATES = {
	countries\malaysia.py:413: 2011: (MAY, 17),
	countries\malaysia.py:402: VESAK_MAY_DATES = {
	countries\malaysia.py:414: 2012: (MAY, 5),
	countries\malaysia.py:402: VESAK_MAY_DATES = {
	countries\malaysia.py:415: 2013: (MAY, 24),
	countries\malaysia.py:402: VESAK_MAY_DATES = {
	countries\malaysia.py:416: 2014: (MAY, 13),
	countries\malaysia.py:402: VESAK_MAY_DATES = {
	countries\malaysia.py:417: 2015: (MAY, 3),
	countries\malaysia.py:402: VESAK_MAY_DATES = {
	countries\malaysia.py:418: 2016: (MAY, 21),
	countries\malaysia.py:402: VESAK_MAY_DATES = {
	countries\malaysia.py:419: 2017: (MAY, 10),
	countries\malaysia.py:402: VESAK_MAY_DATES = {
	countries\malaysia.py:420: 2018: (MAY, 29),
	countries\malaysia.py:421: 2019: (MAY, 19),
	countries\malaysia.py:422: 2020: (MAY, 7),
	countries\malaysia.py:423: 2021: (MAY, 26),
	countries\malaysia.py:424: 2022: (MAY, 15),
	countries\malaysia.py:425: 2023: (MAY, 4),
	countries\malaysia.py:426: 2024: (MAY, 22),
	countries\malaysia.py:402: VESAK_MAY_DATES = {
(call) calendars\custom.py:24: __new__
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
(call) calendars\custom.py:25: <genexpr>
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:26: namespace[f"{attr}_{_CustomCalendar.CUSTOM_ATTR_POSTFIX}"] = namespace[attr]
	calendars\custom.py:27: del namespace[attr]
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
(call) calendars\custom.py:25: <genexpr>
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:29: return super().__new__(cls, name, bases, namespace)
	countries\malaysia.py:430: class MalaysiaChineseHolidays(_CustomChineseHolidays):
(call) countries\malaysia.py:430: MalaysiaChineseHolidays
	countries\malaysia.py:430: class MalaysiaChineseHolidays(_CustomChineseHolidays):
	countries\malaysia.py:431: LUNAR_NEW_YEAR_DATES = {
	countries\malaysia.py:432: 2001: (JAN, 24),
	countries\malaysia.py:431: LUNAR_NEW_YEAR_DATES = {
	countries\malaysia.py:433: 2002: (FEB, 12),
	countries\malaysia.py:431: LUNAR_NEW_YEAR_DATES = {
	countries\malaysia.py:434: 2003: (FEB, 1),
	countries\malaysia.py:431: LUNAR_NEW_YEAR_DATES = {
	countries\malaysia.py:435: 2004: (JAN, 22),
	countries\malaysia.py:431: LUNAR_NEW_YEAR_DATES = {
	countries\malaysia.py:436: 2005: (FEB, 9),
	countries\malaysia.py:431: LUNAR_NEW_YEAR_DATES = {
	countries\malaysia.py:437: 2006: (JAN, 29),
	countries\malaysia.py:431: LUNAR_NEW_YEAR_DATES = {
	countries\malaysia.py:438: 2007: (FEB, 18),
	countries\malaysia.py:431: LUNAR_NEW_YEAR_DATES = {
	countries\malaysia.py:439: 2008: (FEB, 7),
	countries\malaysia.py:431: LUNAR_NEW_YEAR_DATES = {
	countries\malaysia.py:440: 2009: (JAN, 26),
	countries\malaysia.py:431: LUNAR_NEW_YEAR_DATES = {
	countries\malaysia.py:441: 2010: (FEB, 14),
	countries\malaysia.py:431: LUNAR_NEW_YEAR_DATES = {
	countries\malaysia.py:442: 2011: (FEB, 3),
	countries\malaysia.py:431: LUNAR_NEW_YEAR_DATES = {
	countries\malaysia.py:443: 2012: (JAN, 23),
	countries\malaysia.py:431: LUNAR_NEW_YEAR_DATES = {
	countries\malaysia.py:444: 2013: (FEB, 10),
	countries\malaysia.py:431: LUNAR_NEW_YEAR_DATES = {
	countries\malaysia.py:445: 2014: (JAN, 31),
	countries\malaysia.py:431: LUNAR_NEW_YEAR_DATES = {
	countries\malaysia.py:446: 2015: (FEB, 19),
	countries\malaysia.py:431: LUNAR_NEW_YEAR_DATES = {
	countries\malaysia.py:447: 2016: (FEB, 8),
	countries\malaysia.py:431: LUNAR_NEW_YEAR_DATES = {
	countries\malaysia.py:448: 2017: (JAN, 28),
	countries\malaysia.py:431: LUNAR_NEW_YEAR_DATES = {
	countries\malaysia.py:449: 2018: (FEB, 16),
	countries\malaysia.py:450: 2019: (FEB, 5),
	countries\malaysia.py:451: 2020: (JAN, 25),
	countries\malaysia.py:452: 2021: (FEB, 12),
	countries\malaysia.py:453: 2022: (FEB, 1),
	countries\malaysia.py:454: 2023: (JAN, 22),
	countries\malaysia.py:455: 2024: (FEB, 10),
	countries\malaysia.py:431: LUNAR_NEW_YEAR_DATES = {
(call) calendars\custom.py:24: __new__
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
(call) calendars\custom.py:25: <genexpr>
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:26: namespace[f"{attr}_{_CustomCalendar.CUSTOM_ATTR_POSTFIX}"] = namespace[attr]
	calendars\custom.py:27: del namespace[attr]
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
(call) calendars\custom.py:25: <genexpr>
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:29: return super().__new__(cls, name, bases, namespace)
	countries\malaysia.py:459: class MalaysiaHinduHolidays(_CustomHinduHolidays):
(call) countries\malaysia.py:459: MalaysiaHinduHolidays
	countries\malaysia.py:459: class MalaysiaHinduHolidays(_CustomHinduHolidays):
	countries\malaysia.py:460: DIWALI_DATES = {
	countries\malaysia.py:461: 2001: (NOV, 14),
	countries\malaysia.py:460: DIWALI_DATES = {
	countries\malaysia.py:462: 2002: (NOV, 3),
	countries\malaysia.py:460: DIWALI_DATES = {
	countries\malaysia.py:463: 2003: (OCT, 23),
	countries\malaysia.py:460: DIWALI_DATES = {
	countries\malaysia.py:464: 2004: (NOV, 11),
	countries\malaysia.py:460: DIWALI_DATES = {
	countries\malaysia.py:465: 2005: (NOV, 1),
	countries\malaysia.py:460: DIWALI_DATES = {
	countries\malaysia.py:466: 2006: (OCT, 21),
	countries\malaysia.py:460: DIWALI_DATES = {
	countries\malaysia.py:467: 2007: (NOV, 8),
	countries\malaysia.py:460: DIWALI_DATES = {
	countries\malaysia.py:468: 2008: (OCT, 27),
	countries\malaysia.py:460: DIWALI_DATES = {
	countries\malaysia.py:469: 2009: (OCT, 17),
	countries\malaysia.py:460: DIWALI_DATES = {
	countries\malaysia.py:470: 2010: (NOV, 5),
	countries\malaysia.py:460: DIWALI_DATES = {
	countries\malaysia.py:471: 2011: (OCT, 26),
	countries\malaysia.py:460: DIWALI_DATES = {
	countries\malaysia.py:472: 2012: (NOV, 13),
	countries\malaysia.py:460: DIWALI_DATES = {
	countries\malaysia.py:473: 2013: (NOV, 2),
	countries\malaysia.py:460: DIWALI_DATES = {
	countries\malaysia.py:474: 2014: (OCT, 22),
	countries\malaysia.py:460: DIWALI_DATES = {
	countries\malaysia.py:475: 2015: (NOV, 10),
	countries\malaysia.py:460: DIWALI_DATES = {
	countries\malaysia.py:476: 2016: (OCT, 29),
	countries\malaysia.py:460: DIWALI_DATES = {
	countries\malaysia.py:477: 2017: (OCT, 18),
	countries\malaysia.py:460: DIWALI_DATES = {
	countries\malaysia.py:478: 2018: (NOV, 6),
	countries\malaysia.py:479: 2019: (OCT, 27),
	countries\malaysia.py:480: 2020: (NOV, 14),
	countries\malaysia.py:481: 2021: (NOV, 4),
	countries\malaysia.py:482: 2022: (OCT, 24),
	countries\malaysia.py:483: 2023: (NOV, 12),
	countries\malaysia.py:484: 2024: (OCT, 31),
	countries\malaysia.py:460: DIWALI_DATES = {
	countries\malaysia.py:488: 2018: (JAN, 31),
	countries\malaysia.py:489: 2019: (JAN, 21),
	countries\malaysia.py:490: 2020: (FEB, 8),
	countries\malaysia.py:491: 2021: (JAN, 28),
	countries\malaysia.py:492: 2022: (JAN, 18),
	countries\malaysia.py:493: 2023: (FEB, 5),
	countries\malaysia.py:494: 2024: (JAN, 25),
	countries\malaysia.py:495: 2025: (FEB, 11),
	countries\malaysia.py:496: 2026: (FEB, 1),
	countries\malaysia.py:497: 2027: (JAN, 22),
	countries\malaysia.py:487: THAIPUSAM_DATES = {
(call) calendars\custom.py:24: __new__
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
(call) calendars\custom.py:25: <genexpr>
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:26: namespace[f"{attr}_{_CustomCalendar.CUSTOM_ATTR_POSTFIX}"] = namespace[attr]
	calendars\custom.py:27: del namespace[attr]
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
(call) calendars\custom.py:25: <genexpr>
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:26: namespace[f"{attr}_{_CustomCalendar.CUSTOM_ATTR_POSTFIX}"] = namespace[attr]
	calendars\custom.py:27: del namespace[attr]
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
(call) calendars\custom.py:25: <genexpr>
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:29: return super().__new__(cls, name, bases, namespace)
	countries\malaysia.py:501: class MalaysiaIslamicHolidays(_CustomIslamicHolidays):
(call) countries\malaysia.py:501: MalaysiaIslamicHolidays
	countries\malaysia.py:501: class MalaysiaIslamicHolidays(_CustomIslamicHolidays):
	countries\malaysia.py:502: EID_AL_ADHA_DATES = {
	countries\malaysia.py:503: 2001: (MAR, 6),
	countries\malaysia.py:502: EID_AL_ADHA_DATES = {
	countries\malaysia.py:504: 2002: (FEB, 23),
	countries\malaysia.py:502: EID_AL_ADHA_DATES = {
	countries\malaysia.py:505: 2003: (FEB, 12),
	countries\malaysia.py:502: EID_AL_ADHA_DATES = {
	countries\malaysia.py:506: 2004: (FEB, 2),
	countries\malaysia.py:502: EID_AL_ADHA_DATES = {
	countries\malaysia.py:507: 2005: (JAN, 21),
	countries\malaysia.py:502: EID_AL_ADHA_DATES = {
	countries\malaysia.py:508: 2006: ((JAN, 10), (DEC, 31)),
	countries\malaysia.py:502: EID_AL_ADHA_DATES = {
	countries\malaysia.py:509: 2007: (DEC, 20),
	countries\malaysia.py:502: EID_AL_ADHA_DATES = {
	countries\malaysia.py:510: 2008: (DEC, 9),
	countries\malaysia.py:502: EID_AL_ADHA_DATES = {
	countries\malaysia.py:511: 2009: (NOV, 28),
	countries\malaysia.py:502: EID_AL_ADHA_DATES = {
	countries\malaysia.py:512: 2010: (NOV, 17),
	countries\malaysia.py:502: EID_AL_ADHA_DATES = {
	countries\malaysia.py:513: 2011: (NOV, 7),
	countries\malaysia.py:502: EID_AL_ADHA_DATES = {
	countries\malaysia.py:514: 2012: (OCT, 26),
	countries\malaysia.py:502: EID_AL_ADHA_DATES = {
	countries\malaysia.py:515: 2013: (OCT, 15),
	countries\malaysia.py:502: EID_AL_ADHA_DATES = {
	countries\malaysia.py:516: 2014: (OCT, 5),
	countries\malaysia.py:502: EID_AL_ADHA_DATES = {
	countries\malaysia.py:517: 2015: (SEP, 24),
	countries\malaysia.py:502: EID_AL_ADHA_DATES = {
	countries\malaysia.py:518: 2016: (SEP, 12),
	countries\malaysia.py:502: EID_AL_ADHA_DATES = {
	countries\malaysia.py:519: 2017: (SEP, 1),
	countries\malaysia.py:502: EID_AL_ADHA_DATES = {
	countries\malaysia.py:520: 2018: (AUG, 22),
	countries\malaysia.py:521: 2019: (AUG, 11),
	countries\malaysia.py:522: 2020: (JUL, 31),
	countries\malaysia.py:523: 2021: (JUL, 20),
	countries\malaysia.py:524: 2022: (JUL, 10),
	countries\malaysia.py:525: 2023: (JUN, 29),
	countries\malaysia.py:526: 2024: (JUN, 17),
	countries\malaysia.py:502: EID_AL_ADHA_DATES = {
	countries\malaysia.py:529: EID_AL_FITR_DATES = {
	countries\malaysia.py:530: 2001: (DEC, 17),
	countries\malaysia.py:529: EID_AL_FITR_DATES = {
	countries\malaysia.py:531: 2002: (DEC, 6),
	countries\malaysia.py:529: EID_AL_FITR_DATES = {
	countries\malaysia.py:532: 2003: (NOV, 26),
	countries\malaysia.py:529: EID_AL_FITR_DATES = {
	countries\malaysia.py:533: 2004: (NOV, 14),
	countries\malaysia.py:529: EID_AL_FITR_DATES = {
	countries\malaysia.py:534: 2005: (NOV, 3),
	countries\malaysia.py:529: EID_AL_FITR_DATES = {
	countries\malaysia.py:535: 2006: (OCT, 24),
	countries\malaysia.py:529: EID_AL_FITR_DATES = {
	countries\malaysia.py:536: 2007: (OCT, 13),
	countries\malaysia.py:529: EID_AL_FITR_DATES = {
	countries\malaysia.py:537: 2008: (OCT, 1),
	countries\malaysia.py:529: EID_AL_FITR_DATES = {
	countries\malaysia.py:538: 2009: (SEP, 20),
	countries\malaysia.py:529: EID_AL_FITR_DATES = {
	countries\malaysia.py:539: 2010: (SEP, 10),
	countries\malaysia.py:529: EID_AL_FITR_DATES = {
	countries\malaysia.py:540: 2011: (AUG, 31),
	countries\malaysia.py:529: EID_AL_FITR_DATES = {
	countries\malaysia.py:541: 2012: (AUG, 19),
	countries\malaysia.py:529: EID_AL_FITR_DATES = {
	countries\malaysia.py:542: 2013: (AUG, 8),
	countries\malaysia.py:529: EID_AL_FITR_DATES = {
	countries\malaysia.py:543: 2014: (JUL, 28),
	countries\malaysia.py:529: EID_AL_FITR_DATES = {
	countries\malaysia.py:544: 2015: (JUL, 17),
	countries\malaysia.py:529: EID_AL_FITR_DATES = {
	countries\malaysia.py:545: 2016: (JUL, 6),
	countries\malaysia.py:529: EID_AL_FITR_DATES = {
	countries\malaysia.py:546: 2017: (JUN, 25),
	countries\malaysia.py:529: EID_AL_FITR_DATES = {
	countries\malaysia.py:547: 2018: (JUN, 15),
	countries\malaysia.py:548: 2019: (JUN, 5),
	countries\malaysia.py:549: 2020: (MAY, 24),
	countries\malaysia.py:550: 2021: (MAY, 13),
	countries\malaysia.py:551: 2022: (MAY, 2),
	countries\malaysia.py:552: 2023: (APR, 22),
	countries\malaysia.py:553: 2024: (APR, 10),
	countries\malaysia.py:529: EID_AL_FITR_DATES = {
	countries\malaysia.py:557: 2011: (JAN, 12),
	countries\malaysia.py:558: 2012: ((JAN, 1), (DEC, 20)),
	countries\malaysia.py:559: 2013: (DEC, 10),
	countries\malaysia.py:560: 2014: (NOV, 29),
	countries\malaysia.py:561: 2015: (NOV, 19),
	countries\malaysia.py:562: 2016: (NOV, 7),
	countries\malaysia.py:563: 2017: (OCT, 27),
	countries\malaysia.py:564: 2018: (OCT, 15),
	countries\malaysia.py:565: 2019: (OCT, 5),
	countries\malaysia.py:566: 2020: (SEP, 24),
	countries\malaysia.py:567: 2021: (SEP, 13),
	countries\malaysia.py:568: 2022: (SEP, 3),
	countries\malaysia.py:569: 2024: (AUG, 11),
	countries\malaysia.py:556: HARI_HOL_JOHOR_DATES = {
	countries\malaysia.py:572: HIJRI_NEW_YEAR_DATES = {
	countries\malaysia.py:573: 2001: (MAR, 26),
	countries\malaysia.py:572: HIJRI_NEW_YEAR_DATES = {
	countries\malaysia.py:574: 2002: (MAR, 15),
	countries\malaysia.py:572: HIJRI_NEW_YEAR_DATES = {
	countries\malaysia.py:575: 2003: (MAR, 5),
	countries\malaysia.py:572: HIJRI_NEW_YEAR_DATES = {
	countries\malaysia.py:576: 2004: (FEB, 22),
	countries\malaysia.py:572: HIJRI_NEW_YEAR_DATES = {
	countries\malaysia.py:577: 2005: (FEB, 10),
	countries\malaysia.py:572: HIJRI_NEW_YEAR_DATES = {
	countries\malaysia.py:578: 2006: (JAN, 31),
	countries\malaysia.py:572: HIJRI_NEW_YEAR_DATES = {
	countries\malaysia.py:579: 2007: (JAN, 20),
	countries\malaysia.py:572: HIJRI_NEW_YEAR_DATES = {
	countries\malaysia.py:580: 2008: ((JAN, 10), (DEC, 29)),
	countries\malaysia.py:572: HIJRI_NEW_YEAR_DATES = {
	countries\malaysia.py:581: 2009: (DEC, 18),
	countries\malaysia.py:572: HIJRI_NEW_YEAR_DATES = {
	countries\malaysia.py:582: 2010: (DEC, 8),
	countries\malaysia.py:572: HIJRI_NEW_YEAR_DATES = {
	countries\malaysia.py:583: 2011: (NOV, 27),
	countries\malaysia.py:572: HIJRI_NEW_YEAR_DATES = {
	countries\malaysia.py:584: 2012: (NOV, 15),
	countries\malaysia.py:572: HIJRI_NEW_YEAR_DATES = {
	countries\malaysia.py:585: 2013: (NOV, 5),
	countries\malaysia.py:572: HIJRI_NEW_YEAR_DATES = {
	countries\malaysia.py:586: 2014: (OCT, 25),
	countries\malaysia.py:572: HIJRI_NEW_YEAR_DATES = {
	countries\malaysia.py:587: 2015: (OCT, 14),
	countries\malaysia.py:572: HIJRI_NEW_YEAR_DATES = {
	countries\malaysia.py:588: 2016: (OCT, 2),
	countries\malaysia.py:572: HIJRI_NEW_YEAR_DATES = {
	countries\malaysia.py:589: 2017: (SEP, 22),
	countries\malaysia.py:572: HIJRI_NEW_YEAR_DATES = {
	countries\malaysia.py:590: 2018: (SEP, 11),
	countries\malaysia.py:591: 2019: (SEP, 1),
	countries\malaysia.py:592: 2020: (AUG, 20),
	countries\malaysia.py:593: 2021: (AUG, 10),
	countries\malaysia.py:594: 2022: (JUL, 30),
	countries\malaysia.py:595: 2024: (JUL, 7),
	countries\malaysia.py:572: HIJRI_NEW_YEAR_DATES = {
	countries\malaysia.py:598: ISRA_AND_MIRAJ_DATES = {
	countries\malaysia.py:599: 2001: (OCT, 15),
	countries\malaysia.py:598: ISRA_AND_MIRAJ_DATES = {
	countries\malaysia.py:600: 2002: (OCT, 4),
	countries\malaysia.py:598: ISRA_AND_MIRAJ_DATES = {
	countries\malaysia.py:601: 2003: (SEP, 24),
	countries\malaysia.py:598: ISRA_AND_MIRAJ_DATES = {
	countries\malaysia.py:602: 2004: (SEP, 12),
	countries\malaysia.py:598: ISRA_AND_MIRAJ_DATES = {
	countries\malaysia.py:603: 2005: (SEP, 1),
	countries\malaysia.py:598: ISRA_AND_MIRAJ_DATES = {
	countries\malaysia.py:604: 2006: (AUG, 22),
	countries\malaysia.py:598: ISRA_AND_MIRAJ_DATES = {
	countries\malaysia.py:605: 2007: (AUG, 11),
	countries\malaysia.py:598: ISRA_AND_MIRAJ_DATES = {
	countries\malaysia.py:606: 2008: (JUL, 31),
	countries\malaysia.py:598: ISRA_AND_MIRAJ_DATES = {
	countries\malaysia.py:607: 2009: (JUL, 20),
	countries\malaysia.py:598: ISRA_AND_MIRAJ_DATES = {
	countries\malaysia.py:608: 2010: (JUL, 9),
	countries\malaysia.py:598: ISRA_AND_MIRAJ_DATES = {
	countries\malaysia.py:609: 2011: (JUN, 29),
	countries\malaysia.py:598: ISRA_AND_MIRAJ_DATES = {
	countries\malaysia.py:610: 2012: (JUN, 17),
	countries\malaysia.py:598: ISRA_AND_MIRAJ_DATES = {
	countries\malaysia.py:611: 2013: (JUN, 6),
	countries\malaysia.py:598: ISRA_AND_MIRAJ_DATES = {
	countries\malaysia.py:612: 2014: (MAY, 27),
	countries\malaysia.py:598: ISRA_AND_MIRAJ_DATES = {
	countries\malaysia.py:613: 2015: (MAY, 16),
	countries\malaysia.py:598: ISRA_AND_MIRAJ_DATES = {
	countries\malaysia.py:614: 2016: (MAY, 5),
	countries\malaysia.py:598: ISRA_AND_MIRAJ_DATES = {
	countries\malaysia.py:615: 2017: (APR, 24),
	countries\malaysia.py:598: ISRA_AND_MIRAJ_DATES = {
	countries\malaysia.py:616: 2018: (APR, 14),
	countries\malaysia.py:617: 2019: (APR, 3),
	countries\malaysia.py:618: 2020: (MAR, 22),
	countries\malaysia.py:619: 2021: (MAR, 11),
	countries\malaysia.py:620: 2022: (MAR, 1),
	countries\malaysia.py:621: 2023: (FEB, 18),
	countries\malaysia.py:622: 2024: (FEB, 8),
	countries\malaysia.py:598: ISRA_AND_MIRAJ_DATES = {
	countries\malaysia.py:625: MAWLID_DATES = {
	countries\malaysia.py:626: 2001: (JUN, 4),
	countries\malaysia.py:625: MAWLID_DATES = {
	countries\malaysia.py:627: 2002: (MAY, 24),
	countries\malaysia.py:625: MAWLID_DATES = {
	countries\malaysia.py:628: 2003: (MAY, 14),
	countries\malaysia.py:625: MAWLID_DATES = {
	countries\malaysia.py:629: 2004: (MAY, 2),
	countries\malaysia.py:625: MAWLID_DATES = {
	countries\malaysia.py:630: 2005: (APR, 21),
	countries\malaysia.py:625: MAWLID_DATES = {
	countries\malaysia.py:631: 2006: (APR, 11),
	countries\malaysia.py:625: MAWLID_DATES = {
	countries\malaysia.py:632: 2007: (MAR, 31),
	countries\malaysia.py:625: MAWLID_DATES = {
	countries\malaysia.py:633: 2008: (MAR, 20),
	countries\malaysia.py:625: MAWLID_DATES = {
	countries\malaysia.py:634: 2009: (MAR, 9),
	countries\malaysia.py:625: MAWLID_DATES = {
	countries\malaysia.py:635: 2010: (FEB, 26),
	countries\malaysia.py:625: MAWLID_DATES = {
	countries\malaysia.py:636: 2011: (FEB, 16),
	countries\malaysia.py:625: MAWLID_DATES = {
	countries\malaysia.py:637: 2012: (FEB, 5),
	countries\malaysia.py:625: MAWLID_DATES = {
	countries\malaysia.py:638: 2013: (JAN, 24),
	countries\malaysia.py:625: MAWLID_DATES = {
	countries\malaysia.py:639: 2014: (JAN, 14),
	countries\malaysia.py:625: MAWLID_DATES = {
	countries\malaysia.py:640: 2015: ((JAN, 3), (DEC, 24)),
	countries\malaysia.py:625: MAWLID_DATES = {
	countries\malaysia.py:641: 2016: (DEC, 12),
	countries\malaysia.py:625: MAWLID_DATES = {
	countries\malaysia.py:642: 2017: (DEC, 1),
	countries\malaysia.py:625: MAWLID_DATES = {
	countries\malaysia.py:643: 2018: (NOV, 20),
	countries\malaysia.py:644: 2019: (NOV, 9),
	countries\malaysia.py:645: 2020: (OCT, 29),
	countries\malaysia.py:646: 2021: (OCT, 19),
	countries\malaysia.py:647: 2022: (OCT, 10),
	countries\malaysia.py:648: 2024: (SEP, 16),
	countries\malaysia.py:625: MAWLID_DATES = {
	countries\malaysia.py:650: NUZUL_AL_QURAN_DATES = {
	countries\malaysia.py:651: 2001: (DEC, 3),
	countries\malaysia.py:650: NUZUL_AL_QURAN_DATES = {
	countries\malaysia.py:652: 2002: (NOV, 22),
	countries\malaysia.py:650: NUZUL_AL_QURAN_DATES = {
	countries\malaysia.py:653: 2003: (NOV, 12),
	countries\malaysia.py:650: NUZUL_AL_QURAN_DATES = {
	countries\malaysia.py:654: 2004: (NOV, 1),
	countries\malaysia.py:650: NUZUL_AL_QURAN_DATES = {
	countries\malaysia.py:655: 2005: (OCT, 21),
	countries\malaysia.py:650: NUZUL_AL_QURAN_DATES = {
	countries\malaysia.py:656: 2006: (OCT, 10),
	countries\malaysia.py:650: NUZUL_AL_QURAN_DATES = {
	countries\malaysia.py:657: 2007: (SEP, 29),
	countries\malaysia.py:650: NUZUL_AL_QURAN_DATES = {
	countries\malaysia.py:658: 2008: (SEP, 18),
	countries\malaysia.py:650: NUZUL_AL_QURAN_DATES = {
	countries\malaysia.py:659: 2009: (SEP, 7),
	countries\malaysia.py:650: NUZUL_AL_QURAN_DATES = {
	countries\malaysia.py:660: 2010: (AUG, 27),
	countries\malaysia.py:650: NUZUL_AL_QURAN_DATES = {
	countries\malaysia.py:661: 2011: (AUG, 17),
	countries\malaysia.py:650: NUZUL_AL_QURAN_DATES = {
	countries\malaysia.py:662: 2012: (AUG, 5),
	countries\malaysia.py:650: NUZUL_AL_QURAN_DATES = {
	countries\malaysia.py:663: 2013: (JUL, 25),
	countries\malaysia.py:650: NUZUL_AL_QURAN_DATES = {
	countries\malaysia.py:664: 2014: (JUL, 15),
	countries\malaysia.py:650: NUZUL_AL_QURAN_DATES = {
	countries\malaysia.py:665: 2015: (JUL, 4),
	countries\malaysia.py:650: NUZUL_AL_QURAN_DATES = {
	countries\malaysia.py:666: 2016: (JUN, 22),
	countries\malaysia.py:650: NUZUL_AL_QURAN_DATES = {
	countries\malaysia.py:667: 2017: (JUN, 12),
	countries\malaysia.py:650: NUZUL_AL_QURAN_DATES = {
	countries\malaysia.py:668: 2018: (JUN, 2),
	countries\malaysia.py:669: 2019: (MAY, 22),
	countries\malaysia.py:670: 2020: (MAY, 10),
	countries\malaysia.py:671: 2021: (APR, 29),
	countries\malaysia.py:672: 2022: (APR, 19),
	countries\malaysia.py:673: 2023: (APR, 8),
	countries\malaysia.py:674: 2024: (MAR, 28),
	countries\malaysia.py:650: NUZUL_AL_QURAN_DATES = {
	countries\malaysia.py:677: RAMADAN_BEGINNING_DATES = {
	countries\malaysia.py:678: 2001: (NOV, 17),
	countries\malaysia.py:677: RAMADAN_BEGINNING_DATES = {
	countries\malaysia.py:679: 2002: (NOV, 6),
	countries\malaysia.py:677: RAMADAN_BEGINNING_DATES = {
	countries\malaysia.py:680: 2003: (OCT, 27),
	countries\malaysia.py:677: RAMADAN_BEGINNING_DATES = {
	countries\malaysia.py:681: 2004: (OCT, 16),
	countries\malaysia.py:677: RAMADAN_BEGINNING_DATES = {
	countries\malaysia.py:682: 2005: (OCT, 5),
	countries\malaysia.py:677: RAMADAN_BEGINNING_DATES = {
	countries\malaysia.py:683: 2006: (SEP, 24),
	countries\malaysia.py:677: RAMADAN_BEGINNING_DATES = {
	countries\malaysia.py:684: 2007: (SEP, 13),
	countries\malaysia.py:677: RAMADAN_BEGINNING_DATES = {
	countries\malaysia.py:685: 2008: (SEP, 2),
	countries\malaysia.py:677: RAMADAN_BEGINNING_DATES = {
	countries\malaysia.py:686: 2009: (AUG, 22),
	countries\malaysia.py:677: RAMADAN_BEGINNING_DATES = {
	countries\malaysia.py:687: 2010: (AUG, 11),
	countries\malaysia.py:677: RAMADAN_BEGINNING_DATES = {
	countries\malaysia.py:688: 2011: (AUG, 1),
	countries\malaysia.py:677: RAMADAN_BEGINNING_DATES = {
	countries\malaysia.py:689: 2012: (JUL, 20),
	countries\malaysia.py:677: RAMADAN_BEGINNING_DATES = {
	countries\malaysia.py:690: 2013: (JUL, 9),
	countries\malaysia.py:677: RAMADAN_BEGINNING_DATES = {
	countries\malaysia.py:691: 2014: (JUN, 29),
	countries\malaysia.py:677: RAMADAN_BEGINNING_DATES = {
	countries\malaysia.py:692: 2015: (JUN, 18),
	countries\malaysia.py:677: RAMADAN_BEGINNING_DATES = {
	countries\malaysia.py:693: 2016: (JUN, 7),
	countries\malaysia.py:677: RAMADAN_BEGINNING_DATES = {
	countries\malaysia.py:694: 2017: (MAY, 27),
	countries\malaysia.py:677: RAMADAN_BEGINNING_DATES = {
	countries\malaysia.py:695: 2018: (MAY, 17),
	countries\malaysia.py:696: 2019: (MAY, 6),
	countries\malaysia.py:697: 2020: (APR, 24),
	countries\malaysia.py:698: 2021: (APR, 13),
	countries\malaysia.py:699: 2022: (APR, 3),
	countries\malaysia.py:700: 2023: (MAR, 23),
	countries\malaysia.py:701: 2024: (MAR, 12),
	countries\malaysia.py:677: RAMADAN_BEGINNING_DATES = {
(call) calendars\custom.py:24: __new__
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
(call) calendars\custom.py:25: <genexpr>
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:26: namespace[f"{attr}_{_CustomCalendar.CUSTOM_ATTR_POSTFIX}"] = namespace[attr]
	calendars\custom.py:27: del namespace[attr]
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
(call) calendars\custom.py:25: <genexpr>
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:26: namespace[f"{attr}_{_CustomCalendar.CUSTOM_ATTR_POSTFIX}"] = namespace[attr]
	calendars\custom.py:27: del namespace[attr]
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
(call) calendars\custom.py:25: <genexpr>
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:26: namespace[f"{attr}_{_CustomCalendar.CUSTOM_ATTR_POSTFIX}"] = namespace[attr]
	calendars\custom.py:27: del namespace[attr]
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
(call) calendars\custom.py:25: <genexpr>
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:26: namespace[f"{attr}_{_CustomCalendar.CUSTOM_ATTR_POSTFIX}"] = namespace[attr]
	calendars\custom.py:27: del namespace[attr]
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
(call) calendars\custom.py:25: <genexpr>
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:26: namespace[f"{attr}_{_CustomCalendar.CUSTOM_ATTR_POSTFIX}"] = namespace[attr]
	calendars\custom.py:27: del namespace[attr]
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
(call) calendars\custom.py:25: <genexpr>
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:26: namespace[f"{attr}_{_CustomCalendar.CUSTOM_ATTR_POSTFIX}"] = namespace[attr]
	calendars\custom.py:27: del namespace[attr]
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
(call) calendars\custom.py:25: <genexpr>
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:26: namespace[f"{attr}_{_CustomCalendar.CUSTOM_ATTR_POSTFIX}"] = namespace[attr]
	calendars\custom.py:27: del namespace[attr]
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
(call) calendars\custom.py:25: <genexpr>
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:26: namespace[f"{attr}_{_CustomCalendar.CUSTOM_ATTR_POSTFIX}"] = namespace[attr]
	calendars\custom.py:27: del namespace[attr]
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
(call) calendars\custom.py:25: <genexpr>
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:29: return super().__new__(cls, name, bases, namespace)
	countries\malaysia.py:705: class MalaysiaStaticHolidays:
(call) countries\malaysia.py:705: MalaysiaStaticHolidays
	countries\malaysia.py:705: class MalaysiaStaticHolidays:
	countries\malaysia.py:710: 1999: (NOV, 29, "Malaysia General Election Holiday"),
	countries\malaysia.py:711: 2018: (MAY, 9, "Malaysia General Election Holiday"),
	countries\malaysia.py:712: 2019: (JUL, 30, "Installation of New King"),
	countries\malaysia.py:706: special_public_holidays = {
	countries\__init__.py:95: from .maldives import Maldives, MV, MDV
(call) countries\maldives.py:0: <module>
	countries\maldives.py:12: from holidays.calendars.gregorian import FRI, SAT
	countries\maldives.py:13: from holidays.groups import InternationalHolidays, IslamicHolidays
	countries\maldives.py:14: from holidays.holiday_base import HolidayBase
	countries\maldives.py:17: class Maldives(HolidayBase, InternationalHolidays, IslamicHolidays):
(call) countries\maldives.py:17: Maldives
	countries\maldives.py:17: class Maldives(HolidayBase, InternationalHolidays, IslamicHolidays):
	countries\maldives.py:18: """
	countries\maldives.py:25: country = "MV"
	countries\maldives.py:26: weekend = {FRI, SAT}
	countries\maldives.py:28: def __init__(self, *args, **kwargs):
	countries\maldives.py:33: def _populate_public_holidays(self):
	countries\maldives.py:80: class MV(Maldives):
(call) countries\maldives.py:80: MV
	countries\maldives.py:80: class MV(Maldives):
	countries\maldives.py:81: pass
	countries\maldives.py:84: class MDV(Maldives):
(call) countries\maldives.py:84: MDV
	countries\maldives.py:84: class MDV(Maldives):
	countries\maldives.py:85: pass
	countries\__init__.py:96: from .malta import Malta, MT, MLT
(call) countries\malta.py:0: <module>
	countries\malta.py:12: from gettext import gettext as tr
	countries\malta.py:14: from holidays.groups import ChristianHolidays, InternationalHolidays
	countries\malta.py:15: from holidays.holiday_base import HolidayBase
	countries\malta.py:18: class Malta(HolidayBase, ChristianHolidays, InternationalHolidays):
(call) countries\malta.py:18: Malta
	countries\malta.py:18: class Malta(HolidayBase, ChristianHolidays, InternationalHolidays):
	countries\malta.py:19: """
	countries\malta.py:39: country = "MT"
	countries\malta.py:40: default_language = "mt"
	countries\malta.py:41: supported_languages = ("en_US", "mt")
	countries\malta.py:43: def __init__(self, *args, **kwargs):
	countries\malta.py:48: def _populate_public_holidays(self):
	countries\malta.py:156: class MT(Malta):
(call) countries\malta.py:156: MT
	countries\malta.py:156: class MT(Malta):
	countries\malta.py:157: pass
	countries\malta.py:160: class MLT(Malta):
(call) countries\malta.py:160: MLT
	countries\malta.py:160: class MLT(Malta):
	countries\malta.py:161: pass
	countries\__init__.py:97: from .marshall_islands import MarshallIslands, MH, MHL, HolidaysMH
(call) countries\marshall_islands.py:0: <module>
	countries\marshall_islands.py:12: import warnings
	countries\marshall_islands.py:14: from holidays.calendars.gregorian import NOV
	countries\marshall_islands.py:15: from holidays.groups import ChristianHolidays, InternationalHolidays, StaticHolidays
	countries\marshall_islands.py:16: from holidays.observed_holiday_base import ObservedHolidayBase, SUN_TO_NEXT_MON
	countries\marshall_islands.py:19: class HolidaysMH(ObservedHolidayBase, ChristianHolidays, InternationalHolidays, StaticHolidays):
(call) countries\marshall_islands.py:19: HolidaysMH
	countries\marshall_islands.py:19: class HolidaysMH(ObservedHolidayBase, ChristianHolidays, InternationalHolidays, StaticHolidays):
	countries\marshall_islands.py:20: """
	countries\marshall_islands.py:25: country = "MH"
	countries\marshall_islands.py:26: observed_label = "%s Holiday"
	countries\marshall_islands.py:28: def __init__(self, *args, **kwargs):
	countries\marshall_islands.py:35: def _populate_public_holidays(self):
	countries\marshall_islands.py:77: class MH(HolidaysMH):
(call) countries\marshall_islands.py:77: MH
	countries\marshall_islands.py:77: class MH(HolidaysMH):
	countries\marshall_islands.py:78: pass
	countries\marshall_islands.py:81: class MHL(HolidaysMH):
(call) countries\marshall_islands.py:81: MHL
	countries\marshall_islands.py:81: class MHL(HolidaysMH):
	countries\marshall_islands.py:82: pass
	countries\marshall_islands.py:85: class MarshallIslands(HolidaysMH):
(call) countries\marshall_islands.py:85: MarshallIslands
	countries\marshall_islands.py:85: class MarshallIslands(HolidaysMH):
	countries\marshall_islands.py:86: pass
	countries\marshall_islands.py:89: class MarshalIslandsStaticHolidays:
(call) countries\marshall_islands.py:89: MarshalIslandsStaticHolidays
	countries\marshall_islands.py:89: class MarshalIslandsStaticHolidays:
	countries\marshall_islands.py:91: election_day = "General Election Day"
	countries\marshall_islands.py:94: 1995: (NOV, 20, election_day),
	countries\marshall_islands.py:95: 1999: (NOV, 22, election_day),
	countries\marshall_islands.py:96: 2003: (NOV, 17, election_day),
	countries\marshall_islands.py:97: 2007: (NOV, 19, election_day),
	countries\marshall_islands.py:98: 2011: (NOV, 21, election_day),
	countries\marshall_islands.py:99: 2015: (NOV, 16, election_day),
	countries\marshall_islands.py:100: 2019: (NOV, 18, election_day),
	countries\marshall_islands.py:101: 2023: (NOV, 20, election_day),
	countries\marshall_islands.py:93: special_public_holidays = {
	countries\__init__.py:98: from .mexico import Mexico, MX, MEX
(call) countries\mexico.py:0: <module>
	countries\mexico.py:12: from gettext import gettext as tr
	countries\mexico.py:14: from holidays.groups import ChristianHolidays, InternationalHolidays
	countries\mexico.py:15: from holidays.holiday_base import HolidayBase
	countries\mexico.py:18: class Mexico(HolidayBase, ChristianHolidays, InternationalHolidays):
(call) countries\mexico.py:18: Mexico
	countries\mexico.py:18: class Mexico(HolidayBase, ChristianHolidays, InternationalHolidays):
	countries\mexico.py:19: """
	countries\mexico.py:27: country = "MX"
	countries\mexico.py:28: default_language = "es"
	countries\mexico.py:29: supported_languages = ("en_US", "es", "uk")
	countries\mexico.py:31: def __init__(self, *args, **kwargs):
	countries\mexico.py:36: def _populate_public_holidays(self):
	countries\mexico.py:81: class MX(Mexico):
(call) countries\mexico.py:81: MX
	countries\mexico.py:81: class MX(Mexico):
	countries\mexico.py:82: pass
	countries\mexico.py:85: class MEX(Mexico):
(call) countries\mexico.py:85: MEX
	countries\mexico.py:85: class MEX(Mexico):
	countries\mexico.py:86: pass
	countries\__init__.py:99: from .moldova import Moldova, MD, MDA
(call) countries\moldova.py:0: <module>
	countries\moldova.py:12: from datetime import timedelta as td
	countries\moldova.py:13: from gettext import gettext as tr
	countries\moldova.py:15: from holidays.calendars.gregorian import GREGORIAN_CALENDAR
	countries\moldova.py:16: from holidays.calendars.julian import JULIAN_CALENDAR
	countries\moldova.py:17: from holidays.groups import ChristianHolidays, InternationalHolidays
	countries\moldova.py:18: from holidays.holiday_base import HolidayBase
	countries\moldova.py:21: class Moldova(HolidayBase, ChristianHolidays, InternationalHolidays):
(call) countries\moldova.py:21: Moldova
	countries\moldova.py:21: class Moldova(HolidayBase, ChristianHolidays, InternationalHolidays):
	countries\moldova.py:22: """
	countries\moldova.py:27: country = "MD"
	countries\moldova.py:28: default_language = "ro"
	countries\moldova.py:29: supported_languages = ("en_US", "ro", "uk")
	countries\moldova.py:31: def __init__(self, *args, **kwargs):
	countries\moldova.py:36: def _populate_public_holidays(self):
	countries\moldova.py:95: class MD(Moldova):
(call) countries\moldova.py:95: MD
	countries\moldova.py:95: class MD(Moldova):
	countries\moldova.py:96: pass
	countries\moldova.py:99: class MDA(Moldova):
(call) countries\moldova.py:99: MDA
	countries\moldova.py:99: class MDA(Moldova):
	countries\moldova.py:100: pass
	countries\__init__.py:100: from .monaco import Monaco, MC, MCO
(call) countries\monaco.py:0: <module>
	countries\monaco.py:12: from gettext import gettext as tr
	countries\monaco.py:14: from holidays.calendars.gregorian import JAN, DEC
	countries\monaco.py:15: from holidays.groups import ChristianHolidays, InternationalHolidays, StaticHolidays
	countries\monaco.py:16: from holidays.observed_holiday_base import ObservedHolidayBase, SUN_TO_NEXT_MON
	countries\monaco.py:19: class Monaco(ObservedHolidayBase, ChristianHolidays, InternationalHolidays, StaticHolidays):
(call) countries\monaco.py:19: Monaco
	countries\monaco.py:19: class Monaco(ObservedHolidayBase, ChristianHolidays, InternationalHolidays, StaticHolidays):
	countries\monaco.py:20: """
	countries\monaco.py:25: country = "MC"
	countries\monaco.py:26: default_language = "fr"
	countries\monaco.py:28: observed_label = tr("%s (observé)")
	countries\monaco.py:29: supported_languages = ("en_US", "fr", "uk")
	countries\monaco.py:31: def __init__(self, *args, **kwargs):
	countries\monaco.py:38: def _populate_public_holidays(self):
	countries\monaco.py:80: class MC(Monaco):
(call) countries\monaco.py:80: MC
	countries\monaco.py:80: class MC(Monaco):
	countries\monaco.py:81: pass
	countries\monaco.py:84: class MCO(Monaco):
(call) countries\monaco.py:84: MCO
	countries\monaco.py:84: class MCO(Monaco):
	countries\monaco.py:85: pass
	countries\monaco.py:88: class MonacoStaticHolidays:
(call) countries\monaco.py:88: MonacoStaticHolidays
	countries\monaco.py:88: class MonacoStaticHolidays:
	countries\monaco.py:91: 2015: (JAN, 7, tr("Jour férié")),
	countries\monaco.py:89: special_public_holidays = {
	countries\__init__.py:101: from .montenegro import Montenegro, ME, MNE
(call) countries\montenegro.py:0: <module>
	countries\montenegro.py:12: from holidays.calendars.julian import JULIAN_CALENDAR
	countries\montenegro.py:13: from holidays.groups import ChristianHolidays, InternationalHolidays
	countries\montenegro.py:14: from holidays.observed_holiday_base import ObservedHolidayBase, SUN_TO_NEXT_MON, SUN_TO_NEXT_TUE
	countries\montenegro.py:17: class Montenegro(ObservedHolidayBase, ChristianHolidays, InternationalHolidays):
(call) countries\montenegro.py:17: Montenegro
	countries\montenegro.py:17: class Montenegro(ObservedHolidayBase, ChristianHolidays, InternationalHolidays):
	countries\montenegro.py:18: """
	countries\montenegro.py:26: country = "ME"
	countries\montenegro.py:27: observed_label = "%s (observed)"
	countries\montenegro.py:29: def __init__(self, *args, **kwargs):
	countries\montenegro.py:35: def _populate_public_holidays(self):
	countries\montenegro.py:72: class ME(Montenegro):
(call) countries\montenegro.py:72: ME
	countries\montenegro.py:72: class ME(Montenegro):
	countries\montenegro.py:73: pass
	countries\montenegro.py:76: class MNE(Montenegro):
(call) countries\montenegro.py:76: MNE
	countries\montenegro.py:76: class MNE(Montenegro):
	countries\montenegro.py:77: pass
	countries\__init__.py:102: from .morocco import Morocco, MA, MOR
(call) countries\morocco.py:0: <module>
	countries\morocco.py:12: from gettext import gettext as tr
	countries\morocco.py:14: from holidays.groups import IslamicHolidays, InternationalHolidays
	countries\morocco.py:15: from holidays.holiday_base import HolidayBase
	countries\morocco.py:18: class Morocco(HolidayBase, InternationalHolidays, IslamicHolidays):
(call) countries\morocco.py:18: Morocco
	countries\morocco.py:18: class Morocco(HolidayBase, InternationalHolidays, IslamicHolidays):
	countries\morocco.py:19: """
	countries\morocco.py:27: country = "MA"
	countries\morocco.py:28: default_language = "ar"
	countries\morocco.py:30: estimated_label = tr("(تقدير) %s")
	countries\morocco.py:31: supported_languages = ("ar", "en_US", "fr")
	countries\morocco.py:33: def __init__(self, *args, **kwargs):
	countries\morocco.py:38: def _populate_public_holidays(self):
	countries\morocco.py:104: class MA(Morocco):
(call) countries\morocco.py:104: MA
	countries\morocco.py:104: class MA(Morocco):
	countries\morocco.py:105: pass
	countries\morocco.py:108: class MOR(Morocco):
(call) countries\morocco.py:108: MOR
	countries\morocco.py:108: class MOR(Morocco):
	countries\morocco.py:109: pass
	countries\__init__.py:103: from .mozambique import Mozambique, MZ, MOZ
(call) countries\mozambique.py:0: <module>
	countries\mozambique.py:12: from gettext import gettext as tr
	countries\mozambique.py:14: from holidays.groups import ChristianHolidays, InternationalHolidays
	countries\mozambique.py:15: from holidays.observed_holiday_base import ObservedHolidayBase, SUN_TO_NEXT_MON
	countries\mozambique.py:18: class Mozambique(ObservedHolidayBase, ChristianHolidays, InternationalHolidays):
(call) countries\mozambique.py:18: Mozambique
	countries\mozambique.py:18: class Mozambique(ObservedHolidayBase, ChristianHolidays, InternationalHolidays):
	countries\mozambique.py:19: country = "MZ"
	countries\mozambique.py:20: default_language = "pt_MZ"
	countries\mozambique.py:22: observed_label = tr("%s (ponte)")
	countries\mozambique.py:23: supported_languages = ("en_US", "pt_MZ", "uk")
	countries\mozambique.py:25: def __init__(self, *args, **kwargs):
	countries\mozambique.py:31: def _populate_public_holidays(self):
	countries\mozambique.py:66: class MZ(Mozambique):
(call) countries\mozambique.py:66: MZ
	countries\mozambique.py:66: class MZ(Mozambique):
	countries\mozambique.py:67: pass
	countries\mozambique.py:70: class MOZ(Mozambique):
(call) countries\mozambique.py:70: MOZ
	countries\mozambique.py:70: class MOZ(Mozambique):
	countries\mozambique.py:71: pass
	countries\__init__.py:104: from .namibia import Namibia, NA, NAM
(call) countries\namibia.py:0: <module>
	countries\namibia.py:12: from holidays.calendars.gregorian import JAN, DEC
	countries\namibia.py:13: from holidays.groups import ChristianHolidays, InternationalHolidays, StaticHolidays
	countries\namibia.py:14: from holidays.observed_holiday_base import ObservedHolidayBase, SUN_TO_NEXT_MON
	countries\namibia.py:17: class Namibia(ObservedHolidayBase, ChristianHolidays, InternationalHolidays, StaticHolidays):
(call) countries\namibia.py:17: Namibia
	countries\namibia.py:17: class Namibia(ObservedHolidayBase, ChristianHolidays, InternationalHolidays, StaticHolidays):
	countries\namibia.py:18: """
	countries\namibia.py:29: country = "NA"
	countries\namibia.py:31: observed_label = "%s (observed)"
	countries\namibia.py:33: def __init__(self, *args, **kwargs):
	countries\namibia.py:41: def _populate_public_holidays(self):
	countries\namibia.py:88: class NA(Namibia):
(call) countries\namibia.py:88: NA
	countries\namibia.py:88: class NA(Namibia):
	countries\namibia.py:89: pass
	countries\namibia.py:92: class NAM(Namibia):
(call) countries\namibia.py:92: NAM
	countries\namibia.py:92: class NAM(Namibia):
	countries\namibia.py:93: pass
	countries\namibia.py:96: class NamibiaStaticHolidays:
(call) countries\namibia.py:96: NamibiaStaticHolidays
	countries\namibia.py:96: class NamibiaStaticHolidays:
	countries\namibia.py:99: 1999: (DEC, 31, "Y2K changeover"),
	countries\namibia.py:100: 2000: (JAN, 3, "Y2K changeover"),
	countries\namibia.py:97: special_public_holidays = {
	countries\__init__.py:105: from .netherlands import Netherlands, NL, NLD
(call) countries\netherlands.py:0: <module>
	countries\netherlands.py:12: from datetime import date
	countries\netherlands.py:13: from datetime import timedelta as td
	countries\netherlands.py:14: from gettext import gettext as tr
	countries\netherlands.py:16: from holidays.calendars.gregorian import APR, AUG
	countries\netherlands.py:17: from holidays.constants import OPTIONAL, PUBLIC
	countries\netherlands.py:18: from holidays.groups import ChristianHolidays, InternationalHolidays
	countries\netherlands.py:19: from holidays.holiday_base import HolidayBase
	countries\netherlands.py:22: class Netherlands(HolidayBase, ChristianHolidays, InternationalHolidays):
(call) countries\netherlands.py:22: Netherlands
	countries\netherlands.py:22: class Netherlands(HolidayBase, ChristianHolidays, InternationalHolidays):
	countries\netherlands.py:23: """
	countries\netherlands.py:31: country = "NL"
	countries\netherlands.py:32: default_language = "nl"
	countries\netherlands.py:33: supported_categories = (OPTIONAL, PUBLIC)
	countries\netherlands.py:34: supported_languages = ("en_US", "nl", "uk")
	countries\netherlands.py:36: def __init__(self, *args, **kwargs):
	countries\netherlands.py:41: def _populate_public_holidays(self):
	countries\netherlands.py:89: def _populate_optional_holidays(self):
	countries\netherlands.py:98: class NL(Netherlands):
(call) countries\netherlands.py:98: NL
	countries\netherlands.py:98: class NL(Netherlands):
	countries\netherlands.py:99: pass
	countries\netherlands.py:102: class NLD(Netherlands):
(call) countries\netherlands.py:102: NLD
	countries\netherlands.py:102: class NLD(Netherlands):
	countries\netherlands.py:103: pass
	countries\__init__.py:106: from .new_zealand import NewZealand, NZ, NZL
(call) countries\new_zealand.py:0: <module>
	countries\new_zealand.py:12: from datetime import date
	countries\new_zealand.py:13: from datetime import timedelta as td
	countries\new_zealand.py:15: from holidays.calendars.gregorian import JAN, FEB, MAR, JUN, JUL, SEP, NOV, DEC
	countries\new_zealand.py:16: from holidays.groups import ChristianHolidays, InternationalHolidays, StaticHolidays
	countries\new_zealand.py:17: from holidays.observed_holiday_base import (
	countries\new_zealand.py:25: class NewZealand(ObservedHolidayBase, ChristianHolidays, InternationalHolidays, StaticHolidays):
(call) countries\new_zealand.py:25: NewZealand
	countries\new_zealand.py:25: class NewZealand(ObservedHolidayBase, ChristianHolidays, InternationalHolidays, StaticHolidays):
	countries\new_zealand.py:26: country = "NZ"
	countries\new_zealand.py:27: observed_label = "%s (observed)"
	countries\new_zealand.py:28: subdivisions = (
	countries\new_zealand.py:49: _deprecated_subdivisions = (
	countries\new_zealand.py:70: def __init__(self, *args, **kwargs):
	countries\new_zealand.py:77: def _get_nearest_monday(self, *args) -> date:
	countries\new_zealand.py:82: def _populate_public_holidays(self):
	countries\new_zealand.py:215: def _populate_subdiv_auk_public_holidays(self):
	countries\new_zealand.py:218: def _populate_subdiv_can_public_holidays(self):
	countries\new_zealand.py:221: def _populate_subdiv_cit_public_holidays(self):
	countries\new_zealand.py:224: def _populate_subdiv_hkb_public_holidays(self):
	countries\new_zealand.py:227: def _populate_subdiv_mbh_public_holidays(self):
	countries\new_zealand.py:230: def _populate_subdiv_nsn_public_holidays(self):
	countries\new_zealand.py:233: def _populate_subdiv_ntl_public_holidays(self):
	countries\new_zealand.py:242: def _populate_subdiv_ota_public_holidays(self):
	countries\new_zealand.py:249: def _populate_subdiv_stc_public_holidays(self):
	countries\new_zealand.py:252: def _populate_subdiv_stl_public_holidays(self):
	countries\new_zealand.py:260: def _populate_subdiv_tki_public_holidays(self):
	countries\new_zealand.py:263: def _populate_subdiv_wgn_public_holidays(self):
	countries\new_zealand.py:266: def _populate_subdiv_wtc_public_holidays(self):
	countries\new_zealand.py:275: class NZ(NewZealand):
(call) countries\new_zealand.py:275: NZ
	countries\new_zealand.py:275: class NZ(NewZealand):
	countries\new_zealand.py:276: pass
	countries\new_zealand.py:279: class NZL(NewZealand):
(call) countries\new_zealand.py:279: NZL
	countries\new_zealand.py:279: class NZL(NewZealand):
	countries\new_zealand.py:280: pass
	countries\new_zealand.py:283: class NewZelandStaticHolidays:
(call) countries\new_zealand.py:283: NewZelandStaticHolidays
	countries\new_zealand.py:283: class NewZelandStaticHolidays:
	countries\new_zealand.py:285: 2022: (SEP, 26, "Queen Elizabeth II Memorial Day"),
	countries\new_zealand.py:284: special_public_holidays = {
	countries\__init__.py:107: from .nicaragua import Nicaragua, NI, NIC
(call) countries\nicaragua.py:0: <module>
	countries\nicaragua.py:12: from gettext import gettext as tr
	countries\nicaragua.py:14: from holidays.groups import ChristianHolidays, InternationalHolidays
	countries\nicaragua.py:15: from holidays.holiday_base import HolidayBase
	countries\nicaragua.py:18: class Nicaragua(HolidayBase, ChristianHolidays, InternationalHolidays):
(call) countries\nicaragua.py:18: Nicaragua
	countries\nicaragua.py:18: class Nicaragua(HolidayBase, ChristianHolidays, InternationalHolidays):
	countries\nicaragua.py:19: country = "NI"
	countries\nicaragua.py:20: default_language = "es"
	countries\nicaragua.py:21: subdivisions = (
	countries\nicaragua.py:40: supported_languages = ("en_US", "es", "uk")
	countries\nicaragua.py:42: def __init__(self, *args, **kwargs):
	countries\nicaragua.py:50: def _populate_public_holidays(self):
	countries\nicaragua.py:79: def _populate_subdiv_mn_public_holidays(self):
	countries\nicaragua.py:87: class NI(Nicaragua):
(call) countries\nicaragua.py:87: NI
	countries\nicaragua.py:87: class NI(Nicaragua):
	countries\nicaragua.py:88: pass
	countries\nicaragua.py:91: class NIC(Nicaragua):
(call) countries\nicaragua.py:91: NIC
	countries\nicaragua.py:91: class NIC(Nicaragua):
	countries\nicaragua.py:92: pass
	countries\__init__.py:108: from .nigeria import Nigeria, NG, NGA
(call) countries\nigeria.py:0: <module>
	countries\nigeria.py:12: from holidays.calendars.gregorian import FEB, MAY
	countries\nigeria.py:13: from holidays.groups import (
	countries\nigeria.py:19: from holidays.observed_holiday_base import ObservedHolidayBase, SAT_SUN_TO_NEXT_WORKDAY
	countries\nigeria.py:22: class Nigeria(
	countries\nigeria.py:23: ObservedHolidayBase, ChristianHolidays, InternationalHolidays, IslamicHolidays, StaticHolidays
	countries\nigeria.py:22: class Nigeria(
(call) countries\nigeria.py:22: Nigeria
	countries\nigeria.py:22: class Nigeria(
	countries\nigeria.py:25: """
	countries\nigeria.py:29: country = "NG"
	countries\nigeria.py:30: observed_label = "%s (observed)"
	countries\nigeria.py:32: def __init__(self, *args, **kwargs):
	countries\nigeria.py:41: def _populate_public_holidays(self):
	countries\nigeria.py:90: class NG(Nigeria):
(call) countries\nigeria.py:90: NG
	countries\nigeria.py:90: class NG(Nigeria):
	countries\nigeria.py:91: pass
	countries\nigeria.py:94: class NGA(Nigeria):
(call) countries\nigeria.py:94: NGA
	countries\nigeria.py:94: class NGA(Nigeria):
	countries\nigeria.py:95: pass
	countries\nigeria.py:98: class NigeriaStaticHolidays:
(call) countries\nigeria.py:98: NigeriaStaticHolidays
	countries\nigeria.py:98: class NigeriaStaticHolidays:
	countries\nigeria.py:100: 2019: (
	countries\nigeria.py:101: (FEB, 22, "Public Holiday for Elections"),
	countries\nigeria.py:102: (MAY, 29, "Presidential Inauguration Day"),
	countries\nigeria.py:100: 2019: (
	countries\nigeria.py:99: special_public_holidays = {
	countries\__init__.py:109: from .north_macedonia import NorthMacedonia, MK, MKD
(call) countries\north_macedonia.py:0: <module>
	countries\north_macedonia.py:12: from holidays.calendars.julian import JULIAN_CALENDAR
	countries\north_macedonia.py:13: from holidays.groups import ChristianHolidays, IslamicHolidays, InternationalHolidays
	countries\north_macedonia.py:14: from holidays.holiday_base import HolidayBase
	countries\north_macedonia.py:17: class NorthMacedonia(HolidayBase, ChristianHolidays, InternationalHolidays, IslamicHolidays):
(call) countries\north_macedonia.py:17: NorthMacedonia
	countries\north_macedonia.py:17: class NorthMacedonia(HolidayBase, ChristianHolidays, InternationalHolidays, IslamicHolidays):
	countries\north_macedonia.py:18: """
	countries\north_macedonia.py:22: country = "MK"
	countries\north_macedonia.py:24: def __init__(self, *args, **kwargs):
	countries\north_macedonia.py:30: def _populate_public_holidays(self):
	countries\north_macedonia.py:54: class MK(NorthMacedonia):
(call) countries\north_macedonia.py:54: MK
	countries\north_macedonia.py:54: class MK(NorthMacedonia):
	countries\north_macedonia.py:55: pass
	countries\north_macedonia.py:58: class MKD(NorthMacedonia):
(call) countries\north_macedonia.py:58: MKD
	countries\north_macedonia.py:58: class MKD(NorthMacedonia):
	countries\north_macedonia.py:59: pass
	countries\__init__.py:110: from .northern_mariana_islands import NorthernMarianaIslands, MP, MNP, HolidaysMP
(call) countries\northern_mariana_islands.py:0: <module>
	countries\northern_mariana_islands.py:12: from holidays.countries.united_states import US
	countries\northern_mariana_islands.py:15: class HolidaysMP(US):
(call) countries\northern_mariana_islands.py:15: HolidaysMP
	countries\northern_mariana_islands.py:15: class HolidaysMP(US):
	countries\northern_mariana_islands.py:20: country = "MP"
	countries\northern_mariana_islands.py:21: subdivisions = ()  # Override US subdivisions.
	countries\northern_mariana_islands.py:23: def _populate_public_holidays(self) -> None:
	countries\northern_mariana_islands.py:28: class MP(HolidaysMP):
(call) countries\northern_mariana_islands.py:28: MP
	countries\northern_mariana_islands.py:28: class MP(HolidaysMP):
	countries\northern_mariana_islands.py:29: pass
	countries\northern_mariana_islands.py:32: class MNP(HolidaysMP):
(call) countries\northern_mariana_islands.py:32: MNP
	countries\northern_mariana_islands.py:32: class MNP(HolidaysMP):
	countries\northern_mariana_islands.py:33: pass
	countries\northern_mariana_islands.py:36: class NorthernMarianaIslands(HolidaysMP):
(call) countries\northern_mariana_islands.py:36: NorthernMarianaIslands
	countries\northern_mariana_islands.py:36: class NorthernMarianaIslands(HolidaysMP):
	countries\northern_mariana_islands.py:37: pass
	countries\__init__.py:111: from .norway import Norway, NO, NOR
(call) countries\norway.py:0: <module>
	countries\norway.py:12: from gettext import gettext as tr
	countries\norway.py:14: from holidays.calendars.gregorian import _get_all_sundays
	countries\norway.py:15: from holidays.groups import ChristianHolidays, InternationalHolidays
	countries\norway.py:16: from holidays.holiday_base import HolidayBase
	countries\norway.py:19: class Norway(HolidayBase, ChristianHolidays, InternationalHolidays):
(call) countries\norway.py:19: Norway
	countries\norway.py:19: class Norway(HolidayBase, ChristianHolidays, InternationalHolidays):
	countries\norway.py:20: """
	countries\norway.py:35: country = "NO"
	countries\norway.py:36: default_language = "no"
	countries\norway.py:37: supported_languages = ("en_US", "no", "uk")
	countries\norway.py:39: def __init__(self, include_sundays=False, *args, **kwargs):
	countries\norway.py:49: def _populate_public_holidays(self):
	countries\norway.py:99: class NO(Norway):
(call) countries\norway.py:99: NO
	countries\norway.py:99: class NO(Norway):
	countries\norway.py:100: pass
	countries\norway.py:103: class NOR(Norway):
(call) countries\norway.py:103: NOR
	countries\norway.py:103: class NOR(Norway):
	countries\norway.py:104: pass
	countries\__init__.py:112: from .pakistan import Pakistan, PK, PAK
(call) countries\pakistan.py:0: <module>
	countries\pakistan.py:12: from holidays.calendars import _CustomIslamicHolidays
	countries\pakistan.py:13: from holidays.calendars.gregorian import JAN, FEB, MAR, APR, MAY, JUN, JUL, AUG, SEP, OCT, NOV, DEC
	countries\pakistan.py:14: from holidays.groups import InternationalHolidays, IslamicHolidays
	countries\pakistan.py:15: from holidays.holiday_base import HolidayBase
	countries\pakistan.py:18: class Pakistan(HolidayBase, InternationalHolidays, IslamicHolidays):
(call) countries\pakistan.py:18: Pakistan
	countries\pakistan.py:18: class Pakistan(HolidayBase, InternationalHolidays, IslamicHolidays):
	countries\pakistan.py:19: country = "PK"
	countries\pakistan.py:21: def __init__(self, *args, **kwargs):
	countries\pakistan.py:26: def _populate_public_holidays(self):
	countries\pakistan.py:69: class PK(Pakistan):
(call) countries\pakistan.py:69: PK
	countries\pakistan.py:69: class PK(Pakistan):
	countries\pakistan.py:70: pass
	countries\pakistan.py:73: class PAK(Pakistan):
(call) countries\pakistan.py:73: PAK
	countries\pakistan.py:73: class PAK(Pakistan):
	countries\pakistan.py:74: pass
	countries\pakistan.py:77: class PakistanIslamicHolidays(_CustomIslamicHolidays):
(call) countries\pakistan.py:77: PakistanIslamicHolidays
	countries\pakistan.py:77: class PakistanIslamicHolidays(_CustomIslamicHolidays):
	countries\pakistan.py:80: ASHURA_DATES = {
	countries\pakistan.py:81: 2005: (FEB, 18),
	countries\pakistan.py:80: ASHURA_DATES = {
	countries\pakistan.py:82: 2006: (FEB, 8),
	countries\pakistan.py:80: ASHURA_DATES = {
	countries\pakistan.py:83: 2007: (JAN, 28),
	countries\pakistan.py:80: ASHURA_DATES = {
	countries\pakistan.py:84: 2008: (JAN, 18),
	countries\pakistan.py:80: ASHURA_DATES = {
	countries\pakistan.py:85: 2009: ((JAN, 6), (DEC, 26)),
	countries\pakistan.py:80: ASHURA_DATES = {
	countries\pakistan.py:86: 2010: (DEC, 16),
	countries\pakistan.py:80: ASHURA_DATES = {
	countries\pakistan.py:87: 2011: (DEC, 5),
	countries\pakistan.py:80: ASHURA_DATES = {
	countries\pakistan.py:88: 2012: (NOV, 23),
	countries\pakistan.py:80: ASHURA_DATES = {
	countries\pakistan.py:89: 2013: (NOV, 13),
	countries\pakistan.py:80: ASHURA_DATES = {
	countries\pakistan.py:90: 2014: (NOV, 3),
	countries\pakistan.py:80: ASHURA_DATES = {
	countries\pakistan.py:91: 2015: (OCT, 23),
	countries\pakistan.py:80: ASHURA_DATES = {
	countries\pakistan.py:92: 2016: (OCT, 11),
	countries\pakistan.py:80: ASHURA_DATES = {
	countries\pakistan.py:93: 2017: (SEP, 30),
	countries\pakistan.py:80: ASHURA_DATES = {
	countries\pakistan.py:94: 2018: (SEP, 21),
	countries\pakistan.py:80: ASHURA_DATES = {
	countries\pakistan.py:95: 2019: (SEP, 9),
	countries\pakistan.py:80: ASHURA_DATES = {
	countries\pakistan.py:96: 2020: (AUG, 29),
	countries\pakistan.py:80: ASHURA_DATES = {
	countries\pakistan.py:97: 2021: (AUG, 18),
	countries\pakistan.py:80: ASHURA_DATES = {
	countries\pakistan.py:98: 2022: (AUG, 9),
	countries\pakistan.py:80: ASHURA_DATES = {
	countries\pakistan.py:102: EID_AL_ADHA_DATES = {
	countries\pakistan.py:103: 2005: (JAN, 21),
	countries\pakistan.py:102: EID_AL_ADHA_DATES = {
	countries\pakistan.py:104: 2006: ((JAN, 10), (DEC, 31)),
	countries\pakistan.py:102: EID_AL_ADHA_DATES = {
	countries\pakistan.py:105: 2007: (DEC, 20),
	countries\pakistan.py:102: EID_AL_ADHA_DATES = {
	countries\pakistan.py:106: 2008: (DEC, 9),
	countries\pakistan.py:102: EID_AL_ADHA_DATES = {
	countries\pakistan.py:107: 2009: (NOV, 28),
	countries\pakistan.py:102: EID_AL_ADHA_DATES = {
	countries\pakistan.py:108: 2010: (NOV, 17),
	countries\pakistan.py:102: EID_AL_ADHA_DATES = {
	countries\pakistan.py:109: 2011: (NOV, 7),
	countries\pakistan.py:102: EID_AL_ADHA_DATES = {
	countries\pakistan.py:110: 2012: (OCT, 26),
	countries\pakistan.py:102: EID_AL_ADHA_DATES = {
	countries\pakistan.py:111: 2013: (OCT, 15),
	countries\pakistan.py:102: EID_AL_ADHA_DATES = {
	countries\pakistan.py:112: 2014: (OCT, 6),
	countries\pakistan.py:102: EID_AL_ADHA_DATES = {
	countries\pakistan.py:113: 2015: (SEP, 24),
	countries\pakistan.py:102: EID_AL_ADHA_DATES = {
	countries\pakistan.py:114: 2016: (SEP, 12),
	countries\pakistan.py:102: EID_AL_ADHA_DATES = {
	countries\pakistan.py:115: 2017: (SEP, 2),
	countries\pakistan.py:102: EID_AL_ADHA_DATES = {
	countries\pakistan.py:116: 2018: (AUG, 22),
	countries\pakistan.py:102: EID_AL_ADHA_DATES = {
	countries\pakistan.py:117: 2019: (AUG, 12),
	countries\pakistan.py:102: EID_AL_ADHA_DATES = {
	countries\pakistan.py:118: 2020: (JUL, 31),
	countries\pakistan.py:102: EID_AL_ADHA_DATES = {
	countries\pakistan.py:119: 2021: (JUL, 21),
	countries\pakistan.py:102: EID_AL_ADHA_DATES = {
	countries\pakistan.py:120: 2022: (JUL, 10),
	countries\pakistan.py:121: 2023: (JUN, 29),
	countries\pakistan.py:102: EID_AL_ADHA_DATES = {
	countries\pakistan.py:125: EID_AL_FITR_DATES = {
	countries\pakistan.py:126: 2005: (NOV, 4),
	countries\pakistan.py:125: EID_AL_FITR_DATES = {
	countries\pakistan.py:127: 2006: (OCT, 24),
	countries\pakistan.py:125: EID_AL_FITR_DATES = {
	countries\pakistan.py:128: 2007: (OCT, 13),
	countries\pakistan.py:125: EID_AL_FITR_DATES = {
	countries\pakistan.py:129: 2008: (OCT, 2),
	countries\pakistan.py:125: EID_AL_FITR_DATES = {
	countries\pakistan.py:130: 2009: (SEP, 21),
	countries\pakistan.py:125: EID_AL_FITR_DATES = {
	countries\pakistan.py:131: 2010: (SEP, 10),
	countries\pakistan.py:125: EID_AL_FITR_DATES = {
	countries\pakistan.py:132: 2011: (AUG, 31),
	countries\pakistan.py:125: EID_AL_FITR_DATES = {
	countries\pakistan.py:133: 2012: (AUG, 19),
	countries\pakistan.py:125: EID_AL_FITR_DATES = {
	countries\pakistan.py:134: 2013: (AUG, 8),
	countries\pakistan.py:125: EID_AL_FITR_DATES = {
	countries\pakistan.py:135: 2014: (JUL, 29),
	countries\pakistan.py:125: EID_AL_FITR_DATES = {
	countries\pakistan.py:136: 2015: (JUL, 17),
	countries\pakistan.py:125: EID_AL_FITR_DATES = {
	countries\pakistan.py:137: 2016: (JUL, 6),
	countries\pakistan.py:125: EID_AL_FITR_DATES = {
	countries\pakistan.py:138: 2017: (JUN, 26),
	countries\pakistan.py:125: EID_AL_FITR_DATES = {
	countries\pakistan.py:139: 2018: (JUN, 16),
	countries\pakistan.py:125: EID_AL_FITR_DATES = {
	countries\pakistan.py:140: 2019: (JUN, 5),
	countries\pakistan.py:125: EID_AL_FITR_DATES = {
	countries\pakistan.py:141: 2020: (MAY, 24),
	countries\pakistan.py:125: EID_AL_FITR_DATES = {
	countries\pakistan.py:142: 2021: (MAY, 13),
	countries\pakistan.py:125: EID_AL_FITR_DATES = {
	countries\pakistan.py:143: 2022: (MAY, 3),
	countries\pakistan.py:144: 2023: (APR, 22),
	countries\pakistan.py:125: EID_AL_FITR_DATES = {
	countries\pakistan.py:148: MAWLID_DATES = {
	countries\pakistan.py:149: 2005: (APR, 22),
	countries\pakistan.py:148: MAWLID_DATES = {
	countries\pakistan.py:150: 2006: (APR, 11),
	countries\pakistan.py:148: MAWLID_DATES = {
	countries\pakistan.py:151: 2007: (MAR, 31),
	countries\pakistan.py:148: MAWLID_DATES = {
	countries\pakistan.py:152: 2008: (MAR, 21),
	countries\pakistan.py:148: MAWLID_DATES = {
	countries\pakistan.py:153: 2009: (MAR, 9),
	countries\pakistan.py:148: MAWLID_DATES = {
	countries\pakistan.py:154: 2010: (MAR, 1),
	countries\pakistan.py:148: MAWLID_DATES = {
	countries\pakistan.py:155: 2011: (FEB, 17),
	countries\pakistan.py:148: MAWLID_DATES = {
	countries\pakistan.py:156: 2012: (FEB, 5),
	countries\pakistan.py:148: MAWLID_DATES = {
	countries\pakistan.py:157: 2013: (JAN, 24),
	countries\pakistan.py:148: MAWLID_DATES = {
	countries\pakistan.py:158: 2014: (JAN, 14),
	countries\pakistan.py:148: MAWLID_DATES = {
	countries\pakistan.py:159: 2015: (JAN, 4),
	countries\pakistan.py:148: MAWLID_DATES = {
	countries\pakistan.py:160: 2016: (DEC, 12),
	countries\pakistan.py:148: MAWLID_DATES = {
	countries\pakistan.py:161: 2017: (DEC, 1),
	countries\pakistan.py:148: MAWLID_DATES = {
	countries\pakistan.py:162: 2018: (NOV, 21),
	countries\pakistan.py:148: MAWLID_DATES = {
	countries\pakistan.py:163: 2019: (NOV, 10),
	countries\pakistan.py:148: MAWLID_DATES = {
	countries\pakistan.py:164: 2020: (OCT, 30),
	countries\pakistan.py:148: MAWLID_DATES = {
	countries\pakistan.py:165: 2021: (OCT, 19),
	countries\pakistan.py:148: MAWLID_DATES = {
	countries\pakistan.py:166: 2022: (OCT, 9),
	countries\pakistan.py:148: MAWLID_DATES = {
(call) calendars\custom.py:24: __new__
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
(call) calendars\custom.py:25: <genexpr>
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:26: namespace[f"{attr}_{_CustomCalendar.CUSTOM_ATTR_POSTFIX}"] = namespace[attr]
	calendars\custom.py:27: del namespace[attr]
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
(call) calendars\custom.py:25: <genexpr>
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:26: namespace[f"{attr}_{_CustomCalendar.CUSTOM_ATTR_POSTFIX}"] = namespace[attr]
	calendars\custom.py:27: del namespace[attr]
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
(call) calendars\custom.py:25: <genexpr>
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:26: namespace[f"{attr}_{_CustomCalendar.CUSTOM_ATTR_POSTFIX}"] = namespace[attr]
	calendars\custom.py:27: del namespace[attr]
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
(call) calendars\custom.py:25: <genexpr>
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:26: namespace[f"{attr}_{_CustomCalendar.CUSTOM_ATTR_POSTFIX}"] = namespace[attr]
	calendars\custom.py:27: del namespace[attr]
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
(call) calendars\custom.py:25: <genexpr>
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:29: return super().__new__(cls, name, bases, namespace)
	countries\__init__.py:113: from .panama import Panama, PA, PAN
(call) countries\panama.py:0: <module>
	countries\panama.py:12: from holidays.groups import ChristianHolidays, InternationalHolidays
	countries\panama.py:13: from holidays.observed_holiday_base import ObservedHolidayBase, SUN_TO_NEXT_MON
	countries\panama.py:16: class Panama(ObservedHolidayBase, ChristianHolidays, InternationalHolidays):
(call) countries\panama.py:16: Panama
	countries\panama.py:16: class Panama(ObservedHolidayBase, ChristianHolidays, InternationalHolidays):
	countries\panama.py:17: """
	countries\panama.py:23: country = "PA"
	countries\panama.py:24: observed_label = "%s (observed)"
	countries\panama.py:26: def __init__(self, *args, **kwargs):
	countries\panama.py:32: def _populate_public_holidays(self):
	countries\panama.py:74: class PA(Panama):
(call) countries\panama.py:74: PA
	countries\panama.py:74: class PA(Panama):
	countries\panama.py:75: pass
	countries\panama.py:78: class PAN(Panama):
(call) countries\panama.py:78: PAN
	countries\panama.py:78: class PAN(Panama):
	countries\panama.py:79: pass
	countries\__init__.py:114: from .papua_new_guinea import PapuaNewGuinea, PG, PNG
(call) countries\papua_new_guinea.py:0: <module>
	countries\papua_new_guinea.py:12: from holidays.calendars.gregorian import JAN, FEB, MAR, APR, JUN, SEP, NOV
	countries\papua_new_guinea.py:13: from holidays.groups import ChristianHolidays, InternationalHolidays, StaticHolidays
	countries\papua_new_guinea.py:14: from holidays.observed_holiday_base import ObservedHolidayBase, SUN_TO_NEXT_MON, SUN_TO_NEXT_TUE
	countries\papua_new_guinea.py:17: class PapuaNewGuinea(
	countries\papua_new_guinea.py:18: ObservedHolidayBase, ChristianHolidays, InternationalHolidays, StaticHolidays
	countries\papua_new_guinea.py:17: class PapuaNewGuinea(
(call) countries\papua_new_guinea.py:17: PapuaNewGuinea
	countries\papua_new_guinea.py:17: class PapuaNewGuinea(
	countries\papua_new_guinea.py:20: """
	countries\papua_new_guinea.py:42: country = "PG"
	countries\papua_new_guinea.py:43: observed_label = "%s (observed)"
	countries\papua_new_guinea.py:45: def __init__(self, *args, **kwargs):
	countries\papua_new_guinea.py:52: def _populate_public_holidays(self):
	countries\papua_new_guinea.py:125: class PG(PapuaNewGuinea):
(call) countries\papua_new_guinea.py:125: PG
	countries\papua_new_guinea.py:125: class PG(PapuaNewGuinea):
	countries\papua_new_guinea.py:126: pass
	countries\papua_new_guinea.py:129: class PNG(PapuaNewGuinea):
(call) countries\papua_new_guinea.py:129: PNG
	countries\papua_new_guinea.py:129: class PNG(PapuaNewGuinea):
	countries\papua_new_guinea.py:130: pass
	countries\papua_new_guinea.py:133: class PapuaNewGuineaStaticHolidays:
(call) countries\papua_new_guinea.py:133: PapuaNewGuineaStaticHolidays
	countries\papua_new_guinea.py:133: class PapuaNewGuineaStaticHolidays:
	countries\papua_new_guinea.py:134: """
	countries\papua_new_guinea.py:148: sir_michael_somare_mourning_day = "National Day of Mourning for Sir Michael Somare"
	countries\papua_new_guinea.py:151: sir_michael_somare_remembrance_day = "Grand Chief Sir Michael Somare Remembrance Day"
	countries\papua_new_guinea.py:155: 2018: (NOV, 16, "APEC Leaders' Summit Public Holiday"),
	countries\papua_new_guinea.py:158: (JAN, 8, "State Funeral of Sir Mekere Morauta"),
	countries\papua_new_guinea.py:159: (MAR, 1, sir_michael_somare_mourning_day),
	countries\papua_new_guinea.py:160: (MAR, 12, sir_michael_somare_mourning_day),
	countries\papua_new_guinea.py:156: 2021: (
	countries\papua_new_guinea.py:163: 2022: (SEP, 19, "State Funeral of Queen Elizabeth II"),
	countries\papua_new_guinea.py:165: 2023: (APR, 18, "State Funeral of Sir Rabbie Namaliu"),
	countries\papua_new_guinea.py:153: special_public_holidays = {
	countries\papua_new_guinea.py:169: 2022: (FEB, 28, sir_michael_somare_remembrance_day),
	countries\papua_new_guinea.py:171: (FEB, 24, sir_michael_somare_remembrance_day),
	countries\papua_new_guinea.py:172: (JUN, 16, "King's Birthday"),
	countries\papua_new_guinea.py:173: (SEP, 15, "Independence Day"),
	countries\papua_new_guinea.py:170: 2023: (
	countries\papua_new_guinea.py:168: special_public_holidays_observed = {
	countries\__init__.py:115: from .paraguay import Paraguay, PY, PRY
(call) countries\paraguay.py:0: <module>
	countries\paraguay.py:12: from datetime import date
	countries\paraguay.py:13: from gettext import gettext as tr
	countries\paraguay.py:15: from holidays.calendars.gregorian import JAN, FEB, MAR, APR, MAY, JUN, JUL, AUG, SEP, OCT, DEC
	countries\paraguay.py:16: from holidays.constants import GOVERNMENT, PUBLIC
	countries\paraguay.py:17: from holidays.groups import ChristianHolidays, InternationalHolidays, StaticHolidays
	countries\paraguay.py:18: from holidays.holiday_base import HolidayBase
	countries\paraguay.py:21: class Paraguay(HolidayBase, ChristianHolidays, InternationalHolidays, StaticHolidays):
(call) countries\paraguay.py:21: Paraguay
	countries\paraguay.py:21: class Paraguay(HolidayBase, ChristianHolidays, InternationalHolidays, StaticHolidays):
	countries\paraguay.py:22: """
	countries\paraguay.py:29: country = "PY"
	countries\paraguay.py:30: default_language = "es"
	countries\paraguay.py:31: supported_categories = (GOVERNMENT, PUBLIC)
	countries\paraguay.py:32: supported_languages = ("en_US", "es", "uk")
	countries\paraguay.py:34: def __init__(self, *args, **kwargs):
	countries\paraguay.py:40: def _move_holiday(self, dt: date) -> None:
	countries\paraguay.py:44: def _populate_public_holidays(self):
	countries\paraguay.py:116: class PY(Paraguay):
(call) countries\paraguay.py:116: PY
	countries\paraguay.py:116: class PY(Paraguay):
	countries\paraguay.py:117: pass
	countries\paraguay.py:120: class PRY(Paraguay):
(call) countries\paraguay.py:120: PRY
	countries\paraguay.py:120: class PRY(Paraguay):
	countries\paraguay.py:121: pass
	countries\paraguay.py:124: class ParaguayStaticHolidays:
(call) countries\paraguay.py:124: ParaguayStaticHolidays
	countries\paraguay.py:124: class ParaguayStaticHolidays:
	countries\paraguay.py:126: public_holiday = tr("Asueto adicionale")
	countries\paraguay.py:128: public_sector_holiday = tr("Asueto de la Administración Pública")
	countries\paraguay.py:133: 2007: (JAN, 29, public_holiday),
	countries\paraguay.py:136: 2009: (SEP, 10, public_holiday),
	countries\paraguay.py:138: 2010: (JUN, 14, public_holiday),
	countries\paraguay.py:141: (APR, 19, public_holiday),
	countries\paraguay.py:143: (MAY, 14, public_holiday),
	countries\paraguay.py:144: (MAY, 16, public_holiday),
	countries\paraguay.py:139: 2011: (
	countries\paraguay.py:147: 2013: (AUG, 14, public_holiday),
	countries\paraguay.py:151: (JUL, 10, public_holiday),
	countries\paraguay.py:152: (JUL, 11, public_holiday),
	countries\paraguay.py:148: 2015: (
	countries\paraguay.py:130: special_public_holidays = {
	countries\paraguay.py:159: (DEC, 24, public_sector_holiday),
	countries\paraguay.py:160: (DEC, 31, public_sector_holiday),
	countries\paraguay.py:157: 2010: (
	countries\paraguay.py:164: (APR, 20, public_sector_holiday),
	countries\paraguay.py:166: (DEC, 23, public_sector_holiday),
	countries\paraguay.py:167: (DEC, 30, public_sector_holiday),
	countries\paraguay.py:162: 2011: (
	countries\paraguay.py:171: (APR, 4, public_sector_holiday),
	countries\paraguay.py:173: (DEC, 24, public_sector_holiday),
	countries\paraguay.py:174: (DEC, 31, public_sector_holiday),
	countries\paraguay.py:169: 2012: (
	countries\paraguay.py:177: 2013: (MAR, 27, public_sector_holiday),
	countries\paraguay.py:180: (APR, 16, public_sector_holiday),
	countries\paraguay.py:182: (DEC, 24, public_sector_holiday),
	countries\paraguay.py:183: (DEC, 31, public_sector_holiday),
	countries\paraguay.py:178: 2014: (
	countries\paraguay.py:187: (APR, 1, public_sector_holiday),
	countries\paraguay.py:189: (DEC, 24, public_sector_holiday),
	countries\paraguay.py:190: (DEC, 31, public_sector_holiday),
	countries\paraguay.py:185: 2015: (
	countries\paraguay.py:193: 2016: (MAR, 23, public_sector_holiday),
	countries\paraguay.py:195: 2017: (MAR, 28, public_sector_holiday),
	countries\paraguay.py:198: (DEC, 24, public_sector_holiday),
	countries\paraguay.py:199: (DEC, 31, public_sector_holiday),
	countries\paraguay.py:196: 2018: (
	countries\paraguay.py:203: (APR, 17, public_sector_holiday),
	countries\paraguay.py:205: (DEC, 24, public_sector_holiday),
	countries\paraguay.py:206: (DEC, 31, public_sector_holiday),
	countries\paraguay.py:201: 2019: (
	countries\paraguay.py:209: 2020: (APR, 8, public_sector_holiday),
	countries\paraguay.py:212: (DEC, 24, public_sector_holiday),
	countries\paraguay.py:213: (DEC, 31, public_sector_holiday),
	countries\paraguay.py:210: 2021: (
	countries\paraguay.py:217: (APR, 13, public_sector_holiday),
	countries\paraguay.py:219: (MAY, 2, public_sector_holiday),
	countries\paraguay.py:215: 2022: (
	countries\paraguay.py:156: special_government_holidays = {
	countries\__init__.py:116: from .peru import Peru, PE, PER
(call) countries\peru.py:0: <module>
	countries\peru.py:13: from gettext import gettext as tr
	countries\peru.py:15: from holidays.groups import ChristianHolidays, InternationalHolidays
	countries\peru.py:16: from holidays.holiday_base import HolidayBase
	countries\peru.py:19: class Peru(HolidayBase, ChristianHolidays, InternationalHolidays):
(call) countries\peru.py:19: Peru
	countries\peru.py:19: class Peru(HolidayBase, ChristianHolidays, InternationalHolidays):
	countries\peru.py:20: """
	countries\peru.py:28: country = "PE"
	countries\peru.py:29: default_language = "es"
	countries\peru.py:30: supported_languages = ("en_US", "es", "uk")
	countries\peru.py:32: def __init__(self, *args, **kwargs) -> None:
	countries\peru.py:37: def _populate_public_holidays(self):
	countries\peru.py:86: class PE(Peru):
(call) countries\peru.py:86: PE
	countries\peru.py:86: class PE(Peru):
	countries\peru.py:87: pass
	countries\peru.py:90: class PER(Peru):
(call) countries\peru.py:90: PER
	countries\peru.py:90: class PER(Peru):
	countries\peru.py:91: pass
	countries\__init__.py:117: from .philippines import Philippines, PH, PHL
(call) countries\philippines.py:0: <module>
	countries\philippines.py:13: from holidays.groups import (
	countries\philippines.py:19: from holidays.holiday_base import HolidayBase
	countries\philippines.py:22: class Philippines(
	countries\philippines.py:23: HolidayBase, ChineseCalendarHolidays, ChristianHolidays, InternationalHolidays, IslamicHolidays
	countries\philippines.py:22: class Philippines(
(call) countries\philippines.py:22: Philippines
	countries\philippines.py:22: class Philippines(
	countries\philippines.py:25: """
	countries\philippines.py:32: country = "PH"
	countries\philippines.py:34: def __init__(self, *args, **kwargs):
	countries\philippines.py:41: def _populate_public_holidays(self):
	countries\philippines.py:98: class PH(Philippines):
(call) countries\philippines.py:98: PH
	countries\philippines.py:98: class PH(Philippines):
	countries\philippines.py:99: pass
	countries\philippines.py:102: class PHL(Philippines):
(call) countries\philippines.py:102: PHL
	countries\philippines.py:102: class PHL(Philippines):
	countries\philippines.py:103: pass
	countries\__init__.py:118: from .poland import Poland, PL, POL
(call) countries\poland.py:0: <module>
	countries\poland.py:12: from datetime import timedelta as td
	countries\poland.py:13: from gettext import gettext as tr
	countries\poland.py:15: from holidays.calendars.gregorian import NOV
	countries\poland.py:16: from holidays.groups import ChristianHolidays, InternationalHolidays, StaticHolidays
	countries\poland.py:17: from holidays.holiday_base import HolidayBase
	countries\poland.py:20: class Poland(HolidayBase, ChristianHolidays, InternationalHolidays, StaticHolidays):
(call) countries\poland.py:20: Poland
	countries\poland.py:20: class Poland(HolidayBase, ChristianHolidays, InternationalHolidays, StaticHolidays):
	countries\poland.py:21: """
	countries\poland.py:25: country = "PL"
	countries\poland.py:26: default_language = "pl"
	countries\poland.py:27: supported_languages = ("en_US", "pl", "uk")
	countries\poland.py:29: def __init__(self, *args, **kwargs):
	countries\poland.py:35: def _populate_public_holidays(self):
	countries\poland.py:115: class PL(Poland):
(call) countries\poland.py:115: PL
	countries\poland.py:115: class PL(Poland):
	countries\poland.py:116: pass
	countries\poland.py:119: class POL(Poland):
(call) countries\poland.py:119: POL
	countries\poland.py:119: class POL(Poland):
	countries\poland.py:120: pass
	countries\poland.py:123: class PolandStaticHolidays:
(call) countries\poland.py:123: PolandStaticHolidays
	countries\poland.py:123: class PolandStaticHolidays:
	countries\poland.py:125: 2018: (NOV, 12, tr("Narodowe Święto Niepodległości - 100-lecie")),
	countries\poland.py:124: special_public_holidays = {
	countries\__init__.py:119: from .portugal import Portugal, PT, PRT
(call) countries\portugal.py:0: <module>
	countries\portugal.py:12: from datetime import timedelta as td
	countries\portugal.py:13: from gettext import gettext as tr
	countries\portugal.py:15: from holidays.constants import OPTIONAL, PUBLIC
	countries\portugal.py:16: from holidays.groups import ChristianHolidays, InternationalHolidays
	countries\portugal.py:17: from holidays.holiday_base import HolidayBase
	countries\portugal.py:20: class Portugal(HolidayBase, ChristianHolidays, InternationalHolidays):
(call) countries\portugal.py:20: Portugal
	countries\portugal.py:20: class Portugal(HolidayBase, ChristianHolidays, InternationalHolidays):
	countries\portugal.py:21: """
	countries\portugal.py:39: country = "PT"
	countries\portugal.py:40: default_language = "pt_PT"
	countries\portugal.py:41: supported_categories = (OPTIONAL, PUBLIC)
	countries\portugal.py:44: subdivisions = (
	countries\portugal.py:66: _deprecated_subdivisions = ("Ext",)
	countries\portugal.py:67: supported_languages = ("en_US", "pt_PT", "uk")
	countries\portugal.py:69: def __init__(self, *args, **kwargs) -> None:
	countries\portugal.py:74: def _populate_public_holidays(self):
	countries\portugal.py:132: def _populate_optional_holidays(self):
	countries\portugal.py:162: def _populate_subdiv_holidays(self):
	countries\portugal.py:169: def _populate_subdiv_01_public_holidays(self):
	countries\portugal.py:173: def _populate_subdiv_02_public_holidays(self):
	countries\portugal.py:177: def _populate_subdiv_03_public_holidays(self):
	countries\portugal.py:181: def _populate_subdiv_04_public_holidays(self):
	countries\portugal.py:185: def _populate_subdiv_05_public_holidays(self):
	countries\portugal.py:192: def _populate_subdiv_06_public_holidays(self):
	countries\portugal.py:196: def _populate_subdiv_07_public_holidays(self):
	countries\portugal.py:200: def _populate_subdiv_08_public_holidays(self):
	countries\portugal.py:204: def _populate_subdiv_09_public_holidays(self):
	countries\portugal.py:208: def _populate_subdiv_10_public_holidays(self):
	countries\portugal.py:212: def _populate_subdiv_11_public_holidays(self):
	countries\portugal.py:215: def _populate_subdiv_12_public_holidays(self):
	countries\portugal.py:219: def _populate_subdiv_13_public_holidays(self):
	countries\portugal.py:222: def _populate_subdiv_14_public_holidays(self):
	countries\portugal.py:226: def _populate_subdiv_15_public_holidays(self):
	countries\portugal.py:230: def _populate_subdiv_16_public_holidays(self):
	countries\portugal.py:234: def _populate_subdiv_17_public_holidays(self):
	countries\portugal.py:237: def _populate_subdiv_18_public_holidays(self):
	countries\portugal.py:241: def _populate_subdiv_20_public_holidays(self):
	countries\portugal.py:246: def _populate_subdiv_30_public_holidays(self):
	countries\portugal.py:261: class PT(Portugal):
(call) countries\portugal.py:261: PT
	countries\portugal.py:261: class PT(Portugal):
	countries\portugal.py:262: pass
	countries\portugal.py:265: class PRT(Portugal):
(call) countries\portugal.py:265: PRT
	countries\portugal.py:265: class PRT(Portugal):
	countries\portugal.py:266: pass
	countries\__init__.py:120: from .puerto_rico import PuertoRico, PR, PRI, HolidaysPR
(call) countries\puerto_rico.py:0: <module>
	countries\puerto_rico.py:12: from holidays.countries.united_states import US
	countries\puerto_rico.py:15: class HolidaysPR(US):
(call) countries\puerto_rico.py:15: HolidaysPR
	countries\puerto_rico.py:15: class HolidaysPR(US):
	countries\puerto_rico.py:20: country = "PR"
	countries\puerto_rico.py:21: subdivisions = ()  # Override US subdivisions.
	countries\puerto_rico.py:23: def _populate_public_holidays(self) -> None:
	countries\puerto_rico.py:28: class PR(HolidaysPR):
(call) countries\puerto_rico.py:28: PR
	countries\puerto_rico.py:28: class PR(HolidaysPR):
	countries\puerto_rico.py:29: pass
	countries\puerto_rico.py:32: class PRI(HolidaysPR):
(call) countries\puerto_rico.py:32: PRI
	countries\puerto_rico.py:32: class PRI(HolidaysPR):
	countries\puerto_rico.py:33: pass
	countries\puerto_rico.py:36: class PuertoRico(HolidaysPR):
(call) countries\puerto_rico.py:36: PuertoRico
	countries\puerto_rico.py:36: class PuertoRico(HolidaysPR):
	countries\puerto_rico.py:37: pass
	countries\__init__.py:121: from .romania import Romania, RO, ROU
(call) countries\romania.py:0: <module>
	countries\romania.py:12: from gettext import gettext as tr
	countries\romania.py:14: from holidays.calendars.julian_revised import JULIAN_REVISED_CALENDAR
	countries\romania.py:15: from holidays.groups import ChristianHolidays, InternationalHolidays
	countries\romania.py:16: from holidays.holiday_base import HolidayBase
	countries\romania.py:19: class Romania(HolidayBase, ChristianHolidays, InternationalHolidays):
(call) countries\romania.py:19: Romania
	countries\romania.py:19: class Romania(HolidayBase, ChristianHolidays, InternationalHolidays):
	countries\romania.py:20: """
	countries\romania.py:25: country = "RO"
	countries\romania.py:26: default_language = "ro"
	countries\romania.py:27: supported_languages = ("en_US", "ro", "uk")
	countries\romania.py:29: def __init__(self, *args, **kwargs):
	countries\romania.py:34: def _populate_public_holidays(self):
	countries\romania.py:90: class RO(Romania):
(call) countries\romania.py:90: RO
	countries\romania.py:90: class RO(Romania):
	countries\romania.py:91: pass
	countries\romania.py:94: class ROU(Romania):
(call) countries\romania.py:94: ROU
	countries\romania.py:94: class ROU(Romania):
	countries\romania.py:95: pass
	countries\__init__.py:122: from .russia import Russia, RU, RUS
(call) countries\russia.py:0: <module>
	countries\russia.py:12: from gettext import gettext as tr
	countries\russia.py:14: from holidays.calendars.gregorian import JAN, FEB, MAY
	countries\russia.py:15: from holidays.calendars.julian import JULIAN_CALENDAR
	countries\russia.py:16: from holidays.groups import ChristianHolidays, InternationalHolidays, StaticHolidays
	countries\russia.py:17: from holidays.holiday_base import HolidayBase
	countries\russia.py:20: class Russia(HolidayBase, ChristianHolidays, InternationalHolidays, StaticHolidays):
(call) countries\russia.py:20: Russia
	countries\russia.py:20: class Russia(HolidayBase, ChristianHolidays, InternationalHolidays, StaticHolidays):
	countries\russia.py:21: """
	countries\russia.py:25: country = "RU"
	countries\russia.py:26: default_language = "ru"
	countries\russia.py:27: supported_languages = ("en_US", "ru")
	countries\russia.py:29: def __init__(self, *args, **kwargs):
	countries\russia.py:35: def _populate_public_holidays(self):
	countries\russia.py:106: class RU(Russia):
(call) countries\russia.py:106: RU
	countries\russia.py:106: class RU(Russia):
	countries\russia.py:107: pass
	countries\russia.py:110: class RUS(Russia):
(call) countries\russia.py:110: RUS
	countries\russia.py:110: class RUS(Russia):
	countries\russia.py:111: pass
	countries\russia.py:114: class RussiaStaticHolidays:
(call) countries\russia.py:114: RussiaStaticHolidays
	countries\russia.py:114: class RussiaStaticHolidays:
	countries\russia.py:118: 2023: (
	countries\russia.py:119: (FEB, 24, tr("День защитника Отечества")),
	countries\russia.py:120: (MAY, 8, tr("День Победы")),
	countries\russia.py:118: 2023: (
	countries\russia.py:115: special_public_holidays = {
	countries\__init__.py:123: from .san_marino import SanMarino, SM, SMR
(call) countries\san_marino.py:0: <module>
	countries\san_marino.py:12: from holidays.groups import ChristianHolidays, InternationalHolidays
	countries\san_marino.py:13: from holidays.holiday_base import HolidayBase
	countries\san_marino.py:16: class SanMarino(HolidayBase, ChristianHolidays, InternationalHolidays):
(call) countries\san_marino.py:16: SanMarino
	countries\san_marino.py:16: class SanMarino(HolidayBase, ChristianHolidays, InternationalHolidays):
	countries\san_marino.py:17: """
	countries\san_marino.py:22: country = "SM"
	countries\san_marino.py:24: def __init__(self, *args, **kwargs):
	countries\san_marino.py:29: def _populate_public_holidays(self) -> None:
	countries\san_marino.py:85: class SM(SanMarino):
(call) countries\san_marino.py:85: SM
	countries\san_marino.py:85: class SM(SanMarino):
	countries\san_marino.py:86: pass
	countries\san_marino.py:89: class SMR(SanMarino):
(call) countries\san_marino.py:89: SMR
	countries\san_marino.py:89: class SMR(SanMarino):
	countries\san_marino.py:90: pass
	countries\__init__.py:124: from .saudi_arabia import SaudiArabia, SA, SAU
(call) countries\saudi_arabia.py:0: <module>
	countries\saudi_arabia.py:12: from datetime import date
	countries\saudi_arabia.py:13: from datetime import timedelta as td
	countries\saudi_arabia.py:14: from gettext import gettext as tr
	countries\saudi_arabia.py:15: from typing import Set
	countries\saudi_arabia.py:17: from holidays.calendars.gregorian import JAN, FEB, SEP, NOV, THU, FRI, SAT
	countries\saudi_arabia.py:18: from holidays.groups import IslamicHolidays, StaticHolidays
	countries\saudi_arabia.py:19: from holidays.observed_holiday_base import (
	countries\saudi_arabia.py:30: class SaudiArabia(ObservedHolidayBase, IslamicHolidays, StaticHolidays):
(call) countries\saudi_arabia.py:30: SaudiArabia
	countries\saudi_arabia.py:30: class SaudiArabia(ObservedHolidayBase, IslamicHolidays, StaticHolidays):
	countries\saudi_arabia.py:31: """
	countries\saudi_arabia.py:46: country = "SA"
	countries\saudi_arabia.py:47: default_language = "ar"
	countries\saudi_arabia.py:49: estimated_label = tr("(تقدير) %s")
	countries\saudi_arabia.py:51: observed_label = tr("(ملاحظة) %s")
	countries\saudi_arabia.py:53: observed_estimated_label = tr("(تقدير ملاحظة) %s")
	countries\saudi_arabia.py:54: supported_languages = ("ar", "en_US")
	countries\saudi_arabia.py:56: def __init__(self, *args, **kwargs):
	countries\saudi_arabia.py:62: def _add_islamic_observed(self, dts: Set[date]) -> None:
	countries\saudi_arabia.py:71: def _populate_public_holidays(self):
	countries\saudi_arabia.py:114: class SA(SaudiArabia):
(call) countries\saudi_arabia.py:114: SA
	countries\saudi_arabia.py:114: class SA(SaudiArabia):
	countries\saudi_arabia.py:115: pass
	countries\saudi_arabia.py:118: class SAU(SaudiArabia):
(call) countries\saudi_arabia.py:118: SAU
	countries\saudi_arabia.py:118: class SAU(SaudiArabia):
	countries\saudi_arabia.py:119: pass
	countries\saudi_arabia.py:122: class SaudiArabiaStaticHolidays:
(call) countries\saudi_arabia.py:122: SaudiArabiaStaticHolidays
	countries\saudi_arabia.py:122: class SaudiArabiaStaticHolidays:
	countries\saudi_arabia.py:125: 2022: (NOV, 23, tr("يوم وطني")),
	countries\saudi_arabia.py:123: special_public_holidays = {
	countries\saudi_arabia.py:130: 2001: (JAN, 1, tr("عطلة عيد الفطر")),
	countries\saudi_arabia.py:128: special_public_holidays_observed = {
	countries\__init__.py:125: from .serbia import Serbia, RS, SRB
(call) countries\serbia.py:0: <module>
	countries\serbia.py:12: from gettext import gettext as tr
	countries\serbia.py:14: from holidays.calendars.julian import JULIAN_CALENDAR
	countries\serbia.py:15: from holidays.groups import ChristianHolidays, InternationalHolidays
	countries\serbia.py:16: from holidays.observed_holiday_base import ObservedHolidayBase, SUN_TO_NEXT_MON, SUN_TO_NEXT_TUE
	countries\serbia.py:19: class Serbia(ObservedHolidayBase, ChristianHolidays, InternationalHolidays):
(call) countries\serbia.py:19: Serbia
	countries\serbia.py:19: class Serbia(ObservedHolidayBase, ChristianHolidays, InternationalHolidays):
	countries\serbia.py:20: """
	countries\serbia.py:27: country = "RS"
	countries\serbia.py:28: default_language = "sr"
	countries\serbia.py:30: observed_label = tr("%s (слободан дан)")
	countries\serbia.py:31: supported_languages = ("en_US", "sr")
	countries\serbia.py:33: def __init__(self, *args, **kwargs):
	countries\serbia.py:39: def _populate_public_holidays(self):
	countries\serbia.py:75: class RS(Serbia):
(call) countries\serbia.py:75: RS
	countries\serbia.py:75: class RS(Serbia):
	countries\serbia.py:76: pass
	countries\serbia.py:79: class SRB(Serbia):
(call) countries\serbia.py:79: SRB
	countries\serbia.py:79: class SRB(Serbia):
	countries\serbia.py:80: pass
	countries\__init__.py:126: from .singapore import Singapore, SG, SGP
(call) countries\singapore.py:0: <module>
	countries\singapore.py:12: from holidays.calendars import (
	countries\singapore.py:18: from holidays.calendars.gregorian import JAN, FEB, MAR, APR, MAY, JUN, JUL, AUG, SEP, OCT, NOV, DEC
	countries\singapore.py:19: from holidays.groups import (
	countries\singapore.py:28: from holidays.observed_holiday_base import ObservedHolidayBase, SUN_TO_NEXT_WORKDAY
	countries\singapore.py:31: class Singapore(
	countries\singapore.py:32: ObservedHolidayBase,
	countries\singapore.py:33: BuddhistCalendarHolidays,
	countries\singapore.py:34: ChineseCalendarHolidays,
	countries\singapore.py:35: ChristianHolidays,
	countries\singapore.py:36: HinduCalendarHolidays,
	countries\singapore.py:37: InternationalHolidays,
	countries\singapore.py:38: IslamicHolidays,
	countries\singapore.py:39: StaticHolidays,
	countries\singapore.py:31: class Singapore(
(call) countries\singapore.py:31: Singapore
	countries\singapore.py:31: class Singapore(
	countries\singapore.py:41: country = "SG"
	countries\singapore.py:42: observed_label = "%s (observed)"
	countries\singapore.py:44: def __init__(self, *args, **kwargs):
	countries\singapore.py:93: def _populate_public_holidays(self) -> None:
	countries\singapore.py:145: class SG(Singapore):
(call) countries\singapore.py:145: SG
	countries\singapore.py:145: class SG(Singapore):
	countries\singapore.py:146: pass
	countries\singapore.py:149: class SGP(Singapore):
(call) countries\singapore.py:149: SGP
	countries\singapore.py:149: class SGP(Singapore):
	countries\singapore.py:150: pass
	countries\singapore.py:153: class SingaporeBuddhistHolidays(_CustomBuddhistHolidays):
(call) countries\singapore.py:153: SingaporeBuddhistHolidays
	countries\singapore.py:153: class SingaporeBuddhistHolidays(_CustomBuddhistHolidays):
	countries\singapore.py:154: VESAK_DATES = {
	countries\singapore.py:155: 2001: (MAY, 7),
	countries\singapore.py:154: VESAK_DATES = {
	countries\singapore.py:156: 2002: (MAY, 26),
	countries\singapore.py:154: VESAK_DATES = {
	countries\singapore.py:157: 2003: (MAY, 15),
	countries\singapore.py:154: VESAK_DATES = {
	countries\singapore.py:158: 2004: (JUN, 2),
	countries\singapore.py:154: VESAK_DATES = {
	countries\singapore.py:159: 2005: (MAY, 22),
	countries\singapore.py:154: VESAK_DATES = {
	countries\singapore.py:160: 2006: (MAY, 12),
	countries\singapore.py:154: VESAK_DATES = {
	countries\singapore.py:161: 2007: (MAY, 31),
	countries\singapore.py:154: VESAK_DATES = {
	countries\singapore.py:162: 2008: (MAY, 19),
	countries\singapore.py:154: VESAK_DATES = {
	countries\singapore.py:163: 2009: (MAY, 9),
	countries\singapore.py:154: VESAK_DATES = {
	countries\singapore.py:164: 2010: (MAY, 28),
	countries\singapore.py:154: VESAK_DATES = {
	countries\singapore.py:165: 2011: (MAY, 17),
	countries\singapore.py:154: VESAK_DATES = {
	countries\singapore.py:166: 2012: (MAY, 5),
	countries\singapore.py:154: VESAK_DATES = {
	countries\singapore.py:167: 2013: (MAY, 24),
	countries\singapore.py:154: VESAK_DATES = {
	countries\singapore.py:168: 2014: (MAY, 13),
	countries\singapore.py:154: VESAK_DATES = {
	countries\singapore.py:169: 2015: (JUN, 1),
	countries\singapore.py:154: VESAK_DATES = {
	countries\singapore.py:170: 2016: (MAY, 21),
	countries\singapore.py:154: VESAK_DATES = {
	countries\singapore.py:171: 2017: (MAY, 10),
	countries\singapore.py:154: VESAK_DATES = {
	countries\singapore.py:172: 2018: (MAY, 29),
	countries\singapore.py:173: 2019: (MAY, 19),
	countries\singapore.py:174: 2020: (MAY, 7),
	countries\singapore.py:175: 2021: (MAY, 26),
	countries\singapore.py:176: 2022: (MAY, 15),
	countries\singapore.py:177: 2023: (JUN, 2),
	countries\singapore.py:178: 2024: (MAY, 22),
	countries\singapore.py:154: VESAK_DATES = {
(call) calendars\custom.py:24: __new__
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
(call) calendars\custom.py:25: <genexpr>
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:26: namespace[f"{attr}_{_CustomCalendar.CUSTOM_ATTR_POSTFIX}"] = namespace[attr]
	calendars\custom.py:27: del namespace[attr]
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
(call) calendars\custom.py:25: <genexpr>
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:29: return super().__new__(cls, name, bases, namespace)
	countries\singapore.py:182: class SingaporeChineseHolidays(_CustomChineseHolidays):
(call) countries\singapore.py:182: SingaporeChineseHolidays
	countries\singapore.py:182: class SingaporeChineseHolidays(_CustomChineseHolidays):
	countries\singapore.py:183: LUNAR_NEW_YEAR_DATES = {
	countries\singapore.py:184: 2001: (JAN, 24),
	countries\singapore.py:183: LUNAR_NEW_YEAR_DATES = {
	countries\singapore.py:185: 2002: (FEB, 12),
	countries\singapore.py:183: LUNAR_NEW_YEAR_DATES = {
	countries\singapore.py:186: 2003: (FEB, 1),
	countries\singapore.py:183: LUNAR_NEW_YEAR_DATES = {
	countries\singapore.py:187: 2004: (JAN, 22),
	countries\singapore.py:183: LUNAR_NEW_YEAR_DATES = {
	countries\singapore.py:188: 2005: (FEB, 9),
	countries\singapore.py:183: LUNAR_NEW_YEAR_DATES = {
	countries\singapore.py:189: 2006: (JAN, 30),
	countries\singapore.py:183: LUNAR_NEW_YEAR_DATES = {
	countries\singapore.py:190: 2007: (FEB, 19),
	countries\singapore.py:183: LUNAR_NEW_YEAR_DATES = {
	countries\singapore.py:191: 2008: (FEB, 7),
	countries\singapore.py:183: LUNAR_NEW_YEAR_DATES = {
	countries\singapore.py:192: 2009: (JAN, 26),
	countries\singapore.py:183: LUNAR_NEW_YEAR_DATES = {
	countries\singapore.py:193: 2010: (FEB, 14),
	countries\singapore.py:183: LUNAR_NEW_YEAR_DATES = {
	countries\singapore.py:194: 2011: (FEB, 3),
	countries\singapore.py:183: LUNAR_NEW_YEAR_DATES = {
	countries\singapore.py:195: 2012: (JAN, 23),
	countries\singapore.py:183: LUNAR_NEW_YEAR_DATES = {
	countries\singapore.py:196: 2013: (FEB, 10),
	countries\singapore.py:183: LUNAR_NEW_YEAR_DATES = {
	countries\singapore.py:197: 2014: (JAN, 31),
	countries\singapore.py:183: LUNAR_NEW_YEAR_DATES = {
	countries\singapore.py:198: 2015: (FEB, 19),
	countries\singapore.py:183: LUNAR_NEW_YEAR_DATES = {
	countries\singapore.py:199: 2016: (FEB, 8),
	countries\singapore.py:183: LUNAR_NEW_YEAR_DATES = {
	countries\singapore.py:200: 2017: (JAN, 28),
	countries\singapore.py:183: LUNAR_NEW_YEAR_DATES = {
	countries\singapore.py:201: 2018: (FEB, 16),
	countries\singapore.py:202: 2019: (FEB, 5),
	countries\singapore.py:203: 2020: (JAN, 25),
	countries\singapore.py:204: 2021: (FEB, 12),
	countries\singapore.py:205: 2022: (FEB, 1),
	countries\singapore.py:206: 2023: (JAN, 22),
	countries\singapore.py:207: 2024: (FEB, 10),
	countries\singapore.py:183: LUNAR_NEW_YEAR_DATES = {
(call) calendars\custom.py:24: __new__
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
(call) calendars\custom.py:25: <genexpr>
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:26: namespace[f"{attr}_{_CustomCalendar.CUSTOM_ATTR_POSTFIX}"] = namespace[attr]
	calendars\custom.py:27: del namespace[attr]
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
(call) calendars\custom.py:25: <genexpr>
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:29: return super().__new__(cls, name, bases, namespace)
	countries\singapore.py:211: class SingaporeHinduHolidays(_CustomHinduHolidays):
(call) countries\singapore.py:211: SingaporeHinduHolidays
	countries\singapore.py:211: class SingaporeHinduHolidays(_CustomHinduHolidays):
	countries\singapore.py:212: DIWALI_DATES = {
	countries\singapore.py:213: 2001: (NOV, 14),
	countries\singapore.py:212: DIWALI_DATES = {
	countries\singapore.py:214: 2002: (NOV, 3),
	countries\singapore.py:212: DIWALI_DATES = {
	countries\singapore.py:215: 2003: (OCT, 23),
	countries\singapore.py:212: DIWALI_DATES = {
	countries\singapore.py:216: 2004: (NOV, 11),
	countries\singapore.py:212: DIWALI_DATES = {
	countries\singapore.py:217: 2005: (NOV, 1),
	countries\singapore.py:212: DIWALI_DATES = {
	countries\singapore.py:218: 2006: (OCT, 21),
	countries\singapore.py:212: DIWALI_DATES = {
	countries\singapore.py:219: 2007: (NOV, 8),
	countries\singapore.py:212: DIWALI_DATES = {
	countries\singapore.py:220: 2008: (OCT, 27),
	countries\singapore.py:212: DIWALI_DATES = {
	countries\singapore.py:221: 2009: (NOV, 15),
	countries\singapore.py:212: DIWALI_DATES = {
	countries\singapore.py:222: 2010: (NOV, 5),
	countries\singapore.py:212: DIWALI_DATES = {
	countries\singapore.py:223: 2011: (OCT, 26),
	countries\singapore.py:212: DIWALI_DATES = {
	countries\singapore.py:224: 2012: (NOV, 13),
	countries\singapore.py:212: DIWALI_DATES = {
	countries\singapore.py:225: 2013: (NOV, 2),
	countries\singapore.py:212: DIWALI_DATES = {
	countries\singapore.py:226: 2014: (OCT, 22),
	countries\singapore.py:212: DIWALI_DATES = {
	countries\singapore.py:227: 2015: (NOV, 10),
	countries\singapore.py:212: DIWALI_DATES = {
	countries\singapore.py:228: 2016: (OCT, 29),
	countries\singapore.py:212: DIWALI_DATES = {
	countries\singapore.py:229: 2017: (OCT, 18),
	countries\singapore.py:212: DIWALI_DATES = {
	countries\singapore.py:230: 2018: (NOV, 6),
	countries\singapore.py:231: 2019: (OCT, 27),
	countries\singapore.py:232: 2020: (NOV, 14),
	countries\singapore.py:233: 2021: (NOV, 4),
	countries\singapore.py:234: 2022: (OCT, 24),
	countries\singapore.py:235: 2023: (NOV, 12),
	countries\singapore.py:236: 2024: (OCT, 31),
	countries\singapore.py:212: DIWALI_DATES = {
(call) calendars\custom.py:24: __new__
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
(call) calendars\custom.py:25: <genexpr>
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:26: namespace[f"{attr}_{_CustomCalendar.CUSTOM_ATTR_POSTFIX}"] = namespace[attr]
	calendars\custom.py:27: del namespace[attr]
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
(call) calendars\custom.py:25: <genexpr>
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:29: return super().__new__(cls, name, bases, namespace)
	countries\singapore.py:240: class SingaporeIslamicHolidays(_CustomIslamicHolidays):
(call) countries\singapore.py:240: SingaporeIslamicHolidays
	countries\singapore.py:240: class SingaporeIslamicHolidays(_CustomIslamicHolidays):
	countries\singapore.py:241: EID_AL_ADHA_DATES = {
	countries\singapore.py:242: 2001: (MAR, 6),
	countries\singapore.py:241: EID_AL_ADHA_DATES = {
	countries\singapore.py:243: 2002: (FEB, 23),
	countries\singapore.py:241: EID_AL_ADHA_DATES = {
	countries\singapore.py:244: 2003: (FEB, 12),
	countries\singapore.py:241: EID_AL_ADHA_DATES = {
	countries\singapore.py:245: 2004: (FEB, 1),
	countries\singapore.py:241: EID_AL_ADHA_DATES = {
	countries\singapore.py:246: 2005: (JAN, 21),
	countries\singapore.py:241: EID_AL_ADHA_DATES = {
	countries\singapore.py:247: 2006: ((JAN, 10), (DEC, 31)),
	countries\singapore.py:241: EID_AL_ADHA_DATES = {
	countries\singapore.py:248: 2007: (DEC, 20),
	countries\singapore.py:241: EID_AL_ADHA_DATES = {
	countries\singapore.py:249: 2008: (DEC, 8),
	countries\singapore.py:241: EID_AL_ADHA_DATES = {
	countries\singapore.py:250: 2009: (NOV, 27),
	countries\singapore.py:241: EID_AL_ADHA_DATES = {
	countries\singapore.py:251: 2010: (NOV, 17),
	countries\singapore.py:241: EID_AL_ADHA_DATES = {
	countries\singapore.py:252: 2011: (NOV, 6),
	countries\singapore.py:241: EID_AL_ADHA_DATES = {
	countries\singapore.py:253: 2012: (OCT, 26),
	countries\singapore.py:241: EID_AL_ADHA_DATES = {
	countries\singapore.py:254: 2013: (OCT, 15),
	countries\singapore.py:241: EID_AL_ADHA_DATES = {
	countries\singapore.py:255: 2014: (OCT, 5),
	countries\singapore.py:241: EID_AL_ADHA_DATES = {
	countries\singapore.py:256: 2015: (SEP, 24),
	countries\singapore.py:241: EID_AL_ADHA_DATES = {
	countries\singapore.py:257: 2016: (SEP, 12),
	countries\singapore.py:241: EID_AL_ADHA_DATES = {
	countries\singapore.py:258: 2017: (SEP, 1),
	countries\singapore.py:241: EID_AL_ADHA_DATES = {
	countries\singapore.py:259: 2018: (AUG, 22),
	countries\singapore.py:260: 2019: (AUG, 11),
	countries\singapore.py:261: 2020: (JUL, 31),
	countries\singapore.py:262: 2021: (JUL, 20),
	countries\singapore.py:263: 2022: (JUL, 10),
	countries\singapore.py:264: 2023: (JUN, 29),
	countries\singapore.py:265: 2024: (JUN, 17),
	countries\singapore.py:241: EID_AL_ADHA_DATES = {
	countries\singapore.py:268: EID_AL_FITR_DATES = {
	countries\singapore.py:269: 2001: (DEC, 16),
	countries\singapore.py:268: EID_AL_FITR_DATES = {
	countries\singapore.py:270: 2002: (DEC, 6),
	countries\singapore.py:268: EID_AL_FITR_DATES = {
	countries\singapore.py:271: 2003: (NOV, 25),
	countries\singapore.py:268: EID_AL_FITR_DATES = {
	countries\singapore.py:272: 2004: (NOV, 14),
	countries\singapore.py:268: EID_AL_FITR_DATES = {
	countries\singapore.py:273: 2005: (NOV, 3),
	countries\singapore.py:268: EID_AL_FITR_DATES = {
	countries\singapore.py:274: 2006: (OCT, 24),
	countries\singapore.py:268: EID_AL_FITR_DATES = {
	countries\singapore.py:275: 2007: (OCT, 13),
	countries\singapore.py:268: EID_AL_FITR_DATES = {
	countries\singapore.py:276: 2008: (OCT, 1),
	countries\singapore.py:268: EID_AL_FITR_DATES = {
	countries\singapore.py:277: 2009: (SEP, 20),
	countries\singapore.py:268: EID_AL_FITR_DATES = {
	countries\singapore.py:278: 2010: (SEP, 10),
	countries\singapore.py:268: EID_AL_FITR_DATES = {
	countries\singapore.py:279: 2011: (AUG, 30),
	countries\singapore.py:268: EID_AL_FITR_DATES = {
	countries\singapore.py:280: 2012: (AUG, 19),
	countries\singapore.py:268: EID_AL_FITR_DATES = {
	countries\singapore.py:281: 2013: (AUG, 8),
	countries\singapore.py:268: EID_AL_FITR_DATES = {
	countries\singapore.py:282: 2014: (JUL, 28),
	countries\singapore.py:268: EID_AL_FITR_DATES = {
	countries\singapore.py:283: 2015: (JUL, 17),
	countries\singapore.py:268: EID_AL_FITR_DATES = {
	countries\singapore.py:284: 2016: (JUL, 6),
	countries\singapore.py:268: EID_AL_FITR_DATES = {
	countries\singapore.py:285: 2017: (JUN, 25),
	countries\singapore.py:268: EID_AL_FITR_DATES = {
	countries\singapore.py:286: 2018: (JUN, 15),
	countries\singapore.py:287: 2019: (JUN, 5),
	countries\singapore.py:288: 2020: (MAY, 24),
	countries\singapore.py:289: 2021: (MAY, 13),
	countries\singapore.py:290: 2022: (MAY, 3),
	countries\singapore.py:291: 2023: (APR, 22),
	countries\singapore.py:292: 2024: (APR, 10),
	countries\singapore.py:268: EID_AL_FITR_DATES = {
(call) calendars\custom.py:24: __new__
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
(call) calendars\custom.py:25: <genexpr>
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:26: namespace[f"{attr}_{_CustomCalendar.CUSTOM_ATTR_POSTFIX}"] = namespace[attr]
	calendars\custom.py:27: del namespace[attr]
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
(call) calendars\custom.py:25: <genexpr>
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:26: namespace[f"{attr}_{_CustomCalendar.CUSTOM_ATTR_POSTFIX}"] = namespace[attr]
	calendars\custom.py:27: del namespace[attr]
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
(call) calendars\custom.py:25: <genexpr>
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:29: return super().__new__(cls, name, bases, namespace)
	countries\singapore.py:296: class SingaporeStaticHolidays:
(call) countries\singapore.py:296: SingaporeStaticHolidays
	countries\singapore.py:296: class SingaporeStaticHolidays:
	countries\singapore.py:298: 2001: (NOV, 3, "Polling Day"),
	countries\singapore.py:299: 2006: (MAY, 6, "Polling Day"),
	countries\singapore.py:300: 2011: (MAY, 7, "Polling Day"),
	countries\singapore.py:305: (AUG, 7, "SG50 Public Holiday"),
	countries\singapore.py:306: (SEP, 11, "Polling Day"),
	countries\singapore.py:301: 2015: (
	countries\singapore.py:308: 2020: (JUL, 10, "Polling Day"),
	countries\singapore.py:311: 2023: (SEP, 1, "Polling Day"),
	countries\singapore.py:297: special_public_holidays = {
	countries\singapore.py:315: 2007: (JAN, 2, "Hari Raya Haji"),
	countries\singapore.py:314: special_public_holidays_observed = {
	countries\__init__.py:127: from .slovakia import Slovakia, SK, SVK
(call) countries\slovakia.py:0: <module>
	countries\slovakia.py:12: from gettext import gettext as tr
	countries\slovakia.py:14: from holidays.calendars.gregorian import OCT
	countries\slovakia.py:15: from holidays.constants import PUBLIC, WORKDAY
	countries\slovakia.py:16: from holidays.groups import ChristianHolidays, InternationalHolidays, StaticHolidays
	countries\slovakia.py:17: from holidays.holiday_base import HolidayBase
	countries\slovakia.py:20: class Slovakia(HolidayBase, ChristianHolidays, InternationalHolidays, StaticHolidays):
(call) countries\slovakia.py:20: Slovakia
	countries\slovakia.py:20: class Slovakia(HolidayBase, ChristianHolidays, InternationalHolidays, StaticHolidays):
	countries\slovakia.py:21: """
	countries\slovakia.py:27: country = "SK"
	countries\slovakia.py:28: default_language = "sk"
	countries\slovakia.py:29: supported_categories = (PUBLIC, WORKDAY)
	countries\slovakia.py:30: supported_languages = ("en_US", "sk", "uk")
	countries\slovakia.py:32: def __init__(self, *args, **kwargs):
	countries\slovakia.py:38: def _populate_public_holidays(self):
	countries\slovakia.py:93: def _populate_workday_holidays(self):
	countries\slovakia.py:100: class SK(Slovakia):
(call) countries\slovakia.py:100: SK
	countries\slovakia.py:100: class SK(Slovakia):
	countries\slovakia.py:101: pass
	countries\slovakia.py:104: class SVK(Slovakia):
(call) countries\slovakia.py:104: SVK
	countries\slovakia.py:104: class SVK(Slovakia):
	countries\slovakia.py:105: pass
	countries\slovakia.py:108: class SlovakiaStaticHolidays:
(call) countries\slovakia.py:108: SlovakiaStaticHolidays
	countries\slovakia.py:108: class SlovakiaStaticHolidays:
	countries\slovakia.py:112: 2018: (OCT, 30, tr("100. výročie prijatia Deklarácie slovenského národa"))
	countries\slovakia.py:109: special_public_holidays = {
	countries\__init__.py:128: from .slovenia import Slovenia, SI, SVN
(call) countries\slovenia.py:0: <module>
	countries\slovenia.py:12: from gettext import gettext as tr
	countries\slovenia.py:14: from holidays.calendars.gregorian import AUG
	countries\slovenia.py:15: from holidays.groups import ChristianHolidays, InternationalHolidays, StaticHolidays
	countries\slovenia.py:16: from holidays.holiday_base import HolidayBase
	countries\slovenia.py:19: class Slovenia(HolidayBase, ChristianHolidays, InternationalHolidays, StaticHolidays):
(call) countries\slovenia.py:19: Slovenia
	countries\slovenia.py:19: class Slovenia(HolidayBase, ChristianHolidays, InternationalHolidays, StaticHolidays):
	countries\slovenia.py:20: """
	countries\slovenia.py:30: country = "SI"
	countries\slovenia.py:31: default_language = "sl"
	countries\slovenia.py:32: supported_languages = ("en_US", "sl", "uk")
	countries\slovenia.py:34: def __init__(self, *args, **kwargs):
	countries\slovenia.py:40: def _populate_public_holidays(self):
	countries\slovenia.py:84: class SI(Slovenia):
(call) countries\slovenia.py:84: SI
	countries\slovenia.py:84: class SI(Slovenia):
	countries\slovenia.py:85: pass
	countries\slovenia.py:88: class SVN(Slovenia):
(call) countries\slovenia.py:88: SVN
	countries\slovenia.py:88: class SVN(Slovenia):
	countries\slovenia.py:89: pass
	countries\slovenia.py:92: class SloveniaStaticHolidays:
(call) countries\slovenia.py:92: SloveniaStaticHolidays
	countries\slovenia.py:92: class SloveniaStaticHolidays:
	countries\slovenia.py:95: 2023: (AUG, 14, tr("dan solidarnosti")),
	countries\slovenia.py:93: special_public_holidays = {
	countries\__init__.py:129: from .south_africa import SouthAfrica, ZA, ZAF
(call) countries\south_africa.py:0: <module>
	countries\south_africa.py:12: from holidays.calendars.gregorian import JAN, MAR, APR, MAY, JUN, AUG, NOV, DEC
	countries\south_africa.py:13: from holidays.groups import ChristianHolidays, InternationalHolidays, StaticHolidays
	countries\south_africa.py:14: from holidays.observed_holiday_base import ObservedHolidayBase, SUN_TO_NEXT_MON
	countries\south_africa.py:17: class SouthAfrica(ObservedHolidayBase, ChristianHolidays, InternationalHolidays, StaticHolidays):
(call) countries\south_africa.py:17: SouthAfrica
	countries\south_africa.py:17: class SouthAfrica(ObservedHolidayBase, ChristianHolidays, InternationalHolidays, StaticHolidays):
	countries\south_africa.py:18: """
	countries\south_africa.py:24: country = "ZA"
	countries\south_africa.py:25: observed_label = "%s (observed)"
	countries\south_africa.py:27: def __init__(self, *args, **kwargs):
	countries\south_africa.py:35: def _populate_public_holidays(self):
	countries\south_africa.py:111: class ZA(SouthAfrica):
(call) countries\south_africa.py:111: ZA
	countries\south_africa.py:111: class ZA(SouthAfrica):
	countries\south_africa.py:112: pass
	countries\south_africa.py:115: class ZAF(SouthAfrica):
(call) countries\south_africa.py:115: ZAF
	countries\south_africa.py:115: class ZAF(SouthAfrica):
	countries\south_africa.py:116: pass
	countries\south_africa.py:119: class SouthAfricaStaticHolidays:
(call) countries\south_africa.py:119: SouthAfricaStaticHolidays
	countries\south_africa.py:119: class SouthAfricaStaticHolidays:
	countries\south_africa.py:120: local_elections = "Local government elections"
	countries\south_africa.py:121: municipal_elections = "Municipal elections"
	countries\south_africa.py:122: national_and_provincial_elections = "National and provincial government elections"
	countries\south_africa.py:123: presidential_decree_holiday = "Public holiday by presidential decree"
	countries\south_africa.py:124: y2k_changeover = "Y2K changeover"
	countries\south_africa.py:127: (JUN, 2, national_and_provincial_elections),
	countries\south_africa.py:128: (DEC, 31, y2k_changeover),
	countries\south_africa.py:126: 1999: (
	countries\south_africa.py:130: 2000: (JAN, 2, y2k_changeover),
	countries\south_africa.py:131: 2004: (APR, 14, national_and_provincial_elections),
	countries\south_africa.py:132: 2006: (MAR, 1, local_elections),
	countries\south_africa.py:133: 2008: (MAY, 2, presidential_decree_holiday),
	countries\south_africa.py:134: 2009: (APR, 22, national_and_provincial_elections),
	countries\south_africa.py:136: (MAY, 18, local_elections),
	countries\south_africa.py:137: (DEC, 27, presidential_decree_holiday),
	countries\south_africa.py:135: 2011: (
	countries\south_africa.py:139: 2014: (MAY, 7, national_and_provincial_elections),
	countries\south_africa.py:141: (AUG, 3, local_elections),
	countries\south_africa.py:142: (DEC, 27, presidential_decree_holiday),
	countries\south_africa.py:140: 2016: (
	countries\south_africa.py:144: 2019: (MAY, 8, national_and_provincial_elections),
	countries\south_africa.py:145: 2021: (NOV, 1, municipal_elections),
	countries\south_africa.py:146: 2022: (DEC, 27, presidential_decree_holiday),
	countries\south_africa.py:148: 2023: (DEC, 15, presidential_decree_holiday),
	countries\south_africa.py:125: special_public_holidays = {
	countries\south_africa.py:153: 2000: (JAN, 3, y2k_changeover),
	countries\south_africa.py:151: special_public_holidays_observed = {
	countries\__init__.py:130: from .south_korea import SouthKorea, KR, KOR, Korea
(call) countries\south_korea.py:0: <module>
	countries\south_korea.py:12: import warnings
	countries\south_korea.py:13: from datetime import date
	countries\south_korea.py:14: from datetime import timedelta as td
	countries\south_korea.py:15: from gettext import gettext as tr
	countries\south_korea.py:16: from typing import Dict, Set
	countries\south_korea.py:18: from holidays.calendars import _CustomChineseHolidays
	countries\south_korea.py:19: from holidays.calendars.gregorian import JAN, FEB, MAR, APR, MAY, JUN, JUL, AUG, SEP, OCT, NOV, DEC
	countries\south_korea.py:20: from holidays.constants import BANK, PUBLIC
	countries\south_korea.py:21: from holidays.groups import (
	countries\south_korea.py:27: from holidays.observed_holiday_base import (
	countries\south_korea.py:34: class SouthKorea(
	countries\south_korea.py:35: ObservedHolidayBase,
	countries\south_korea.py:36: ChineseCalendarHolidays,
	countries\south_korea.py:37: ChristianHolidays,
	countries\south_korea.py:38: InternationalHolidays,
	countries\south_korea.py:39: StaticHolidays,
	countries\south_korea.py:34: class SouthKorea(
(call) countries\south_korea.py:34: SouthKorea
	countries\south_korea.py:34: class SouthKorea(
	countries\south_korea.py:41: """
	countries\south_korea.py:76: country = "KR"
	countries\south_korea.py:77: supported_categories = (BANK, PUBLIC)
	countries\south_korea.py:78: default_language = "ko"
	countries\south_korea.py:80: observed_label = tr("%s 대체 휴일")
	countries\south_korea.py:81: supported_languages = ("en_US", "ko", "th")
	countries\south_korea.py:83: def __init__(self, *args, **kwargs):
	countries\south_korea.py:92: def _populate_observed(self, dts: Set[date], three_day_holidays: Dict[date, str]) -> None:
	countries\south_korea.py:108: def _populate_public_holidays(self):
	countries\south_korea.py:270: def _populate_bank_holidays(self):
	countries\south_korea.py:282: class Korea(SouthKorea):
(call) countries\south_korea.py:282: Korea
	countries\south_korea.py:282: class Korea(SouthKorea):
	countries\south_korea.py:283: def __init__(self, *args, **kwargs) -> None:
	countries\south_korea.py:289: class KR(SouthKorea):
(call) countries\south_korea.py:289: KR
	countries\south_korea.py:289: class KR(SouthKorea):
	countries\south_korea.py:290: pass
	countries\south_korea.py:293: class KOR(SouthKorea):
(call) countries\south_korea.py:293: KOR
	countries\south_korea.py:293: class KOR(SouthKorea):
	countries\south_korea.py:294: pass
	countries\south_korea.py:297: class SouthKoreaLunisolarHolidays(_CustomChineseHolidays):
(call) countries\south_korea.py:297: SouthKoreaLunisolarHolidays
	countries\south_korea.py:297: class SouthKoreaLunisolarHolidays(_CustomChineseHolidays):
	countries\south_korea.py:299: 1931: (MAY, 25),
	countries\south_korea.py:300: 1968: (MAY, 5),
	countries\south_korea.py:301: 2001: (MAY, 1),
	countries\south_korea.py:302: 2012: (MAY, 28),
	countries\south_korea.py:303: 2023: (MAY, 27),
	countries\south_korea.py:304: 2025: (MAY, 5),
	countries\south_korea.py:298: BUDDHA_BIRTHDAY_DATES = {
	countries\south_korea.py:308: 1916: (FEB, 4),
	countries\south_korea.py:309: 1944: (JAN, 26),
	countries\south_korea.py:310: 1954: (FEB, 4),
	countries\south_korea.py:311: 1958: (FEB, 19),
	countries\south_korea.py:312: 1966: (JAN, 22),
	countries\south_korea.py:313: 1988: (FEB, 18),
	countries\south_korea.py:314: 1997: (FEB, 8),
	countries\south_korea.py:315: 2027: (FEB, 7),
	countries\south_korea.py:316: 2028: (JAN, 27),
	countries\south_korea.py:307: LUNAR_NEW_YEAR_DATES = {
	countries\south_korea.py:320: 1942: (SEP, 25),
	countries\south_korea.py:321: 2040: (SEP, 21),
	countries\south_korea.py:319: MID_AUTUMN_DATES = {
(call) calendars\custom.py:24: __new__
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
(call) calendars\custom.py:25: <genexpr>
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:26: namespace[f"{attr}_{_CustomCalendar.CUSTOM_ATTR_POSTFIX}"] = namespace[attr]
	calendars\custom.py:27: del namespace[attr]
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
(call) calendars\custom.py:25: <genexpr>
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:26: namespace[f"{attr}_{_CustomCalendar.CUSTOM_ATTR_POSTFIX}"] = namespace[attr]
	calendars\custom.py:27: del namespace[attr]
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
(call) calendars\custom.py:25: <genexpr>
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:26: namespace[f"{attr}_{_CustomCalendar.CUSTOM_ATTR_POSTFIX}"] = namespace[attr]
	calendars\custom.py:27: del namespace[attr]
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
(call) calendars\custom.py:25: <genexpr>
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:29: return super().__new__(cls, name, bases, namespace)
	countries\south_korea.py:325: class SouthKoreaStaticHolidays:
(call) countries\south_korea.py:325: SouthKoreaStaticHolidays
	countries\south_korea.py:325: class SouthKoreaStaticHolidays:
	countries\south_korea.py:326: """
	countries\south_korea.py:341: national_assembly_election_day = tr("국회의원 선거일")
	countries\south_korea.py:344: presidential_election_day = tr("대통령 선거일")
	countries\south_korea.py:347: local_election_day = tr("지방선거일")
	countries\south_korea.py:350: temporary_public_holiday = tr("임시공휴일")
	countries\south_korea.py:353: presidential_inauguration_day = tr("대통령 취임식")
	countries\south_korea.py:356: national_conference_for_unification_election_day = tr("통일주체국민회의 선거일")
	countries\south_korea.py:359: yushin_constitution_referendum_day = tr("유신헌법 국민투표일")
	countries\south_korea.py:362: may_16_coup_anniversary = tr("5.16 군사혁명 기념일")
	countries\south_korea.py:365: apr_19_revolution_anniversary = tr("4.19 혁명 기념일")
	countries\south_korea.py:368: syngman_rhee_birthday = tr("이승만 대통령 탄신일")
	countries\south_korea.py:371: armed_forces_day = tr("국군의 날")
	countries\south_korea.py:373: special_public_holidays = {
	countries\south_korea.py:374: 1948: (
	countries\south_korea.py:376: (MAY, 10, national_assembly_election_day),
	countries\south_korea.py:378: (JUL, 20, presidential_election_day),
	countries\south_korea.py:380: (DEC, 15, tr("국제연합의 대한민국 정부 승인 경축 국민대회")),
	countries\south_korea.py:374: 1948: (
	countries\south_korea.py:373: special_public_holidays = {
	countries\south_korea.py:382: 1949: (
	countries\south_korea.py:384: (MAY, 10, tr("5.10 제헌의회선거 1주년 기념일")),
	countries\south_korea.py:386: (JUL, 5, tr("백범 김구 선생 국민장 영결식")),
	countries\south_korea.py:382: 1949: (
	countries\south_korea.py:373: special_public_holidays = {
	countries\south_korea.py:388: 1950: (
	countries\south_korea.py:390: (MAY, 30, national_assembly_election_day),
	countries\south_korea.py:392: (JUN, 21, tr("전몰군인 합동위령제")),
	countries\south_korea.py:388: 1950: (
	countries\south_korea.py:373: special_public_holidays = {
	countries\south_korea.py:394: 1951: (
	countries\south_korea.py:396: (MAY, 16, tr("부통령 선거일")),
	countries\south_korea.py:394: 1951: (
	countries\south_korea.py:373: special_public_holidays = {
	countries\south_korea.py:398: 1952: (
	countries\south_korea.py:400: (APR, 25, local_election_day),
	countries\south_korea.py:402: (MAY, 10, local_election_day),
	countries\south_korea.py:404: (AUG, 5, presidential_election_day),
	countries\south_korea.py:398: 1952: (
	countries\south_korea.py:373: special_public_holidays = {
	countries\south_korea.py:406: 1954: (
	countries\south_korea.py:408: (MAY, 20, national_assembly_election_day),
	countries\south_korea.py:406: 1954: (
	countries\south_korea.py:373: special_public_holidays = {
	countries\south_korea.py:410: 1956: (
	countries\south_korea.py:412: (MAY, 15, presidential_election_day),
	countries\south_korea.py:414: (AUG, 8, local_election_day),
	countries\south_korea.py:416: (AUG, 13, local_election_day),
	countries\south_korea.py:410: 1956: (
	countries\south_korea.py:373: special_public_holidays = {
	countries\south_korea.py:419: 1957: (MAR, 26, syngman_rhee_birthday),
	countries\south_korea.py:373: special_public_holidays = {
	countries\south_korea.py:420: 1958: (
	countries\south_korea.py:422: (MAY, 2, national_assembly_election_day),
	countries\south_korea.py:424: (MAR, 26, syngman_rhee_birthday),
	countries\south_korea.py:420: 1958: (
	countries\south_korea.py:373: special_public_holidays = {
	countries\south_korea.py:427: 1959: (MAR, 26, syngman_rhee_birthday),
	countries\south_korea.py:373: special_public_holidays = {
	countries\south_korea.py:428: 1960: (
	countries\south_korea.py:430: (MAR, 16, tr("사방의 날")),
	countries\south_korea.py:432: (MAR, 26, syngman_rhee_birthday),
	countries\south_korea.py:434: (MAR, 15, presidential_election_day),
	countries\south_korea.py:436: (JUL, 29, national_assembly_election_day),
	countries\south_korea.py:438: (AUG, 12, presidential_election_day),
	countries\south_korea.py:440: (OCT, 1, tr("신정부 경축의 날")),
	countries\south_korea.py:442: (DEC, 12, local_election_day),
	countries\south_korea.py:444: (DEC, 19, local_election_day),
	countries\south_korea.py:446: (DEC, 26, local_election_day),
	countries\south_korea.py:448: (DEC, 29, local_election_day),
	countries\south_korea.py:428: 1960: (
	countries\south_korea.py:373: special_public_holidays = {
	countries\south_korea.py:451: 1961: (APR, 19, apr_19_revolution_anniversary),
	countries\south_korea.py:373: special_public_holidays = {
	countries\south_korea.py:452: 1962: (
	countries\south_korea.py:454: (APR, 19, apr_19_revolution_anniversary),
	countries\south_korea.py:456: (MAY, 16, may_16_coup_anniversary),
	countries\south_korea.py:452: 1962: (
	countries\south_korea.py:373: special_public_holidays = {
	countries\south_korea.py:458: 1963: (
	countries\south_korea.py:460: (APR, 19, apr_19_revolution_anniversary),
	countries\south_korea.py:462: (MAY, 16, may_16_coup_anniversary),
	countries\south_korea.py:464: (OCT, 15, presidential_election_day),
	countries\south_korea.py:466: (NOV, 26, national_assembly_election_day),
	countries\south_korea.py:468: (DEC, 17, presidential_inauguration_day),
	countries\south_korea.py:458: 1963: (
	countries\south_korea.py:373: special_public_holidays = {
	countries\south_korea.py:471: 1966: (OCT, 1, armed_forces_day),
	countries\south_korea.py:373: special_public_holidays = {
	countries\south_korea.py:472: 1967: (
	countries\south_korea.py:474: (JAN, 4, temporary_public_holiday),
	countries\south_korea.py:476: (MAY, 3, presidential_election_day),
	countries\south_korea.py:478: (JUN, 8, national_assembly_election_day),
	countries\south_korea.py:480: (JUL, 1, presidential_inauguration_day),
	countries\south_korea.py:472: 1967: (
	countries\south_korea.py:373: special_public_holidays = {
	countries\south_korea.py:482: 1969: (
	countries\south_korea.py:484: (JUL, 21, tr("아폴로 11호 달 착륙 기념")),
	countries\south_korea.py:486: (OCT, 17, tr("삼선 헌법 개정 국민투표일")),
	countries\south_korea.py:482: 1969: (
	countries\south_korea.py:373: special_public_holidays = {
	countries\south_korea.py:488: 1971: (
	countries\south_korea.py:490: (APR, 27, presidential_election_day),
	countries\south_korea.py:492: (MAY, 25, national_assembly_election_day),
	countries\south_korea.py:494: (JUL, 1, presidential_inauguration_day),
	countries\south_korea.py:488: 1971: (
	countries\south_korea.py:373: special_public_holidays = {
	countries\south_korea.py:496: 1972: (
	countries\south_korea.py:498: (NOV, 21, yushin_constitution_referendum_day),
	countries\south_korea.py:500: (DEC, 15, national_conference_for_unification_election_day),
	countries\south_korea.py:502: (DEC, 23, presidential_election_day),
	countries\south_korea.py:504: (DEC, 27, presidential_inauguration_day),
	countries\south_korea.py:496: 1972: (
	countries\south_korea.py:373: special_public_holidays = {
	countries\south_korea.py:507: 1973: (FEB, 27, national_assembly_election_day),
	countries\south_korea.py:373: special_public_holidays = {
	countries\south_korea.py:509: 1974: (AUG, 19, tr("대통령 영부인 육영수 여사 국민장 영결식")),
	countries\south_korea.py:373: special_public_holidays = {
	countries\south_korea.py:511: 1975: (FEB, 12, yushin_constitution_referendum_day),
	countries\south_korea.py:373: special_public_holidays = {
	countries\south_korea.py:512: 1978: (
	countries\south_korea.py:514: (MAY, 18, national_conference_for_unification_election_day),
	countries\south_korea.py:516: (JUL, 6, presidential_election_day),
	countries\south_korea.py:518: (DEC, 12, national_assembly_election_day),
	countries\south_korea.py:520: (DEC, 27, presidential_inauguration_day),
	countries\south_korea.py:512: 1978: (
	countries\south_korea.py:373: special_public_holidays = {
	countries\south_korea.py:522: 1979: (
	countries\south_korea.py:524: (NOV, 3, tr("박정희 대통령 국장 영결식")),
	countries\south_korea.py:526: (DEC, 6, presidential_election_day),
	countries\south_korea.py:528: (DEC, 21, presidential_inauguration_day),
	countries\south_korea.py:522: 1979: (
	countries\south_korea.py:373: special_public_holidays = {
	countries\south_korea.py:530: 1980: (
	countries\south_korea.py:532: (AUG, 27, presidential_election_day),
	countries\south_korea.py:534: (SEP, 1, presidential_inauguration_day),
	countries\south_korea.py:536: (OCT, 22, tr("제5공화국 헌법 개정 국민투표일")),
	countries\south_korea.py:530: 1980: (
	countries\south_korea.py:373: special_public_holidays = {
	countries\south_korea.py:538: 1981: (
	countries\south_korea.py:540: (FEB, 11, tr("선거를 위한 선거인단 선일")),
	countries\south_korea.py:542: (FEB, 25, presidential_election_day),
	countries\south_korea.py:544: (MAR, 3, presidential_inauguration_day),
	countries\south_korea.py:546: (MAR, 25, national_assembly_election_day),
	countries\south_korea.py:538: 1981: (
	countries\south_korea.py:373: special_public_holidays = {
	countries\south_korea.py:549: 1982: (OCT, 2, temporary_public_holiday),
	countries\south_korea.py:373: special_public_holidays = {
	countries\south_korea.py:551: 1985: (FEB, 12, national_assembly_election_day),
	countries\south_korea.py:373: special_public_holidays = {
	countries\south_korea.py:552: 1987: (
	countries\south_korea.py:554: (DEC, 16, presidential_election_day),
	countries\south_korea.py:556: (OCT, 27, tr("제6공화국 헌법 개정 국민투표일")),
	countries\south_korea.py:552: 1987: (
	countries\south_korea.py:373: special_public_holidays = {
	countries\south_korea.py:558: 1988: (
	countries\south_korea.py:560: (FEB, 25, presidential_inauguration_day),
	countries\south_korea.py:562: (APR, 26, national_assembly_election_day),
	countries\south_korea.py:564: (SEP, 17, tr("1988 서울 올림픽 개막식")),
	countries\south_korea.py:558: 1988: (
	countries\south_korea.py:373: special_public_holidays = {
	countries\south_korea.py:566: 1991: (
	countries\south_korea.py:568: (MAR, 26, local_election_day),
	countries\south_korea.py:570: (JUN, 20, local_election_day),
	countries\south_korea.py:566: 1991: (
	countries\south_korea.py:373: special_public_holidays = {
	countries\south_korea.py:572: 1992: (
	countries\south_korea.py:574: (MAR, 24, national_assembly_election_day),
	countries\south_korea.py:576: (DEC, 18, presidential_election_day),
	countries\south_korea.py:572: 1992: (
	countries\south_korea.py:373: special_public_holidays = {
	countries\south_korea.py:579: 1995: (JUN, 27, local_election_day),
	countries\south_korea.py:373: special_public_holidays = {
	countries\south_korea.py:581: 1996: (APR, 11, national_assembly_election_day),
	countries\south_korea.py:373: special_public_holidays = {
	countries\south_korea.py:583: 1997: (DEC, 18, presidential_election_day),
	countries\south_korea.py:585: 1998: (JUN, 4, local_election_day),
	countries\south_korea.py:587: 2000: (APR, 13, national_assembly_election_day),
	countries\south_korea.py:590: (JUN, 13, local_election_day),
	countries\south_korea.py:592: (JUL, 1, tr("2002년 한일 월드컵 대표팀 4강 진출")),
	countries\south_korea.py:594: (DEC, 19, presidential_election_day),
	countries\south_korea.py:588: 2002: (
	countries\south_korea.py:597: 2004: (APR, 15, national_assembly_election_day),
	countries\south_korea.py:599: 2006: (MAY, 31, local_election_day),
	countries\south_korea.py:601: 2015: (AUG, 14, temporary_public_holiday),
	countries\south_korea.py:603: 2016: (MAY, 6, temporary_public_holiday),
	countries\south_korea.py:606: (MAY, 9, presidential_election_day),
	countries\south_korea.py:608: (OCT, 2, temporary_public_holiday),
	countries\south_korea.py:604: 2017: (
	countries\south_korea.py:611: 2020: (AUG, 17, temporary_public_holiday),
	countries\south_korea.py:613: 2023: (OCT, 2, temporary_public_holiday),
	countries\south_korea.py:373: special_public_holidays = {
	countries\south_korea.py:618: 1959: (APR, 6, tr("식목일")),
	countries\south_korea.py:620: (JUL, 18, tr("제헌절")),
	countries\south_korea.py:621: (OCT, 10, tr("한글날")),
	countries\south_korea.py:622: (DEC, 26, tr("기독탄신일")),
	countries\south_korea.py:619: 1960: (
	countries\south_korea.py:624: 1989: (OCT, 2, armed_forces_day),
	countries\south_korea.py:617: special_public_holidays_observed = {
	countries\__init__.py:131: from .spain import Spain, ES, ESP
(call) countries\spain.py:0: <module>
	countries\spain.py:12: from gettext import gettext as tr
	countries\spain.py:14: from holidays.calendars import _CustomIslamicHolidays
	countries\spain.py:15: from holidays.calendars.gregorian import MAR, APR, MAY, JUN, JUL, AUG, SEP, OCT, NOV
	countries\spain.py:16: from holidays.groups import (
	countries\spain.py:22: from holidays.observed_holiday_base import ObservedHolidayBase, SUN_TO_NEXT_MON
	countries\spain.py:25: class Spain(
	countries\spain.py:26: ObservedHolidayBase, ChristianHolidays, InternationalHolidays, IslamicHolidays, StaticHolidays
	countries\spain.py:25: class Spain(
(call) countries\spain.py:25: Spain
	countries\spain.py:25: class Spain(
	countries\spain.py:28: """
	countries\spain.py:52: country = "ES"
	countries\spain.py:53: default_language = "es"
	countries\spain.py:55: observed_label = tr("Lunes siguiente a %s")
	countries\spain.py:56: subdivisions = (
	countries\spain.py:77: supported_languages = ("en_US", "es", "uk")
	countries\spain.py:79: def __init__(self, *args, **kwargs):
	countries\spain.py:87: def _populate_public_holidays(self):
	countries\spain.py:126: def _populate_subdiv_an_public_holidays(self):
	countries\spain.py:160: def _populate_subdiv_ar_public_holidays(self):
	countries\spain.py:193: def _populate_subdiv_as_public_holidays(self):
	countries\spain.py:226: def _populate_subdiv_cb_public_holidays(self):
	countries\spain.py:261: def _populate_subdiv_ce_public_holidays(self):
	countries\spain.py:305: def _populate_subdiv_cl_public_holidays(self):
	countries\spain.py:345: def _populate_subdiv_cm_public_holidays(self):
	countries\spain.py:372: def _populate_subdiv_cn_public_holidays(self):
	countries\spain.py:397: def _populate_subdiv_ct_public_holidays(self):
	countries\spain.py:416: def _populate_subdiv_ex_public_holidays(self):
	countries\spain.py:455: def _populate_subdiv_ga_public_holidays(self):
	countries\spain.py:475: def _populate_subdiv_ib_public_holidays(self):
	countries\spain.py:497: def _populate_subdiv_mc_public_holidays(self):
	countries\spain.py:525: def _populate_subdiv_md_public_holidays(self):
	countries\spain.py:556: def _populate_subdiv_ml_public_holidays(self):
	countries\spain.py:594: def _populate_subdiv_nc_public_holidays(self):
	countries\spain.py:614: def _populate_subdiv_pv_public_holidays(self):
	countries\spain.py:629: def _populate_subdiv_ri_public_holidays(self):
	countries\spain.py:653: def _populate_subdiv_vc_public_holidays(self):
	countries\spain.py:679: class ES(Spain):
(call) countries\spain.py:679: ES
	countries\spain.py:679: class ES(Spain):
	countries\spain.py:680: pass
	countries\spain.py:683: class ESP(Spain):
(call) countries\spain.py:683: ESP
	countries\spain.py:683: class ESP(Spain):
	countries\spain.py:684: pass
	countries\spain.py:687: class SpainIslamicHolidays(_CustomIslamicHolidays):
(call) countries\spain.py:687: SpainIslamicHolidays
	countries\spain.py:687: class SpainIslamicHolidays(_CustomIslamicHolidays):
	countries\spain.py:689: 2010: (NOV, 17),
	countries\spain.py:690: 2011: (NOV, 6),
	countries\spain.py:691: 2012: (OCT, 25),
	countries\spain.py:692: 2013: (OCT, 15),
	countries\spain.py:693: 2014: (OCT, 4),
	countries\spain.py:694: 2015: (SEP, 25),
	countries\spain.py:695: 2016: (SEP, 12),
	countries\spain.py:696: 2017: (SEP, 1),
	countries\spain.py:697: 2018: (AUG, 22),
	countries\spain.py:698: 2019: (AUG, 12),
	countries\spain.py:699: 2020: (JUL, 31),
	countries\spain.py:700: 2021: (JUL, 20),
	countries\spain.py:701: 2022: (JUL, 9),
	countries\spain.py:702: 2023: (JUN, 29),
	countries\spain.py:703: 2024: (JUN, 17),
	countries\spain.py:688: EID_AL_ADHA_DATES = {
	countries\spain.py:707: 2022: (MAY, 3),
	countries\spain.py:708: 2023: (APR, 21),
	countries\spain.py:706: EID_AL_FITR_DATES = {
(call) calendars\custom.py:24: __new__
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
(call) calendars\custom.py:25: <genexpr>
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:26: namespace[f"{attr}_{_CustomCalendar.CUSTOM_ATTR_POSTFIX}"] = namespace[attr]
	calendars\custom.py:27: del namespace[attr]
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
(call) calendars\custom.py:25: <genexpr>
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:26: namespace[f"{attr}_{_CustomCalendar.CUSTOM_ATTR_POSTFIX}"] = namespace[attr]
	calendars\custom.py:27: del namespace[attr]
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
(call) calendars\custom.py:25: <genexpr>
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:29: return super().__new__(cls, name, bases, namespace)
	countries\spain.py:712: class SpainStaticHolidays:
(call) countries\spain.py:712: SpainStaticHolidays
	countries\spain.py:712: class SpainStaticHolidays:
	countries\spain.py:715: 2015: (MAR, 20, tr("Día siguiente a San José")),
	countries\spain.py:713: special_ga_public_holidays = {
	countries\spain.py:720: 2013: (MAR, 18, tr("Traslado de San José")),
	countries\spain.py:718: special_md_public_holidays = {
	countries\spain.py:725: 2016: (OCT, 7, tr("80 Aniversario del primer Gobierno Vasco")),
	countries\spain.py:727: 2022: (SEP, 6, tr("V Centenario Vuelta al Mundo")),
	countries\spain.py:723: special_pv_public_holidays = {
	countries\spain.py:732: 2013: (MAR, 18, tr("Lunes de Fallas")),
	countries\spain.py:730: special_vc_public_holidays = {
	countries\__init__.py:132: from .sweden import Sweden, SE, SWE
(call) countries\sweden.py:0: <module>
	countries\sweden.py:12: from datetime import timedelta as td
	countries\sweden.py:13: from gettext import gettext as tr
	countries\sweden.py:15: from holidays.calendars.gregorian import _get_all_sundays
	countries\sweden.py:16: from holidays.groups import ChristianHolidays, InternationalHolidays
	countries\sweden.py:17: from holidays.holiday_base import HolidayBase
	countries\sweden.py:20: class Sweden(HolidayBase, ChristianHolidays, InternationalHolidays):
(call) countries\sweden.py:20: Sweden
	countries\sweden.py:20: class Sweden(HolidayBase, ChristianHolidays, InternationalHolidays):
	countries\sweden.py:21: """
	countries\sweden.py:35: country = "SE"
	countries\sweden.py:36: default_language = "sv"
	countries\sweden.py:37: supported_languages = ("en_US", "sv", "uk")
	countries\sweden.py:39: def __init__(self, include_sundays=True, *args, **kwargs):
	countries\sweden.py:49: def _populate_public_holidays(self):
	countries\sweden.py:127: class SE(Sweden):
(call) countries\sweden.py:127: SE
	countries\sweden.py:127: class SE(Sweden):
	countries\sweden.py:128: pass
	countries\sweden.py:131: class SWE(Sweden):
(call) countries\sweden.py:131: SWE
	countries\sweden.py:131: class SWE(Sweden):
	countries\sweden.py:132: pass
	countries\__init__.py:133: from .switzerland import Switzerland, CH, CHE
(call) countries\switzerland.py:0: <module>
	countries\switzerland.py:12: from datetime import timedelta as td
	countries\switzerland.py:13: from gettext import gettext as tr
	countries\switzerland.py:15: from holidays.calendars.gregorian import APR, THU, _get_nth_weekday_of_month
	countries\switzerland.py:16: from holidays.groups import ChristianHolidays, InternationalHolidays
	countries\switzerland.py:17: from holidays.holiday_base import HolidayBase
	countries\switzerland.py:20: class Switzerland(HolidayBase, ChristianHolidays, InternationalHolidays):
(call) countries\switzerland.py:20: Switzerland
	countries\switzerland.py:20: class Switzerland(HolidayBase, ChristianHolidays, InternationalHolidays):
	countries\switzerland.py:21: country = "CH"
	countries\switzerland.py:22: default_language = "de"
	countries\switzerland.py:23: subdivisions = (
	countries\switzerland.py:51: supported_languages = ("de", "en_US", "fr", "it", "uk")
	countries\switzerland.py:53: def __init__(self, *args, **kwargs):
	countries\switzerland.py:58: def _populate_public_holidays(self):
	countries\switzerland.py:78: def _populate_subdiv_holidays(self):
	countries\switzerland.py:98: def _populate_subdiv_ag_public_holidays(self):
	countries\switzerland.py:102: def _populate_subdiv_ar_public_holidays(self):
	countries\switzerland.py:105: def _populate_subdiv_ai_public_holidays(self):
	countries\switzerland.py:118: def _populate_subdiv_bl_public_holidays(self):
	countries\switzerland.py:122: def _populate_subdiv_bs_public_holidays(self):
	countries\switzerland.py:125: def _populate_subdiv_be_public_holidays(self):
	countries\switzerland.py:128: def _populate_subdiv_fr_public_holidays(self):
	countries\switzerland.py:131: def _populate_subdiv_ge_public_holidays(self):
	countries\switzerland.py:139: def _populate_subdiv_gl_public_holidays(self):
	countries\switzerland.py:153: def _populate_subdiv_gr_public_holidays(self):
	countries\switzerland.py:156: def _populate_subdiv_ju_public_holidays(self):
	countries\switzerland.py:166: def _populate_subdiv_lu_public_holidays(self):
	countries\switzerland.py:173: def _populate_subdiv_ne_public_holidays(self):
	countries\switzerland.py:183: def _populate_subdiv_nw_public_holidays(self):
	countries\switzerland.py:191: def _populate_subdiv_ow_public_holidays(self):
	countries\switzerland.py:201: def _populate_subdiv_sg_public_holidays(self):
	countries\switzerland.py:204: def _populate_subdiv_sh_public_holidays(self):
	countries\switzerland.py:208: def _populate_subdiv_sz_public_holidays(self):
	countries\switzerland.py:217: def _populate_subdiv_so_public_holidays(self):
	countries\switzerland.py:221: def _populate_subdiv_tg_public_holidays(self):
	countries\switzerland.py:225: def _populate_subdiv_ti_public_holidays(self):
	countries\switzerland.py:237: def _populate_subdiv_ur_public_holidays(self):
	countries\switzerland.py:245: def _populate_subdiv_vd_public_holidays(self):
	countries\switzerland.py:252: def _populate_subdiv_vs_public_holidays(self):
	countries\switzerland.py:259: def _populate_subdiv_zg_public_holidays(self):
	countries\switzerland.py:266: def _populate_subdiv_zh_public_holidays(self):
	countries\switzerland.py:271: class CH(Switzerland):
(call) countries\switzerland.py:271: CH
	countries\switzerland.py:271: class CH(Switzerland):
	countries\switzerland.py:272: pass
	countries\switzerland.py:275: class CHE(Switzerland):
(call) countries\switzerland.py:275: CHE
	countries\switzerland.py:275: class CHE(Switzerland):
	countries\switzerland.py:276: pass
	countries\__init__.py:134: from .taiwan import Taiwan, TW, TWN
(call) countries\taiwan.py:0: <module>
	countries\taiwan.py:12: from gettext import gettext as tr
	countries\taiwan.py:14: from holidays.groups import ChineseCalendarHolidays, InternationalHolidays
	countries\taiwan.py:15: from holidays.observed_holiday_base import (
	countries\taiwan.py:22: class Taiwan(ObservedHolidayBase, ChineseCalendarHolidays, InternationalHolidays):
(call) countries\taiwan.py:22: Taiwan
	countries\taiwan.py:22: class Taiwan(ObservedHolidayBase, ChineseCalendarHolidays, InternationalHolidays):
	countries\taiwan.py:23: """
	countries\taiwan.py:34: country = "TW"
	countries\taiwan.py:36: observed_label = tr("%s (慶祝)")
	countries\taiwan.py:37: default_language = "zh_TW"
	countries\taiwan.py:38: supported_languages = ("en_US", "th", "zh_CN", "zh_TW")
	countries\taiwan.py:40: def __init__(self, *args, **kwargs):
	countries\taiwan.py:47: def _populate_public_holidays(self):
	countries\taiwan.py:100: class TW(Taiwan):
(call) countries\taiwan.py:100: TW
	countries\taiwan.py:100: class TW(Taiwan):
	countries\taiwan.py:101: pass
	countries\taiwan.py:104: class TWN(Taiwan):
(call) countries\taiwan.py:104: TWN
	countries\taiwan.py:104: class TWN(Taiwan):
	countries\taiwan.py:105: pass
	countries\__init__.py:135: from .tanzania import Tanzania, TZ, TZA
(call) countries\tanzania.py:0: <module>
	countries\tanzania.py:12: from gettext import gettext as tr
	countries\tanzania.py:14: from holidays.calendars import _CustomIslamicHolidays
	countries\tanzania.py:15: from holidays.calendars.gregorian import JAN, MAR, APR, MAY, JUN, JUL, AUG, SEP, OCT, NOV, DEC
	countries\tanzania.py:16: from holidays.constants import BANK, PUBLIC
	countries\tanzania.py:17: from holidays.groups import (
	countries\tanzania.py:23: from holidays.holiday_base import HolidayBase
	countries\tanzania.py:26: class Tanzania(
	countries\tanzania.py:27: HolidayBase, ChristianHolidays, InternationalHolidays, IslamicHolidays, StaticHolidays
	countries\tanzania.py:26: class Tanzania(
(call) countries\tanzania.py:26: Tanzania
	countries\tanzania.py:26: class Tanzania(
	countries\tanzania.py:29: """
	countries\tanzania.py:60: country = "TZ"
	countries\tanzania.py:61: supported_categories = (BANK, PUBLIC)
	countries\tanzania.py:62: default_language = "sw"
	countries\tanzania.py:63: estimated_label = tr("%s (makisio)")
	countries\tanzania.py:64: supported_languages = ("en_US", "sw")
	countries\tanzania.py:66: def __init__(self, *args, **kwargs):
	countries\tanzania.py:73: def _populate_bank_holidays(self):
	countries\tanzania.py:85: def _populate_public_holidays(self):
	countries\tanzania.py:230: class TZ(Tanzania):
(call) countries\tanzania.py:230: TZ
	countries\tanzania.py:230: class TZ(Tanzania):
	countries\tanzania.py:231: pass
	countries\tanzania.py:234: class TZA(Tanzania):
(call) countries\tanzania.py:234: TZA
	countries\tanzania.py:234: class TZA(Tanzania):
	countries\tanzania.py:235: pass
	countries\tanzania.py:238: class TanzaniaIslamicHolidays(_CustomIslamicHolidays):
(call) countries\tanzania.py:238: TanzaniaIslamicHolidays
	countries\tanzania.py:238: class TanzaniaIslamicHolidays(_CustomIslamicHolidays):
	countries\tanzania.py:240: 2013: (OCT, 15),
	countries\tanzania.py:241: 2014: (OCT, 5),
	countries\tanzania.py:242: 2015: (SEP, 23),
	countries\tanzania.py:243: 2016: (SEP, 16),
	countries\tanzania.py:244: 2017: (SEP, 2),
	countries\tanzania.py:245: 2018: (AUG, 22),
	countries\tanzania.py:246: 2019: (AUG, 13),
	countries\tanzania.py:247: 2020: (JUL, 31),
	countries\tanzania.py:248: 2021: (JUL, 21),
	countries\tanzania.py:249: 2022: (JUL, 10),
	countries\tanzania.py:250: 2023: (JUN, 29),
	countries\tanzania.py:239: EID_AL_ADHA_DATES = {
	countries\tanzania.py:254: 2013: (AUG, 8),
	countries\tanzania.py:255: 2014: (JUL, 29),
	countries\tanzania.py:256: 2015: (JUL, 18),
	countries\tanzania.py:257: 2016: (JUL, 7),
	countries\tanzania.py:258: 2017: (JUN, 26),
	countries\tanzania.py:259: 2018: (JUN, 15),
	countries\tanzania.py:260: 2019: (JUN, 5),
	countries\tanzania.py:261: 2020: (MAY, 24),
	countries\tanzania.py:262: 2021: (MAY, 14),
	countries\tanzania.py:263: 2022: (MAY, 3),
	countries\tanzania.py:264: 2023: (APR, 22),
	countries\tanzania.py:253: EID_AL_FITR_DATES = {
	countries\tanzania.py:268: 2013: (JAN, 24),
	countries\tanzania.py:269: 2014: (JAN, 14),
	countries\tanzania.py:270: 2015: ((JAN, 3), (DEC, 24)),
	countries\tanzania.py:271: 2016: (DEC, 12),
	countries\tanzania.py:272: 2017: (DEC, 1),
	countries\tanzania.py:273: 2018: (NOV, 21),
	countries\tanzania.py:274: 2019: (NOV, 10),
	countries\tanzania.py:275: 2020: (OCT, 29),
	countries\tanzania.py:276: 2021: (OCT, 19),
	countries\tanzania.py:277: 2022: (OCT, 9),
	countries\tanzania.py:278: 2023: (SEP, 28),
	countries\tanzania.py:267: MAWLID_DATES = {
(call) calendars\custom.py:24: __new__
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
(call) calendars\custom.py:25: <genexpr>
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:26: namespace[f"{attr}_{_CustomCalendar.CUSTOM_ATTR_POSTFIX}"] = namespace[attr]
	calendars\custom.py:27: del namespace[attr]
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
(call) calendars\custom.py:25: <genexpr>
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:26: namespace[f"{attr}_{_CustomCalendar.CUSTOM_ATTR_POSTFIX}"] = namespace[attr]
	calendars\custom.py:27: del namespace[attr]
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
(call) calendars\custom.py:25: <genexpr>
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:26: namespace[f"{attr}_{_CustomCalendar.CUSTOM_ATTR_POSTFIX}"] = namespace[attr]
	calendars\custom.py:27: del namespace[attr]
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
(call) calendars\custom.py:25: <genexpr>
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:29: return super().__new__(cls, name, bases, namespace)
	countries\tanzania.py:282: class TanzaniaStaticHolidays:
(call) countries\tanzania.py:282: TanzaniaStaticHolidays
	countries\tanzania.py:282: class TanzaniaStaticHolidays:
	countries\tanzania.py:286: john_magufuli_inauguration = tr("Sikukuu ya Kuapishwa kwa John Pombe Magufuli")
	countries\tanzania.py:289: tz_election_day = tr("Sikukuu ya Uchaguzi Mkuu wa Tanzania")
	countries\tanzania.py:292: phc_census_day = tr("Siku ya Sensa ya Kitaifa ya Watu na Makazi")
	countries\tanzania.py:295: john_magufuli_funeral = tr("Mazishi cha John Pombe Magufuli")
	countries\tanzania.py:298: 2002: (AUG, 25, phc_census_day),
	countries\tanzania.py:299: 2015: (NOV, 5, john_magufuli_inauguration),
	countries\tanzania.py:300: 2020: (OCT, 28, tz_election_day),
	countries\tanzania.py:302: (MAR, 22, john_magufuli_funeral),
	countries\tanzania.py:303: (MAR, 25, john_magufuli_funeral),
	countries\tanzania.py:301: 2021: (
	countries\tanzania.py:305: 2022: (AUG, 23, phc_census_day),
	countries\tanzania.py:297: special_public_holidays = {
	countries\__init__.py:136: from .thailand import Thailand, TH, THA
(call) countries\thailand.py:0: <module>
	countries\thailand.py:12: from datetime import date
	countries\thailand.py:13: from gettext import gettext as tr
	countries\thailand.py:15: from holidays.calendars.gregorian import JAN, FEB, MAR, APR, MAY, JUN, JUL, AUG, SEP, OCT, NOV, DEC
	countries\thailand.py:16: from holidays.constants import ARMED_FORCES, BANK, GOVERNMENT, PUBLIC, SCHOOL, WORKDAY
	countries\thailand.py:17: from holidays.groups import InternationalHolidays, StaticHolidays, ThaiCalendarHolidays
	countries\thailand.py:18: from holidays.observed_holiday_base import (
	countries\thailand.py:29: class Thailand(ObservedHolidayBase, InternationalHolidays, StaticHolidays, ThaiCalendarHolidays):
(call) countries\thailand.py:29: Thailand
	countries\thailand.py:29: class Thailand(ObservedHolidayBase, InternationalHolidays, StaticHolidays, ThaiCalendarHolidays):
	countries\thailand.py:30: """
	countries\thailand.py:138: country = "TH"
	countries\thailand.py:139: supported_categories = (ARMED_FORCES, BANK, GOVERNMENT, PUBLIC, SCHOOL, WORKDAY)
	countries\thailand.py:140: default_language = "th"
	countries\thailand.py:142: observed_label = tr("ชดเชย%s")
	countries\thailand.py:143: supported_languages = ("en_US", "th")
	countries\thailand.py:145: def __init__(self, *args, **kwargs):
	countries\thailand.py:152: def _is_observed(self, dt: date) -> bool:
	countries\thailand.py:155: def _populate_public_holidays(self):
	countries\thailand.py:473: def _populate_armed_forces_holidays(self):
	countries\thailand.py:491: def _populate_bank_holidays(self):
	countries\thailand.py:524: def _populate_government_holidays(self):
	countries\thailand.py:613: def _populate_school_holidays(self):
	countries\thailand.py:623: def _populate_workday_holidays(self):
	countries\thailand.py:698: class TH(Thailand):
(call) countries\thailand.py:698: TH
	countries\thailand.py:698: class TH(Thailand):
	countries\thailand.py:699: pass
	countries\thailand.py:702: class THA(Thailand):
(call) countries\thailand.py:702: THA
	countries\thailand.py:702: class THA(Thailand):
	countries\thailand.py:703: pass
	countries\thailand.py:706: class ThailandStaticHolidays:
(call) countries\thailand.py:706: ThailandStaticHolidays
	countries\thailand.py:706: class ThailandStaticHolidays:
	countries\thailand.py:710: thai_special_in_lieu_holidays = tr("วันหยุดชดเชย")
	countries\thailand.py:712: thai_election = tr("วันเลือกตั้ง")
	countries\thailand.py:714: thai_bridge_public_holiday = tr("วันหยุดพิเศษ (เพิ่มเติม)")
	countries\thailand.py:719: rama_ix_golden_jubilee = tr("พระราชพิธีกาญจนาภิเษก พ.ศ. 2539")
	countries\thailand.py:721: rama_ix_sixty_accession = tr("พระราชพิธีฉลองสิริราชสมบัติครบ 60 ปี พ.ศ. 2549")
	countries\thailand.py:723: thai_military_emergency_lockdown = tr("วันหยุดพิเศษ (คมช.)")
	countries\thailand.py:725: thai_political_emergency_lockdown = tr("วันหยุดพิเศษ (การเมือง)")
	countries\thailand.py:727: thai_flood_2011_emergency_lockdown = tr("วันหยุดพิเศษ (มหาอุทกภัย พ.ศ. 2554)")
	countries\thailand.py:729: rama_ix_mourning = tr("วันหยุดพิเศษ (ร่วมถวายอาลัย ส่งดวงพระวิญญาณพระบรมศพ)")
	countries\thailand.py:731: rama_ix_cremation = tr(
	countries\thailand.py:732: "วันพระราชพิธีถวายพระเพลิงพระบรมศพพระบาทสมเด็จพระปรมินทรมหาภูมิพลอดุลยเดช"
	countries\thailand.py:731: rama_ix_cremation = tr(
	countries\thailand.py:735: rama_x_coronation_celebrations = tr(
	countries\thailand.py:736: "พระราชพิธีบรมราชาภิเษก พระบาทสมเด็จพระวชิรเกล้าเจ้าอยู่หัว"
	countries\thailand.py:735: rama_x_coronation_celebrations = tr(
	countries\thailand.py:739: songkran_festival = tr("วันสงกรานต์")
	countries\thailand.py:741: special_public_holidays = {
	countries\thailand.py:743: 1992: (
	countries\thailand.py:744: (MAY, 18, thai_special_in_lieu_holidays),
	countries\thailand.py:745: (DEC, 7, thai_special_in_lieu_holidays),
	countries\thailand.py:743: 1992: (
	countries\thailand.py:741: special_public_holidays = {
	countries\thailand.py:747: 1993: (
	countries\thailand.py:748: (MAR, 8, thai_special_in_lieu_holidays),
	countries\thailand.py:749: (MAY, 3, thai_special_in_lieu_holidays),
	countries\thailand.py:750: (OCT, 25, thai_special_in_lieu_holidays),
	countries\thailand.py:751: (DEC, 6, thai_special_in_lieu_holidays),
	countries\thailand.py:747: 1993: (
	countries\thailand.py:741: special_public_holidays = {
	countries\thailand.py:753: 1994: (
	countries\thailand.py:754: (JAN, 3, thai_special_in_lieu_holidays),
	countries\thailand.py:755: (MAY, 2, thai_special_in_lieu_holidays),
	countries\thailand.py:756: (JUL, 25, thai_special_in_lieu_holidays),
	countries\thailand.py:757: (OCT, 24, thai_special_in_lieu_holidays),
	countries\thailand.py:758: (DEC, 12, thai_special_in_lieu_holidays),
	countries\thailand.py:753: 1994: (
	countries\thailand.py:741: special_public_holidays = {
	countries\thailand.py:761: 1996: (JUN, 10, rama_ix_golden_jubilee),
	countries\thailand.py:741: special_public_holidays = {
	countries\thailand.py:763: 1998: (
	countries\thailand.py:764: (MAY, 11, thai_special_in_lieu_holidays),
	countries\thailand.py:765: (DEC, 7, thai_special_in_lieu_holidays),
	countries\thailand.py:763: 1998: (
	countries\thailand.py:741: special_public_holidays = {
	countries\thailand.py:767: 1999: (
	countries\thailand.py:768: (MAY, 3, thai_special_in_lieu_holidays),
	countries\thailand.py:769: (MAY, 31, thai_special_in_lieu_holidays),
	countries\thailand.py:770: (OCT, 25, thai_special_in_lieu_holidays),
	countries\thailand.py:771: (DEC, 6, thai_special_in_lieu_holidays),
	countries\thailand.py:767: 1999: (
	countries\thailand.py:741: special_public_holidays = {
	countries\thailand.py:773: 2000: (
	countries\thailand.py:774: (JAN, 3, thai_special_in_lieu_holidays),
	countries\thailand.py:775: (FEB, 21, thai_special_in_lieu_holidays),
	countries\thailand.py:776: (AUG, 14, thai_special_in_lieu_holidays),
	countries\thailand.py:777: (DEC, 11, thai_special_in_lieu_holidays),
	countries\thailand.py:778: (DEC, 29, thai_election),
	countries\thailand.py:773: 2000: (
	countries\thailand.py:741: special_public_holidays = {
	countries\thailand.py:781: 2006: (
	countries\thailand.py:782: (APR, 19, thai_election),
	countries\thailand.py:783: (JUN, 9, rama_ix_sixty_accession),
	countries\thailand.py:784: (JUN, 12, rama_ix_sixty_accession),
	countries\thailand.py:785: (JUN, 13, rama_ix_sixty_accession),
	countries\thailand.py:786: (SEP, 20, thai_military_emergency_lockdown),
	countries\thailand.py:781: 2006: (
	countries\thailand.py:741: special_public_holidays = {
	countries\thailand.py:788: 2009: (
	countries\thailand.py:789: (JAN, 2, thai_bridge_public_holiday),
	countries\thailand.py:790: (APR, 10, thai_political_emergency_lockdown),
	countries\thailand.py:791: (APR, 16, thai_political_emergency_lockdown),
	countries\thailand.py:792: (APR, 17, thai_political_emergency_lockdown),
	countries\thailand.py:793: (JUL, 6, thai_bridge_public_holiday),
	countries\thailand.py:788: 2009: (
	countries\thailand.py:741: special_public_holidays = {
	countries\thailand.py:795: 2010: (
	countries\thailand.py:796: (MAY, 20, thai_bridge_public_holiday),
	countries\thailand.py:797: (MAY, 21, thai_bridge_public_holiday),
	countries\thailand.py:798: (AUG, 13, thai_bridge_public_holiday),
	countries\thailand.py:795: 2010: (
	countries\thailand.py:741: special_public_holidays = {
	countries\thailand.py:800: 2011: (
	countries\thailand.py:801: (MAY, 16, thai_bridge_public_holiday),
	countries\thailand.py:802: (OCT, 27, thai_flood_2011_emergency_lockdown),
	countries\thailand.py:803: (OCT, 28, thai_flood_2011_emergency_lockdown),
	countries\thailand.py:804: (OCT, 29, thai_flood_2011_emergency_lockdown),
	countries\thailand.py:805: (OCT, 30, thai_flood_2011_emergency_lockdown),
	countries\thailand.py:806: (OCT, 31, thai_flood_2011_emergency_lockdown),
	countries\thailand.py:800: 2011: (
	countries\thailand.py:741: special_public_holidays = {
	countries\thailand.py:808: 2012: (APR, 9, thai_bridge_public_holiday),
	countries\thailand.py:741: special_public_holidays = {
	countries\thailand.py:809: 2013: (DEC, 30, thai_bridge_public_holiday),
	countries\thailand.py:741: special_public_holidays = {
	countries\thailand.py:810: 2014: (AUG, 11, thai_bridge_public_holiday),
	countries\thailand.py:741: special_public_holidays = {
	countries\thailand.py:811: 2015: (
	countries\thailand.py:812: (JAN, 2, thai_bridge_public_holiday),
	countries\thailand.py:813: (MAY, 4, thai_bridge_public_holiday),
	countries\thailand.py:811: 2015: (
	countries\thailand.py:741: special_public_holidays = {
	countries\thailand.py:815: 2016: (
	countries\thailand.py:816: (MAY, 6, thai_bridge_public_holiday),
	countries\thailand.py:817: (JUL, 18, thai_bridge_public_holiday),
	countries\thailand.py:818: (OCT, 14, rama_ix_mourning),
	countries\thailand.py:815: 2016: (
	countries\thailand.py:741: special_public_holidays = {
	countries\thailand.py:820: 2017: (OCT, 26, rama_ix_cremation),
	countries\thailand.py:741: special_public_holidays = {
	countries\thailand.py:821: 2019: (MAY, 6, rama_x_coronation_celebrations),
	countries\thailand.py:823: (NOV, 19, thai_bridge_public_holiday),
	countries\thailand.py:824: (NOV, 20, thai_bridge_public_holiday),
	countries\thailand.py:825: (DEC, 11, thai_bridge_public_holiday),
	countries\thailand.py:822: 2020: (
	countries\thailand.py:828: (FEB, 12, thai_bridge_public_holiday),
	countries\thailand.py:829: (APR, 12, thai_bridge_public_holiday),
	countries\thailand.py:830: (SEP, 24, thai_bridge_public_holiday),
	countries\thailand.py:827: 2021: (
	countries\thailand.py:833: (JUL, 15, thai_bridge_public_holiday),
	countries\thailand.py:834: (JUL, 29, thai_bridge_public_holiday),
	countries\thailand.py:835: (OCT, 14, thai_bridge_public_holiday),
	countries\thailand.py:836: (DEC, 30, thai_bridge_public_holiday),
	countries\thailand.py:832: 2022: (
	countries\thailand.py:839: (MAY, 5, thai_bridge_public_holiday),
	countries\thailand.py:840: (JUL, 31, thai_bridge_public_holiday),
	countries\thailand.py:841: (DEC, 29, thai_bridge_public_holiday),
	countries\thailand.py:838: 2023: (
	countries\thailand.py:843: 2024: (DEC, 30, thai_bridge_public_holiday),
	countries\thailand.py:741: special_public_holidays = {
	countries\thailand.py:845: special_workday_holidays = {1999: (MAY, 14, tr("วันพืชมงคล"))}
	countries\thailand.py:848: 2007: (DEC, 24, thai_election),
	countries\thailand.py:850: (JUL, 27, songkran_festival),
	countries\thailand.py:851: (SEP, 4, songkran_festival),
	countries\thailand.py:852: (SEP, 7, songkran_festival),
	countries\thailand.py:849: 2020: (
	countries\thailand.py:847: special_public_holidays_observed = {
	countries\__init__.py:137: from .timor_leste import TimorLeste, TL, TLS
(call) countries\timor_leste.py:0: <module>
	countries\timor_leste.py:12: from gettext import gettext as tr
	countries\timor_leste.py:14: from holidays.calendars import _CustomIslamicHolidays
	countries\timor_leste.py:15: from holidays.calendars.gregorian import JAN, FEB, MAR, APR, MAY, JUN, JUL, AUG, SEP, OCT, NOV, DEC
	countries\timor_leste.py:16: from holidays.constants import GOVERNMENT, PUBLIC, WORKDAY
	countries\timor_leste.py:17: from holidays.groups import (
	countries\timor_leste.py:23: from holidays.holiday_base import HolidayBase
	countries\timor_leste.py:26: class TimorLeste(
	countries\timor_leste.py:27: HolidayBase, ChristianHolidays, InternationalHolidays, IslamicHolidays, StaticHolidays
	countries\timor_leste.py:26: class TimorLeste(
(call) countries\timor_leste.py:26: TimorLeste
	countries\timor_leste.py:26: class TimorLeste(
	countries\timor_leste.py:29: """
	countries\timor_leste.py:43: country = "TL"
	countries\timor_leste.py:44: supported_categories = (GOVERNMENT, PUBLIC, WORKDAY)
	countries\timor_leste.py:45: default_language = "pt_TL"
	countries\timor_leste.py:46: estimated_label = tr("%s (aproximada)")
	countries\timor_leste.py:47: supported_languages = ("en_US", "pt_TL", "tet")
	countries\timor_leste.py:49: def __init__(self, *args, **kwargs):
	countries\timor_leste.py:56: def _populate_public_holidays(self):
	countries\timor_leste.py:140: def _populate_workday_holidays(self):
	countries\timor_leste.py:179: class TL(TimorLeste):
(call) countries\timor_leste.py:179: TL
	countries\timor_leste.py:179: class TL(TimorLeste):
	countries\timor_leste.py:180: pass
	countries\timor_leste.py:183: class TLS(TimorLeste):
(call) countries\timor_leste.py:183: TLS
	countries\timor_leste.py:183: class TLS(TimorLeste):
	countries\timor_leste.py:184: pass
	countries\timor_leste.py:187: class TimorLesteIslamicHolidays(_CustomIslamicHolidays):
(call) countries\timor_leste.py:187: TimorLesteIslamicHolidays
	countries\timor_leste.py:187: class TimorLesteIslamicHolidays(_CustomIslamicHolidays):
	countries\timor_leste.py:189: 2011: (NOV, 7),
	countries\timor_leste.py:190: 2012: (OCT, 26),
	countries\timor_leste.py:191: 2013: (OCT, 15),
	countries\timor_leste.py:192: 2014: (OCT, 4),
	countries\timor_leste.py:193: 2015: (SEP, 24),
	countries\timor_leste.py:194: 2016: (SEP, 18),
	countries\timor_leste.py:195: 2017: (SEP, 1),
	countries\timor_leste.py:196: 2018: (AUG, 21),
	countries\timor_leste.py:197: 2019: (AUG, 11),
	countries\timor_leste.py:198: 2020: (JUL, 31),
	countries\timor_leste.py:199: 2021: (JUL, 19),
	countries\timor_leste.py:200: 2022: (JUL, 9),
	countries\timor_leste.py:201: 2023: (JUN, 29),
	countries\timor_leste.py:188: EID_AL_ADHA_DATES = {
	countries\timor_leste.py:205: 2011: (AUG, 31),
	countries\timor_leste.py:206: 2012: (AUG, 20),
	countries\timor_leste.py:207: 2013: (AUG, 8),
	countries\timor_leste.py:208: 2014: (JUL, 28),
	countries\timor_leste.py:209: 2015: (JUL, 17),
	countries\timor_leste.py:210: 2016: (JUL, 7),
	countries\timor_leste.py:211: 2017: (JUN, 26),
	countries\timor_leste.py:212: 2018: (JUN, 15),
	countries\timor_leste.py:213: 2019: (JUN, 6),
	countries\timor_leste.py:214: 2020: (MAY, 24),
	countries\timor_leste.py:215: 2021: (MAY, 13),
	countries\timor_leste.py:216: 2022: (MAY, 2),
	countries\timor_leste.py:217: 2023: (APR, 22),
	countries\timor_leste.py:204: EID_AL_FITR_DATES = {
(call) calendars\custom.py:24: __new__
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
(call) calendars\custom.py:25: <genexpr>
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:26: namespace[f"{attr}_{_CustomCalendar.CUSTOM_ATTR_POSTFIX}"] = namespace[attr]
	calendars\custom.py:27: del namespace[attr]
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
(call) calendars\custom.py:25: <genexpr>
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:26: namespace[f"{attr}_{_CustomCalendar.CUSTOM_ATTR_POSTFIX}"] = namespace[attr]
	calendars\custom.py:27: del namespace[attr]
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
(call) calendars\custom.py:25: <genexpr>
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:29: return super().__new__(cls, name, bases, namespace)
	countries\timor_leste.py:221: class TimorLesteStaticHolidays:
(call) countries\timor_leste.py:221: TimorLesteStaticHolidays
	countries\timor_leste.py:221: class TimorLesteStaticHolidays:
	countries\timor_leste.py:225: special_national_holidays = tr("Feriados Nacionais (Especiais)")
	countries\timor_leste.py:228: presidential_election = tr("Dia da Eleição Presidencial")
	countries\timor_leste.py:231: parliamentary_election = tr("Dia de Eleições Parlamentares")
	countries\timor_leste.py:234: dom_boaventura_centenary = tr("Centenário da Revolta de Dom Boaventura")
	countries\timor_leste.py:237: la_sama_funeral = tr("Cerimónias Fúnebres de Fernando 'La Sama' de Araújo")
	countries\timor_leste.py:240: popular_consultation_20th = tr("Celebrações do 20.º Aniversário da Consulta Popular")
	countries\timor_leste.py:245: (NOV, 3, special_national_holidays),
	countries\timor_leste.py:247: (DEC, 24, special_national_holidays),
	countries\timor_leste.py:248: (DEC, 31, special_national_holidays),
	countries\timor_leste.py:243: 2010: (
	countries\timor_leste.py:252: (AUG, 15, special_national_holidays),
	countries\timor_leste.py:254: (NOV, 3, special_national_holidays),
	countries\timor_leste.py:256: (DEC, 26, special_national_holidays),
	countries\timor_leste.py:250: 2011: (
	countries\timor_leste.py:260: (JAN, 2, special_national_holidays),
	countries\timor_leste.py:262: (JAN, 23, special_national_holidays),
	countries\timor_leste.py:264: (FEB, 22, special_national_holidays),
	countries\timor_leste.py:266: (MAR, 16, presidential_election),
	countries\timor_leste.py:268: (APR, 16, presidential_election),
	countries\timor_leste.py:269: (APR, 17, presidential_election),
	countries\timor_leste.py:271: (JUL, 6, parliamentary_election),
	countries\timor_leste.py:273: (JUL, 9, parliamentary_election),
	countries\timor_leste.py:275: (NOV, 27, dom_boaventura_centenary),
	countries\timor_leste.py:276: (NOV, 29, dom_boaventura_centenary),
	countries\timor_leste.py:278: (DEC, 24, special_national_holidays),
	countries\timor_leste.py:279: (DEC, 26, special_national_holidays),
	countries\timor_leste.py:280: (DEC, 31, special_national_holidays),
	countries\timor_leste.py:258: 2012: (
	countries\timor_leste.py:284: (FEB, 13, special_national_holidays),
	countries\timor_leste.py:286: (MAR, 28, special_national_holidays),
	countries\timor_leste.py:287: (APR, 1, special_national_holidays),
	countries\timor_leste.py:289: (AUG, 20, special_national_holidays),
	countries\timor_leste.py:291: (NOV, 29, special_national_holidays),
	countries\timor_leste.py:293: (DEC, 24, special_national_holidays),
	countries\timor_leste.py:294: (DEC, 26, special_national_holidays),
	countries\timor_leste.py:295: (DEC, 31, special_national_holidays),
	countries\timor_leste.py:282: 2013: (
	countries\timor_leste.py:299: (MAR, 5, special_national_holidays),
	countries\timor_leste.py:301: (APR, 17, special_national_holidays),
	countries\timor_leste.py:302: (APR, 21, special_national_holidays),
	countries\timor_leste.py:304: (JUL, 22, special_national_holidays),
	countries\timor_leste.py:305: (JUL, 23, special_national_holidays),
	countries\timor_leste.py:307: (AUG, 15, special_national_holidays),
	countries\timor_leste.py:308: (AUG, 20, special_national_holidays),
	countries\timor_leste.py:310: (DEC, 24, special_national_holidays),
	countries\timor_leste.py:311: (DEC, 26, special_national_holidays),
	countries\timor_leste.py:312: (DEC, 31, special_national_holidays),
	countries\timor_leste.py:297: 2014: (
	countries\timor_leste.py:316: (JAN, 2, special_national_holidays),
	countries\timor_leste.py:318: (FEB, 18, special_national_holidays),
	countries\timor_leste.py:320: (APR, 2, special_national_holidays),
	countries\timor_leste.py:322: (MAY, 13, special_national_holidays),
	countries\timor_leste.py:324: (JUN, 5, la_sama_funeral),
	countries\timor_leste.py:326: (AUG, 20, special_national_holidays),
	countries\timor_leste.py:328: (DEC, 24, special_national_holidays),
	countries\timor_leste.py:329: (DEC, 31, special_national_holidays),
	countries\timor_leste.py:314: 2015: (
	countries\timor_leste.py:333: (FEB, 10, special_national_holidays),
	countries\timor_leste.py:335: (MAR, 24, special_national_holidays),
	countries\timor_leste.py:337: (JUL, 6, special_national_holidays),
	countries\timor_leste.py:339: (NOV, 3, special_national_holidays),
	countries\timor_leste.py:341: (DEC, 26, special_national_holidays),
	countries\timor_leste.py:331: 2016: (
	countries\timor_leste.py:345: (JAN, 2, special_national_holidays),
	countries\timor_leste.py:347: (MAR, 1, special_national_holidays),
	countries\timor_leste.py:349: (MAR, 20, presidential_election),
	countries\timor_leste.py:350: (MAR, 21, presidential_election),
	countries\timor_leste.py:352: (APR, 13, special_national_holidays),
	countries\timor_leste.py:354: (DEC, 26, special_national_holidays),
	countries\timor_leste.py:343: 2017: (
	countries\timor_leste.py:358: (JAN, 2, special_national_holidays),
	countries\timor_leste.py:360: (FEB, 14, special_national_holidays),
	countries\timor_leste.py:362: (FEB, 16, special_national_holidays),
	countries\timor_leste.py:364: (MAR, 29, special_national_holidays),
	countries\timor_leste.py:366: (AUG, 22, special_national_holidays),
	countries\timor_leste.py:356: 2018: (
	countries\timor_leste.py:370: (FEB, 5, special_national_holidays),
	countries\timor_leste.py:372: (MAR, 6, special_national_holidays),
	countries\timor_leste.py:374: (APR, 18, special_national_holidays),
	countries\timor_leste.py:376: (AUG, 12, special_national_holidays),
	countries\timor_leste.py:378: (AUG, 20, special_national_holidays),
	countries\timor_leste.py:380: (AUG, 26, popular_consultation_20th),
	countries\timor_leste.py:381: (AUG, 27, popular_consultation_20th),
	countries\timor_leste.py:382: (AUG, 28, popular_consultation_20th),
	countries\timor_leste.py:383: (AUG, 29, popular_consultation_20th),
	countries\timor_leste.py:385: (OCT, 31, special_national_holidays),
	countries\timor_leste.py:387: (DEC, 24, special_national_holidays),
	countries\timor_leste.py:388: (DEC, 26, special_national_holidays),
	countries\timor_leste.py:389: (DEC, 30, special_national_holidays),
	countries\timor_leste.py:368: 2019: (
	countries\timor_leste.py:393: (JAN, 2, special_national_holidays),
	countries\timor_leste.py:395: (FEB, 26, special_national_holidays),
	countries\timor_leste.py:397: (AUG, 31, special_national_holidays),
	countries\timor_leste.py:399: (NOV, 3, special_national_holidays),
	countries\timor_leste.py:391: 2020: (
	countries\timor_leste.py:403: (FEB, 12, special_national_holidays),
	countries\timor_leste.py:405: (NOV, 3, special_national_holidays),
	countries\timor_leste.py:401: 2021: (
	countries\timor_leste.py:409: (FEB, 1, special_national_holidays),
	countries\timor_leste.py:411: (MAR, 18, presidential_election),
	countries\timor_leste.py:413: (APR, 14, special_national_holidays),
	countries\timor_leste.py:414: (APR, 18, presidential_election),
	countries\timor_leste.py:415: (APR, 19, presidential_election),
	countries\timor_leste.py:416: (APR, 20, presidential_election),
	countries\timor_leste.py:407: 2022: (
	countries\timor_leste.py:420: (JAN, 2, special_national_holidays),
	countries\timor_leste.py:422: (JAN, 23, special_national_holidays),
	countries\timor_leste.py:418: 2023: (
	countries\timor_leste.py:242: special_government_holidays = {
	countries\__init__.py:138: from .tonga import Tonga, TO, TON
(call) countries\tonga.py:0: <module>
	countries\tonga.py:12: from datetime import date
	countries\tonga.py:13: from gettext import gettext as tr
	countries\tonga.py:15: from holidays.calendars.gregorian import SEP, NOV, DEC
	countries\tonga.py:16: from holidays.groups import ChristianHolidays, InternationalHolidays, StaticHolidays
	countries\tonga.py:17: from holidays.observed_holiday_base import (
	countries\tonga.py:25: class Tonga(ObservedHolidayBase, ChristianHolidays, InternationalHolidays, StaticHolidays):
(call) countries\tonga.py:25: Tonga
	countries\tonga.py:25: class Tonga(ObservedHolidayBase, ChristianHolidays, InternationalHolidays, StaticHolidays):
	countries\tonga.py:26: """
	countries\tonga.py:72: country = "TO"
	countries\tonga.py:73: default_language = "to"
	countries\tonga.py:75: observed_label = tr("%s (fakatokanga'i)")
	countries\tonga.py:76: supported_languages = ("en_US", "to")
	countries\tonga.py:78: def __init__(self, *args, **kwargs):
	countries\tonga.py:85: def _add_observed(self, dt: date, **kwargs):
	countries\tonga.py:90: def _populate_public_holidays(self):
	countries\tonga.py:195: class TO(Tonga):
(call) countries\tonga.py:195: TO
	countries\tonga.py:195: class TO(Tonga):
	countries\tonga.py:196: pass
	countries\tonga.py:199: class TON(Tonga):
(call) countries\tonga.py:199: TON
	countries\tonga.py:199: class TON(Tonga):
	countries\tonga.py:200: pass
	countries\tonga.py:203: class TongaStaticHolidays:
(call) countries\tonga.py:203: TongaStaticHolidays
	countries\tonga.py:203: class TongaStaticHolidays:
	countries\tonga.py:204: """
	countries\tonga.py:214: rugby_special_holidays = tr("'Aho malolo 'akapulu 'a Tonga")
	countries\tonga.py:217: 2017: (NOV, 29, rugby_special_holidays),
	countries\tonga.py:220: (SEP, 19, tr("Me'afaka'eiki 'o e Siteiti 'Akilisi Pohiva")),
	countries\tonga.py:221: (NOV, 15, rugby_special_holidays),
	countries\tonga.py:218: 2019: (
	countries\tonga.py:216: special_public_holidays = {
	countries\tonga.py:227: 2021: (DEC, 27, tr("'Aho 2 'o e Kilisimasi")),
	countries\tonga.py:225: special_public_holidays_observed = {
	countries\__init__.py:139: from .tunisia import Tunisia, TN, TUN
(call) countries\tunisia.py:0: <module>
	countries\tunisia.py:13: from gettext import gettext as tr
	countries\tunisia.py:15: from holidays.groups import InternationalHolidays, IslamicHolidays
	countries\tunisia.py:16: from holidays.holiday_base import HolidayBase
	countries\tunisia.py:19: class Tunisia(HolidayBase, InternationalHolidays, IslamicHolidays):
(call) countries\tunisia.py:19: Tunisia
	countries\tunisia.py:19: class Tunisia(HolidayBase, InternationalHolidays, IslamicHolidays):
	countries\tunisia.py:20: """Tunisia holidays."""
	countries\tunisia.py:22: country = "TN"
	countries\tunisia.py:23: default_language = "ar"
	countries\tunisia.py:25: estimated_label = tr("(تقدير) %s")
	countries\tunisia.py:26: supported_languages = ("ar", "en_US")
	countries\tunisia.py:28: def __init__(self, *args, **kwargs):
	countries\tunisia.py:33: def _populate_public_holidays(self):
	countries\tunisia.py:82: class TN(Tunisia):
(call) countries\tunisia.py:82: TN
	countries\tunisia.py:82: class TN(Tunisia):
	countries\tunisia.py:83: pass
	countries\tunisia.py:86: class TUN(Tunisia):
(call) countries\tunisia.py:86: TUN
	countries\tunisia.py:86: class TUN(Tunisia):
	countries\tunisia.py:87: pass
	countries\__init__.py:140: from .turkey import Turkey, TR, TUR
(call) countries\turkey.py:0: <module>
	countries\turkey.py:12: from gettext import gettext as tr
	countries\turkey.py:14: from holidays.calendars import _CustomIslamicHolidays
	countries\turkey.py:15: from holidays.calendars.gregorian import JAN, FEB, MAR, APR, MAY, JUN, JUL, AUG, SEP, OCT, NOV, DEC
	countries\turkey.py:16: from holidays.constants import HALF_DAY, PUBLIC
	countries\turkey.py:17: from holidays.groups import InternationalHolidays, IslamicHolidays, StaticHolidays
	countries\turkey.py:18: from holidays.holiday_base import HolidayBase
	countries\turkey.py:21: class Turkey(HolidayBase, InternationalHolidays, IslamicHolidays, StaticHolidays):
(call) countries\turkey.py:21: Turkey
	countries\turkey.py:21: class Turkey(HolidayBase, InternationalHolidays, IslamicHolidays, StaticHolidays):
	countries\turkey.py:22: """
	countries\turkey.py:31: country = "TR"
	countries\turkey.py:32: default_language = "tr"
	countries\turkey.py:34: estimated_label = tr("%s (tahmini)")
	countries\turkey.py:35: supported_categories = (HALF_DAY, PUBLIC)
	countries\turkey.py:36: supported_languages = ("en_US", "tr", "uk")
	countries\turkey.py:38: def __init__(self, *args, **kwargs):
	countries\turkey.py:44: def _populate_public_holidays(self):
	countries\turkey.py:104: def _populate_half_day_holidays(self):
	countries\turkey.py:120: class TR(Turkey):
(call) countries\turkey.py:120: TR
	countries\turkey.py:120: class TR(Turkey):
	countries\turkey.py:121: pass
	countries\turkey.py:124: class TUR(Turkey):
(call) countries\turkey.py:124: TUR
	countries\turkey.py:124: class TUR(Turkey):
	countries\turkey.py:125: pass
	countries\turkey.py:128: class TurkeyIslamicHolidays(_CustomIslamicHolidays):
(call) countries\turkey.py:128: TurkeyIslamicHolidays
	countries\turkey.py:128: class TurkeyIslamicHolidays(_CustomIslamicHolidays):
	countries\turkey.py:129: EID_AL_ADHA_DATES = {
	countries\turkey.py:130: 1936: (MAR, 4),
	countries\turkey.py:129: EID_AL_ADHA_DATES = {
	countries\turkey.py:131: 1937: (FEB, 22),
	countries\turkey.py:129: EID_AL_ADHA_DATES = {
	countries\turkey.py:132: 1938: (FEB, 11),
	countries\turkey.py:129: EID_AL_ADHA_DATES = {
	countries\turkey.py:133: 1939: (JAN, 31),
	countries\turkey.py:129: EID_AL_ADHA_DATES = {
	countries\turkey.py:134: 1940: (JAN, 20),
	countries\turkey.py:129: EID_AL_ADHA_DATES = {
	countries\turkey.py:135: 1941: ((JAN, 8), (DEC, 29)),
	countries\turkey.py:129: EID_AL_ADHA_DATES = {
	countries\turkey.py:136: 1942: (DEC, 18),
	countries\turkey.py:129: EID_AL_ADHA_DATES = {
	countries\turkey.py:137: 1943: (DEC, 8),
	countries\turkey.py:129: EID_AL_ADHA_DATES = {
	countries\turkey.py:138: 1944: (NOV, 26),
	countries\turkey.py:129: EID_AL_ADHA_DATES = {
	countries\turkey.py:139: 1945: (NOV, 15),
	countries\turkey.py:129: EID_AL_ADHA_DATES = {
	countries\turkey.py:140: 1946: (NOV, 4),
	countries\turkey.py:129: EID_AL_ADHA_DATES = {
	countries\turkey.py:141: 1947: (OCT, 25),
	countries\turkey.py:129: EID_AL_ADHA_DATES = {
	countries\turkey.py:142: 1948: (OCT, 13),
	countries\turkey.py:129: EID_AL_ADHA_DATES = {
	countries\turkey.py:143: 1949: (OCT, 3),
	countries\turkey.py:129: EID_AL_ADHA_DATES = {
	countries\turkey.py:144: 1950: (SEP, 23),
	countries\turkey.py:129: EID_AL_ADHA_DATES = {
	countries\turkey.py:145: 1951: (SEP, 12),
	countries\turkey.py:129: EID_AL_ADHA_DATES = {
	countries\turkey.py:146: 1952: (AUG, 31),
	countries\turkey.py:129: EID_AL_ADHA_DATES = {
	countries\turkey.py:147: 1953: (AUG, 20),
	countries\turkey.py:129: EID_AL_ADHA_DATES = {
	countries\turkey.py:148: 1954: (AUG, 9),
	countries\turkey.py:129: EID_AL_ADHA_DATES = {
	countries\turkey.py:149: 1955: (JUL, 30),
	countries\turkey.py:129: EID_AL_ADHA_DATES = {
	countries\turkey.py:150: 1956: (JUL, 19),
	countries\turkey.py:129: EID_AL_ADHA_DATES = {
	countries\turkey.py:151: 1957: (JUL, 8),
	countries\turkey.py:129: EID_AL_ADHA_DATES = {
	countries\turkey.py:152: 1958: (JUN, 28),
	countries\turkey.py:129: EID_AL_ADHA_DATES = {
	countries\turkey.py:153: 1959: (JUN, 17),
	countries\turkey.py:129: EID_AL_ADHA_DATES = {
	countries\turkey.py:154: 1960: (JUN, 5),
	countries\turkey.py:129: EID_AL_ADHA_DATES = {
	countries\turkey.py:155: 1961: (MAY, 25),
	countries\turkey.py:129: EID_AL_ADHA_DATES = {
	countries\turkey.py:156: 1962: (MAY, 14),
	countries\turkey.py:129: EID_AL_ADHA_DATES = {
	countries\turkey.py:157: 1963: (MAY, 4),
	countries\turkey.py:129: EID_AL_ADHA_DATES = {
	countries\turkey.py:158: 1964: (APR, 23),
	countries\turkey.py:129: EID_AL_ADHA_DATES = {
	countries\turkey.py:159: 1965: (APR, 12),
	countries\turkey.py:129: EID_AL_ADHA_DATES = {
	countries\turkey.py:160: 1966: (APR, 1),
	countries\turkey.py:129: EID_AL_ADHA_DATES = {
	countries\turkey.py:161: 1967: (MAR, 21),
	countries\turkey.py:129: EID_AL_ADHA_DATES = {
	countries\turkey.py:162: 1968: (MAR, 10),
	countries\turkey.py:129: EID_AL_ADHA_DATES = {
	countries\turkey.py:163: 1969: (FEB, 27),
	countries\turkey.py:129: EID_AL_ADHA_DATES = {
	countries\turkey.py:164: 1970: (FEB, 17),
	countries\turkey.py:129: EID_AL_ADHA_DATES = {
	countries\turkey.py:165: 1971: (FEB, 6),
	countries\turkey.py:129: EID_AL_ADHA_DATES = {
	countries\turkey.py:166: 1972: (JAN, 27),
	countries\turkey.py:129: EID_AL_ADHA_DATES = {
	countries\turkey.py:167: 1973: (JAN, 15),
	countries\turkey.py:129: EID_AL_ADHA_DATES = {
	countries\turkey.py:168: 1974: ((JAN, 4), (DEC, 24)),
	countries\turkey.py:129: EID_AL_ADHA_DATES = {
	countries\turkey.py:169: 1975: (DEC, 13),
	countries\turkey.py:129: EID_AL_ADHA_DATES = {
	countries\turkey.py:170: 1976: (DEC, 2),
	countries\turkey.py:129: EID_AL_ADHA_DATES = {
	countries\turkey.py:171: 1977: (NOV, 22),
	countries\turkey.py:129: EID_AL_ADHA_DATES = {
	countries\turkey.py:172: 1978: (NOV, 11),
	countries\turkey.py:129: EID_AL_ADHA_DATES = {
	countries\turkey.py:173: 1979: (OCT, 31),
	countries\turkey.py:129: EID_AL_ADHA_DATES = {
	countries\turkey.py:174: 1980: (OCT, 19),
	countries\turkey.py:129: EID_AL_ADHA_DATES = {
	countries\turkey.py:175: 1981: (OCT, 8),
	countries\turkey.py:129: EID_AL_ADHA_DATES = {
	countries\turkey.py:176: 1982: (SEP, 27),
	countries\turkey.py:129: EID_AL_ADHA_DATES = {
	countries\turkey.py:177: 1983: (SEP, 17),
	countries\turkey.py:129: EID_AL_ADHA_DATES = {
	countries\turkey.py:178: 1984: (SEP, 6),
	countries\turkey.py:129: EID_AL_ADHA_DATES = {
	countries\turkey.py:179: 1985: (AUG, 26),
	countries\turkey.py:129: EID_AL_ADHA_DATES = {
	countries\turkey.py:180: 1986: (AUG, 16),
	countries\turkey.py:129: EID_AL_ADHA_DATES = {
	countries\turkey.py:181: 1987: (AUG, 5),
	countries\turkey.py:129: EID_AL_ADHA_DATES = {
	countries\turkey.py:182: 1988: (JUL, 24),
	countries\turkey.py:129: EID_AL_ADHA_DATES = {
	countries\turkey.py:183: 1989: (JUL, 13),
	countries\turkey.py:129: EID_AL_ADHA_DATES = {
	countries\turkey.py:184: 1990: (JUL, 3),
	countries\turkey.py:129: EID_AL_ADHA_DATES = {
	countries\turkey.py:185: 1991: (JUN, 23),
	countries\turkey.py:129: EID_AL_ADHA_DATES = {
	countries\turkey.py:186: 1992: (JUN, 11),
	countries\turkey.py:129: EID_AL_ADHA_DATES = {
	countries\turkey.py:187: 1993: (JUN, 1),
	countries\turkey.py:129: EID_AL_ADHA_DATES = {
	countries\turkey.py:188: 1994: (MAY, 21),
	countries\turkey.py:129: EID_AL_ADHA_DATES = {
	countries\turkey.py:189: 1995: (MAY, 10),
	countries\turkey.py:129: EID_AL_ADHA_DATES = {
	countries\turkey.py:190: 1996: (APR, 28),
	countries\turkey.py:129: EID_AL_ADHA_DATES = {
	countries\turkey.py:191: 1997: (APR, 18),
	countries\turkey.py:129: EID_AL_ADHA_DATES = {
	countries\turkey.py:192: 1998: (APR, 7),
	countries\turkey.py:129: EID_AL_ADHA_DATES = {
	countries\turkey.py:193: 1999: (MAR, 28),
	countries\turkey.py:129: EID_AL_ADHA_DATES = {
	countries\turkey.py:194: 2000: (MAR, 16),
	countries\turkey.py:129: EID_AL_ADHA_DATES = {
	countries\turkey.py:195: 2001: (MAR, 5),
	countries\turkey.py:129: EID_AL_ADHA_DATES = {
	countries\turkey.py:196: 2002: (FEB, 22),
	countries\turkey.py:129: EID_AL_ADHA_DATES = {
	countries\turkey.py:197: 2003: (FEB, 11),
	countries\turkey.py:129: EID_AL_ADHA_DATES = {
	countries\turkey.py:198: 2004: (FEB, 1),
	countries\turkey.py:129: EID_AL_ADHA_DATES = {
	countries\turkey.py:199: 2005: (JAN, 20),
	countries\turkey.py:129: EID_AL_ADHA_DATES = {
	countries\turkey.py:200: 2006: ((JAN, 10), (DEC, 31)),
	countries\turkey.py:129: EID_AL_ADHA_DATES = {
	countries\turkey.py:201: 2007: (DEC, 20),
	countries\turkey.py:129: EID_AL_ADHA_DATES = {
	countries\turkey.py:202: 2008: (DEC, 8),
	countries\turkey.py:129: EID_AL_ADHA_DATES = {
	countries\turkey.py:203: 2009: (NOV, 27),
	countries\turkey.py:129: EID_AL_ADHA_DATES = {
	countries\turkey.py:204: 2010: (NOV, 16),
	countries\turkey.py:129: EID_AL_ADHA_DATES = {
	countries\turkey.py:205: 2011: (NOV, 6),
	countries\turkey.py:129: EID_AL_ADHA_DATES = {
	countries\turkey.py:206: 2012: (OCT, 25),
	countries\turkey.py:129: EID_AL_ADHA_DATES = {
	countries\turkey.py:207: 2013: (OCT, 15),
	countries\turkey.py:129: EID_AL_ADHA_DATES = {
	countries\turkey.py:208: 2014: (OCT, 4),
	countries\turkey.py:129: EID_AL_ADHA_DATES = {
	countries\turkey.py:209: 2015: (SEP, 24),
	countries\turkey.py:129: EID_AL_ADHA_DATES = {
	countries\turkey.py:210: 2016: (SEP, 12),
	countries\turkey.py:129: EID_AL_ADHA_DATES = {
	countries\turkey.py:211: 2017: (SEP, 1),
	countries\turkey.py:129: EID_AL_ADHA_DATES = {
	countries\turkey.py:212: 2018: (AUG, 21),
	countries\turkey.py:129: EID_AL_ADHA_DATES = {
	countries\turkey.py:213: 2019: (AUG, 11),
	countries\turkey.py:129: EID_AL_ADHA_DATES = {
	countries\turkey.py:214: 2020: (JUL, 31),
	countries\turkey.py:129: EID_AL_ADHA_DATES = {
	countries\turkey.py:215: 2021: (JUL, 20),
	countries\turkey.py:216: 2022: (JUL, 9),
	countries\turkey.py:217: 2023: (JUN, 28),
	countries\turkey.py:218: 2024: (JUN, 16),
	countries\turkey.py:219: 2025: (JUN, 6),
	countries\turkey.py:220: 2026: (MAY, 27),
	countries\turkey.py:221: 2027: (MAY, 16),
	countries\turkey.py:222: 2028: (MAY, 5),
	countries\turkey.py:223: 2029: (APR, 24),
	countries\turkey.py:224: 2030: (APR, 13),
	countries\turkey.py:225: 2031: (APR, 2),
	countries\turkey.py:226: 2032: (MAR, 22),
	countries\turkey.py:129: EID_AL_ADHA_DATES = {
	countries\turkey.py:229: EID_AL_FITR_DATES = {
	countries\turkey.py:230: 1936: (DEC, 15),
	countries\turkey.py:229: EID_AL_FITR_DATES = {
	countries\turkey.py:231: 1937: (DEC, 4),
	countries\turkey.py:229: EID_AL_FITR_DATES = {
	countries\turkey.py:232: 1938: (NOV, 23),
	countries\turkey.py:229: EID_AL_FITR_DATES = {
	countries\turkey.py:233: 1939: (NOV, 13),
	countries\turkey.py:229: EID_AL_FITR_DATES = {
	countries\turkey.py:234: 1940: (NOV, 1),
	countries\turkey.py:229: EID_AL_FITR_DATES = {
	countries\turkey.py:235: 1941: (OCT, 22),
	countries\turkey.py:229: EID_AL_FITR_DATES = {
	countries\turkey.py:236: 1942: (OCT, 12),
	countries\turkey.py:229: EID_AL_FITR_DATES = {
	countries\turkey.py:237: 1943: (OCT, 1),
	countries\turkey.py:229: EID_AL_FITR_DATES = {
	countries\turkey.py:238: 1944: (SEP, 19),
	countries\turkey.py:229: EID_AL_FITR_DATES = {
	countries\turkey.py:239: 1945: (SEP, 8),
	countries\turkey.py:229: EID_AL_FITR_DATES = {
	countries\turkey.py:240: 1946: (AUG, 29),
	countries\turkey.py:229: EID_AL_FITR_DATES = {
	countries\turkey.py:241: 1947: (AUG, 18),
	countries\turkey.py:229: EID_AL_FITR_DATES = {
	countries\turkey.py:242: 1948: (AUG, 6),
	countries\turkey.py:229: EID_AL_FITR_DATES = {
	countries\turkey.py:243: 1949: (JUL, 27),
	countries\turkey.py:229: EID_AL_FITR_DATES = {
	countries\turkey.py:244: 1950: (JUL, 16),
	countries\turkey.py:229: EID_AL_FITR_DATES = {
	countries\turkey.py:245: 1951: (JUL, 6),
	countries\turkey.py:229: EID_AL_FITR_DATES = {
	countries\turkey.py:246: 1952: (JUN, 24),
	countries\turkey.py:229: EID_AL_FITR_DATES = {
	countries\turkey.py:247: 1953: (JUN, 13),
	countries\turkey.py:229: EID_AL_FITR_DATES = {
	countries\turkey.py:248: 1954: (JUN, 2),
	countries\turkey.py:229: EID_AL_FITR_DATES = {
	countries\turkey.py:249: 1955: (MAY, 23),
	countries\turkey.py:229: EID_AL_FITR_DATES = {
	countries\turkey.py:250: 1956: (MAY, 12),
	countries\turkey.py:229: EID_AL_FITR_DATES = {
	countries\turkey.py:251: 1957: (MAY, 1),
	countries\turkey.py:229: EID_AL_FITR_DATES = {
	countries\turkey.py:252: 1958: (APR, 20),
	countries\turkey.py:229: EID_AL_FITR_DATES = {
	countries\turkey.py:253: 1959: (APR, 9),
	countries\turkey.py:229: EID_AL_FITR_DATES = {
	countries\turkey.py:254: 1960: (MAR, 29),
	countries\turkey.py:229: EID_AL_FITR_DATES = {
	countries\turkey.py:255: 1961: (MAR, 18),
	countries\turkey.py:229: EID_AL_FITR_DATES = {
	countries\turkey.py:256: 1962: (MAR, 8),
	countries\turkey.py:229: EID_AL_FITR_DATES = {
	countries\turkey.py:257: 1963: (FEB, 25),
	countries\turkey.py:229: EID_AL_FITR_DATES = {
	countries\turkey.py:258: 1964: (FEB, 15),
	countries\turkey.py:229: EID_AL_FITR_DATES = {
	countries\turkey.py:259: 1965: (FEB, 3),
	countries\turkey.py:229: EID_AL_FITR_DATES = {
	countries\turkey.py:260: 1966: (JAN, 23),
	countries\turkey.py:229: EID_AL_FITR_DATES = {
	countries\turkey.py:261: 1967: (JAN, 12),
	countries\turkey.py:229: EID_AL_FITR_DATES = {
	countries\turkey.py:262: 1968: ((JAN, 1), (DEC, 21)),
	countries\turkey.py:229: EID_AL_FITR_DATES = {
	countries\turkey.py:263: 1969: (DEC, 11),
	countries\turkey.py:229: EID_AL_FITR_DATES = {
	countries\turkey.py:264: 1970: (DEC, 1),
	countries\turkey.py:229: EID_AL_FITR_DATES = {
	countries\turkey.py:265: 1971: (NOV, 20),
	countries\turkey.py:229: EID_AL_FITR_DATES = {
	countries\turkey.py:266: 1972: (NOV, 8),
	countries\turkey.py:229: EID_AL_FITR_DATES = {
	countries\turkey.py:267: 1973: (OCT, 28),
	countries\turkey.py:229: EID_AL_FITR_DATES = {
	countries\turkey.py:268: 1974: (OCT, 17),
	countries\turkey.py:229: EID_AL_FITR_DATES = {
	countries\turkey.py:269: 1975: (OCT, 6),
	countries\turkey.py:229: EID_AL_FITR_DATES = {
	countries\turkey.py:270: 1976: (SEP, 25),
	countries\turkey.py:229: EID_AL_FITR_DATES = {
	countries\turkey.py:271: 1977: (SEP, 15),
	countries\turkey.py:229: EID_AL_FITR_DATES = {
	countries\turkey.py:272: 1978: (SEP, 4),
	countries\turkey.py:229: EID_AL_FITR_DATES = {
	countries\turkey.py:273: 1979: (AUG, 24),
	countries\turkey.py:229: EID_AL_FITR_DATES = {
	countries\turkey.py:274: 1980: (AUG, 12),
	countries\turkey.py:229: EID_AL_FITR_DATES = {
	countries\turkey.py:275: 1981: (AUG, 1),
	countries\turkey.py:229: EID_AL_FITR_DATES = {
	countries\turkey.py:276: 1982: (JUL, 22),
	countries\turkey.py:229: EID_AL_FITR_DATES = {
	countries\turkey.py:277: 1983: (JUL, 12),
	countries\turkey.py:229: EID_AL_FITR_DATES = {
	countries\turkey.py:278: 1984: (JUN, 30),
	countries\turkey.py:229: EID_AL_FITR_DATES = {
	countries\turkey.py:279: 1985: (JUN, 20),
	countries\turkey.py:229: EID_AL_FITR_DATES = {
	countries\turkey.py:280: 1986: (JUN, 9),
	countries\turkey.py:229: EID_AL_FITR_DATES = {
	countries\turkey.py:281: 1987: (MAY, 29),
	countries\turkey.py:229: EID_AL_FITR_DATES = {
	countries\turkey.py:282: 1988: (MAY, 17),
	countries\turkey.py:229: EID_AL_FITR_DATES = {
	countries\turkey.py:283: 1989: (MAY, 6),
	countries\turkey.py:229: EID_AL_FITR_DATES = {
	countries\turkey.py:284: 1990: (APR, 26),
	countries\turkey.py:229: EID_AL_FITR_DATES = {
	countries\turkey.py:285: 1991: (APR, 16),
	countries\turkey.py:229: EID_AL_FITR_DATES = {
	countries\turkey.py:286: 1992: (APR, 4),
	countries\turkey.py:229: EID_AL_FITR_DATES = {
	countries\turkey.py:287: 1993: (MAR, 24),
	countries\turkey.py:229: EID_AL_FITR_DATES = {
	countries\turkey.py:288: 1994: (MAR, 13),
	countries\turkey.py:229: EID_AL_FITR_DATES = {
	countries\turkey.py:289: 1995: (MAR, 3),
	countries\turkey.py:229: EID_AL_FITR_DATES = {
	countries\turkey.py:290: 1996: (FEB, 20),
	countries\turkey.py:229: EID_AL_FITR_DATES = {
	countries\turkey.py:291: 1997: (FEB, 9),
	countries\turkey.py:229: EID_AL_FITR_DATES = {
	countries\turkey.py:292: 1998: (JAN, 29),
	countries\turkey.py:229: EID_AL_FITR_DATES = {
	countries\turkey.py:293: 1999: (JAN, 19),
	countries\turkey.py:229: EID_AL_FITR_DATES = {
	countries\turkey.py:294: 2000: ((JAN, 8), (DEC, 27)),
	countries\turkey.py:229: EID_AL_FITR_DATES = {
	countries\turkey.py:295: 2001: (DEC, 16),
	countries\turkey.py:229: EID_AL_FITR_DATES = {
	countries\turkey.py:296: 2002: (DEC, 5),
	countries\turkey.py:229: EID_AL_FITR_DATES = {
	countries\turkey.py:297: 2003: (NOV, 25),
	countries\turkey.py:229: EID_AL_FITR_DATES = {
	countries\turkey.py:298: 2004: (NOV, 14),
	countries\turkey.py:229: EID_AL_FITR_DATES = {
	countries\turkey.py:299: 2005: (NOV, 3),
	countries\turkey.py:229: EID_AL_FITR_DATES = {
	countries\turkey.py:300: 2006: (OCT, 23),
	countries\turkey.py:229: EID_AL_FITR_DATES = {
	countries\turkey.py:301: 2007: (OCT, 12),
	countries\turkey.py:229: EID_AL_FITR_DATES = {
	countries\turkey.py:302: 2008: (SEP, 30),
	countries\turkey.py:229: EID_AL_FITR_DATES = {
	countries\turkey.py:303: 2009: (SEP, 20),
	countries\turkey.py:229: EID_AL_FITR_DATES = {
	countries\turkey.py:304: 2010: (SEP, 9),
	countries\turkey.py:229: EID_AL_FITR_DATES = {
	countries\turkey.py:305: 2011: (AUG, 30),
	countries\turkey.py:229: EID_AL_FITR_DATES = {
	countries\turkey.py:306: 2012: (AUG, 19),
	countries\turkey.py:229: EID_AL_FITR_DATES = {
	countries\turkey.py:307: 2013: (AUG, 8),
	countries\turkey.py:229: EID_AL_FITR_DATES = {
	countries\turkey.py:308: 2014: (JUL, 28),
	countries\turkey.py:229: EID_AL_FITR_DATES = {
	countries\turkey.py:309: 2015: (JUL, 17),
	countries\turkey.py:229: EID_AL_FITR_DATES = {
	countries\turkey.py:310: 2016: (JUL, 5),
	countries\turkey.py:229: EID_AL_FITR_DATES = {
	countries\turkey.py:311: 2017: (JUN, 25),
	countries\turkey.py:229: EID_AL_FITR_DATES = {
	countries\turkey.py:312: 2018: (JUN, 15),
	countries\turkey.py:229: EID_AL_FITR_DATES = {
	countries\turkey.py:313: 2019: (JUN, 4),
	countries\turkey.py:229: EID_AL_FITR_DATES = {
	countries\turkey.py:314: 2020: (MAY, 24),
	countries\turkey.py:229: EID_AL_FITR_DATES = {
	countries\turkey.py:315: 2021: (MAY, 13),
	countries\turkey.py:316: 2022: (MAY, 2),
	countries\turkey.py:317: 2023: (APR, 21),
	countries\turkey.py:318: 2024: (APR, 10),
	countries\turkey.py:319: 2025: (MAR, 30),
	countries\turkey.py:320: 2026: (MAR, 20),
	countries\turkey.py:321: 2027: (MAR, 9),
	countries\turkey.py:322: 2028: (FEB, 26),
	countries\turkey.py:323: 2029: (FEB, 14),
	countries\turkey.py:324: 2030: (FEB, 4),
	countries\turkey.py:325: 2031: (JAN, 24),
	countries\turkey.py:326: 2032: (JAN, 14),
	countries\turkey.py:229: EID_AL_FITR_DATES = {
(call) calendars\custom.py:24: __new__
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
(call) calendars\custom.py:25: <genexpr>
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:26: namespace[f"{attr}_{_CustomCalendar.CUSTOM_ATTR_POSTFIX}"] = namespace[attr]
	calendars\custom.py:27: del namespace[attr]
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
(call) calendars\custom.py:25: <genexpr>
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:26: namespace[f"{attr}_{_CustomCalendar.CUSTOM_ATTR_POSTFIX}"] = namespace[attr]
	calendars\custom.py:27: del namespace[attr]
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
(call) calendars\custom.py:25: <genexpr>
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:29: return super().__new__(cls, name, bases, namespace)
	countries\turkey.py:330: class TurkeyStaticHolidays:
(call) countries\turkey.py:330: TurkeyStaticHolidays
	countries\turkey.py:330: class TurkeyStaticHolidays:
	countries\turkey.py:333: 1999: (DEC, 31, tr("Genel tati̇l"))
	countries\turkey.py:331: special_public_holidays = {
	countries\__init__.py:141: from .ukraine import Ukraine, UA, UKR
(call) countries\ukraine.py:0: <module>
	countries\ukraine.py:12: from datetime import date
	countries\ukraine.py:13: from gettext import gettext as tr
	countries\ukraine.py:15: from holidays.calendars.gregorian import (
	countries\ukraine.py:30: from holidays.calendars.julian import JULIAN_CALENDAR
	countries\ukraine.py:31: from holidays.groups import ChristianHolidays, InternationalHolidays, StaticHolidays
	countries\ukraine.py:32: from holidays.observed_holiday_base import ObservedHolidayBase, SAT_SUN_TO_NEXT_WORKDAY
	countries\ukraine.py:35: class Ukraine(ObservedHolidayBase, ChristianHolidays, InternationalHolidays, StaticHolidays):
(call) countries\ukraine.py:35: Ukraine
	countries\ukraine.py:35: class Ukraine(ObservedHolidayBase, ChristianHolidays, InternationalHolidays, StaticHolidays):
	countries\ukraine.py:36: """
	countries\ukraine.py:43: country = "UA"
	countries\ukraine.py:44: default_language = "uk"
	countries\ukraine.py:46: observed_label = tr("%s (вихідний)")
	countries\ukraine.py:47: supported_languages = ("ar", "en_US", "uk")
	countries\ukraine.py:49: def __init__(self, *args, **kwargs):
	countries\ukraine.py:56: def _is_observed(self, dt: date) -> bool:
	countries\ukraine.py:65: def _populate_public_holidays(self):
	countries\ukraine.py:159: class UA(Ukraine):
(call) countries\ukraine.py:159: UA
	countries\ukraine.py:159: class UA(Ukraine):
	countries\ukraine.py:160: pass
	countries\ukraine.py:163: class UKR(Ukraine):
(call) countries\ukraine.py:163: UKR
	countries\ukraine.py:163: class UKR(Ukraine):
	countries\ukraine.py:164: pass
	countries\ukraine.py:167: class UkraineStaticHolidays:
(call) countries\ukraine.py:167: UkraineStaticHolidays
	countries\ukraine.py:167: class UkraineStaticHolidays:
	countries\ukraine.py:168: """
	countries\ukraine.py:218: substituted_date_format = tr("%d.%m.%Y")
	countries\ukraine.py:220: substituted_label = tr("Вихідний день (перенесено з %s)")
	countries\ukraine.py:221: special_public_holidays = {
	countries\ukraine.py:222: 1992: (
	countries\ukraine.py:223: (JAN, 6, JAN, 4),
	countries\ukraine.py:224: (APR, 27, MAY, 16),
	countries\ukraine.py:222: 1992: (
	countries\ukraine.py:221: special_public_holidays = {
	countries\ukraine.py:226: 1993: (
	countries\ukraine.py:227: (JAN, 8, JAN, 10),
	countries\ukraine.py:228: (AUG, 23, AUG, 21),
	countries\ukraine.py:226: 1993: (
	countries\ukraine.py:221: special_public_holidays = {
	countries\ukraine.py:230: 1994: (MAR, 7, MAR, 5),
	countries\ukraine.py:221: special_public_holidays = {
	countries\ukraine.py:231: 1995: (
	countries\ukraine.py:233: (JAN, 9, tr("Вихідний згідно указу Президента")),
	countries\ukraine.py:234: (MAY, 8, MAY, 6),
	countries\ukraine.py:235: (AUG, 25, AUG, 27),
	countries\ukraine.py:236: (NOV, 6, NOV, 4),
	countries\ukraine.py:231: 1995: (
	countries\ukraine.py:221: special_public_holidays = {
	countries\ukraine.py:238: 1996: (
	countries\ukraine.py:239: (MAY, 3, MAY, 5),
	countries\ukraine.py:240: (MAY, 10, MAY, 12),
	countries\ukraine.py:238: 1996: (
	countries\ukraine.py:221: special_public_holidays = {
	countries\ukraine.py:242: 1997: (
	countries\ukraine.py:243: (JAN, 2, DEC, 28, 1996),
	countries\ukraine.py:244: (JAN, 6, JAN, 4),
	countries\ukraine.py:245: (APR, 29, APR, 19),
	countries\ukraine.py:246: (APR, 30, MAY, 17),
	countries\ukraine.py:242: 1997: (
	countries\ukraine.py:221: special_public_holidays = {
	countries\ukraine.py:248: 1999: (
	countries\ukraine.py:249: (JAN, 8, JAN, 10),
	countries\ukraine.py:250: (APR, 12, APR, 24),
	countries\ukraine.py:251: (AUG, 23, AUG, 21),
	countries\ukraine.py:248: 1999: (
	countries\ukraine.py:221: special_public_holidays = {
	countries\ukraine.py:253: 2000: (
	countries\ukraine.py:254: (MAY, 8, MAY, 6),
	countries\ukraine.py:255: (AUG, 25, AUG, 27),
	countries\ukraine.py:253: 2000: (
	countries\ukraine.py:221: special_public_holidays = {
	countries\ukraine.py:257: 2001: (
	countries\ukraine.py:258: (MAR, 9, MAR, 11),
	countries\ukraine.py:259: (APR, 30, APR, 28),
	countries\ukraine.py:260: (MAY, 10, MAY, 5),
	countries\ukraine.py:261: (MAY, 11, MAY, 6),
	countries\ukraine.py:262: (JUN, 29, JUN, 23),
	countries\ukraine.py:263: (DEC, 31, DEC, 29),
	countries\ukraine.py:257: 2001: (
	countries\ukraine.py:221: special_public_holidays = {
	countries\ukraine.py:265: 2002: (
	countries\ukraine.py:266: (MAY, 3, MAY, 11),
	countries\ukraine.py:267: (DEC, 30, DEC, 28),
	countries\ukraine.py:268: (DEC, 31, DEC, 29),
	countries\ukraine.py:265: 2002: (
	countries\ukraine.py:221: special_public_holidays = {
	countries\ukraine.py:270: 2003: (JAN, 6, JAN, 4),
	countries\ukraine.py:221: special_public_holidays = {
	countries\ukraine.py:271: 2004: (
	countries\ukraine.py:272: (JAN, 2, JAN, 10),
	countries\ukraine.py:273: (JAN, 5, JAN, 17),
	countries\ukraine.py:274: (JAN, 6, JAN, 31),
	countries\ukraine.py:275: (AUG, 23, AUG, 21),
	countries\ukraine.py:271: 2004: (
	countries\ukraine.py:221: special_public_holidays = {
	countries\ukraine.py:277: 2005: (
	countries\ukraine.py:278: (MAR, 7, MAR, 5),
	countries\ukraine.py:279: (MAY, 10, MAY, 14),
	countries\ukraine.py:280: (JUN, 27, JUN, 25),
	countries\ukraine.py:277: 2005: (
	countries\ukraine.py:221: special_public_holidays = {
	countries\ukraine.py:282: 2006: (
	countries\ukraine.py:283: (JAN, 3, JAN, 21),
	countries\ukraine.py:284: (JAN, 4, FEB, 4),
	countries\ukraine.py:285: (JAN, 5, FEB, 18),
	countries\ukraine.py:286: (JAN, 6, MAR, 11),
	countries\ukraine.py:287: (MAY, 8, MAY, 6),
	countries\ukraine.py:288: (AUG, 25, SEP, 9),
	countries\ukraine.py:282: 2006: (
	countries\ukraine.py:221: special_public_holidays = {
	countries\ukraine.py:290: 2007: (
	countries\ukraine.py:291: (JAN, 2, JAN, 20),
	countries\ukraine.py:292: (JAN, 3, JAN, 27),
	countries\ukraine.py:293: (JAN, 4, FEB, 10),
	countries\ukraine.py:294: (JAN, 5, FEB, 24),
	countries\ukraine.py:295: (MAR, 9, MAR, 3),
	countries\ukraine.py:296: (APR, 30, APR, 28),
	countries\ukraine.py:297: (JUN, 29, JUN, 16),
	countries\ukraine.py:298: (DEC, 31, DEC, 29),
	countries\ukraine.py:290: 2007: (
	countries\ukraine.py:221: special_public_holidays = {
	countries\ukraine.py:300: 2008: (
	countries\ukraine.py:301: (JAN, 2, JAN, 12),
	countries\ukraine.py:302: (JAN, 3, JAN, 26),
	countries\ukraine.py:303: (JAN, 4, FEB, 9),
	countries\ukraine.py:304: (APR, 29, MAY, 17),
	countries\ukraine.py:305: (APR, 30, MAY, 31),
	countries\ukraine.py:300: 2008: (
	countries\ukraine.py:221: special_public_holidays = {
	countries\ukraine.py:307: 2009: (
	countries\ukraine.py:308: (JAN, 2, JAN, 10),
	countries\ukraine.py:309: (JAN, 5, JAN, 24),
	countries\ukraine.py:310: (JAN, 6, FEB, 7),
	countries\ukraine.py:307: 2009: (
	countries\ukraine.py:221: special_public_holidays = {
	countries\ukraine.py:313: (JAN, 4, JAN, 30),
	countries\ukraine.py:314: (JAN, 5, FEB, 13),
	countries\ukraine.py:315: (JAN, 6, FEB, 27),
	countries\ukraine.py:316: (JAN, 8, MAR, 13),
	countries\ukraine.py:317: (AUG, 23, AUG, 21),
	countries\ukraine.py:312: 2010: (
	countries\ukraine.py:320: (MAR, 7, MAR, 12),
	countries\ukraine.py:321: (JUN, 27, JUN, 25),
	countries\ukraine.py:319: 2011: (
	countries\ukraine.py:324: (MAR, 9, MAR, 3),
	countries\ukraine.py:325: (APR, 20, APR, 28),
	countries\ukraine.py:326: (JUN, 29, JUL, 7),
	countries\ukraine.py:327: (DEC, 31, DEC, 29),
	countries\ukraine.py:323: 2012: (
	countries\ukraine.py:330: (MAY, 3, MAY, 18),
	countries\ukraine.py:331: (MAY, 10, JUN, 1),
	countries\ukraine.py:329: 2013: (
	countries\ukraine.py:334: (JAN, 2, JAN, 11),
	countries\ukraine.py:335: (JAN, 3, JAN, 25),
	countries\ukraine.py:336: (JAN, 6, FEB, 8),
	countries\ukraine.py:333: 2014: (
	countries\ukraine.py:339: (JAN, 2, JAN, 17),
	countries\ukraine.py:340: (JAN, 8, JAN, 31),
	countries\ukraine.py:341: (JAN, 9, FEB, 14),
	countries\ukraine.py:338: 2015: (
	countries\ukraine.py:344: (JAN, 8, JAN, 16),
	countries\ukraine.py:345: (MAR, 7, MAR, 12),
	countries\ukraine.py:346: (JUN, 27, JUL, 2),
	countries\ukraine.py:343: 2016: (
	countries\ukraine.py:349: (MAY, 8, MAY, 13),
	countries\ukraine.py:350: (AUG, 25, AUG, 19),
	countries\ukraine.py:348: 2017: (
	countries\ukraine.py:353: (MAR, 9, MAR, 3),
	countries\ukraine.py:354: (APR, 30, MAY, 5),
	countries\ukraine.py:355: (JUN, 29, JUN, 23),
	countries\ukraine.py:356: (DEC, 24, DEC, 22),
	countries\ukraine.py:357: (DEC, 31, DEC, 29),
	countries\ukraine.py:352: 2018: (
	countries\ukraine.py:360: (APR, 30, MAY, 11),
	countries\ukraine.py:361: (DEC, 30, DEC, 21),
	countries\ukraine.py:362: (DEC, 31, DEC, 28),
	countries\ukraine.py:359: 2019: (
	countries\ukraine.py:364: 2020: (JAN, 6, JAN, 11),
	countries\ukraine.py:366: (JAN, 8, JAN, 16),
	countries\ukraine.py:367: (AUG, 23, AUG, 28),
	countries\ukraine.py:368: (OCT, 15, OCT, 23),
	countries\ukraine.py:365: 2021: (
	countries\ukraine.py:370: 2022: (MAR, 7, MAR, 12),
	countries\ukraine.py:221: special_public_holidays = {
	countries\__init__.py:142: from .united_arab_emirates import UnitedArabEmirates, AE, ARE
(call) countries\united_arab_emirates.py:0: <module>
	countries\united_arab_emirates.py:12: from gettext import gettext as tr
	countries\united_arab_emirates.py:14: from holidays.calendars import _CustomIslamicHolidays
	countries\united_arab_emirates.py:15: from holidays.calendars.gregorian import APR, MAY, JUN, JUL, AUG, SEP, NOV, FRI, SAT
	countries\united_arab_emirates.py:16: from holidays.groups import InternationalHolidays, IslamicHolidays
	countries\united_arab_emirates.py:17: from holidays.holiday_base import HolidayBase
	countries\united_arab_emirates.py:20: class UnitedArabEmirates(HolidayBase, InternationalHolidays, IslamicHolidays):
(call) countries\united_arab_emirates.py:20: UnitedArabEmirates
	countries\united_arab_emirates.py:20: class UnitedArabEmirates(HolidayBase, InternationalHolidays, IslamicHolidays):
	countries\united_arab_emirates.py:21: """
	countries\united_arab_emirates.py:43: country = "AE"
	countries\united_arab_emirates.py:44: default_language = "ar"
	countries\united_arab_emirates.py:46: estimated_label = tr("(تقدير) %s")
	countries\united_arab_emirates.py:47: supported_languages = ("ar", "en_US")
	countries\united_arab_emirates.py:48: weekend = {FRI, SAT}
	countries\united_arab_emirates.py:50: def __init__(self, *args, **kwargs):
	countries\united_arab_emirates.py:55: def _populate_public_holidays(self):
	countries\united_arab_emirates.py:98: class AE(UnitedArabEmirates):
(call) countries\united_arab_emirates.py:98: AE
	countries\united_arab_emirates.py:98: class AE(UnitedArabEmirates):
	countries\united_arab_emirates.py:99: pass
	countries\united_arab_emirates.py:102: class ARE(UnitedArabEmirates):
(call) countries\united_arab_emirates.py:102: ARE
	countries\united_arab_emirates.py:102: class ARE(UnitedArabEmirates):
	countries\united_arab_emirates.py:103: pass
	countries\united_arab_emirates.py:106: class UnitedArabEmiratesIslamicHolidays(_CustomIslamicHolidays):
(call) countries\united_arab_emirates.py:106: UnitedArabEmiratesIslamicHolidays
	countries\united_arab_emirates.py:106: class UnitedArabEmiratesIslamicHolidays(_CustomIslamicHolidays):
	countries\united_arab_emirates.py:108: 2017: (SEP, 1),
	countries\united_arab_emirates.py:109: 2018: (AUG, 21),
	countries\united_arab_emirates.py:110: 2019: (AUG, 11),
	countries\united_arab_emirates.py:111: 2020: (JUL, 31),
	countries\united_arab_emirates.py:107: EID_AL_ADHA_DATES = {
	countries\united_arab_emirates.py:115: 2017: (JUN, 25),
	countries\united_arab_emirates.py:116: 2018: (JUN, 14),
	countries\united_arab_emirates.py:117: 2019: (JUN, 3),
	countries\united_arab_emirates.py:118: 2020: (MAY, 24),
	countries\united_arab_emirates.py:114: EID_AL_FITR_DATES = {
	countries\united_arab_emirates.py:122: 2017: (SEP, 22),
	countries\united_arab_emirates.py:123: 2018: (SEP, 11),
	countries\united_arab_emirates.py:124: 2019: (AUG, 31),
	countries\united_arab_emirates.py:125: 2020: (AUG, 23),
	countries\united_arab_emirates.py:121: HIJRI_NEW_YEAR_DATES = {
	countries\united_arab_emirates.py:129: 2017: (APR, 23),
	countries\united_arab_emirates.py:130: 2018: (APR, 13),
	countries\united_arab_emirates.py:128: ISRA_AND_MIRAJ_DATES = {
	countries\united_arab_emirates.py:134: 2017: (NOV, 30),
	countries\united_arab_emirates.py:135: 2018: (NOV, 19),
	countries\united_arab_emirates.py:136: 2019: (NOV, 9),
	countries\united_arab_emirates.py:133: MAWLID_DATES = {
(call) calendars\custom.py:24: __new__
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
(call) calendars\custom.py:25: <genexpr>
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:26: namespace[f"{attr}_{_CustomCalendar.CUSTOM_ATTR_POSTFIX}"] = namespace[attr]
	calendars\custom.py:27: del namespace[attr]
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
(call) calendars\custom.py:25: <genexpr>
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:26: namespace[f"{attr}_{_CustomCalendar.CUSTOM_ATTR_POSTFIX}"] = namespace[attr]
	calendars\custom.py:27: del namespace[attr]
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
(call) calendars\custom.py:25: <genexpr>
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:26: namespace[f"{attr}_{_CustomCalendar.CUSTOM_ATTR_POSTFIX}"] = namespace[attr]
	calendars\custom.py:27: del namespace[attr]
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
(call) calendars\custom.py:25: <genexpr>
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:26: namespace[f"{attr}_{_CustomCalendar.CUSTOM_ATTR_POSTFIX}"] = namespace[attr]
	calendars\custom.py:27: del namespace[attr]
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
(call) calendars\custom.py:25: <genexpr>
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:26: namespace[f"{attr}_{_CustomCalendar.CUSTOM_ATTR_POSTFIX}"] = namespace[attr]
	calendars\custom.py:27: del namespace[attr]
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
(call) calendars\custom.py:25: <genexpr>
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:29: return super().__new__(cls, name, bases, namespace)
	countries\__init__.py:143: from .united_kingdom import UnitedKingdom, GB, GBR, UK
	countries\__init__.py:144: from .united_states import UnitedStates, US, USA
	countries\__init__.py:145: from .united_states_minor_outlying_islands import (
(call) countries\united_states_minor_outlying_islands.py:0: <module>
	countries\united_states_minor_outlying_islands.py:12: from holidays.countries.united_states import US
	countries\united_states_minor_outlying_islands.py:15: class HolidaysUM(US):
(call) countries\united_states_minor_outlying_islands.py:15: HolidaysUM
	countries\united_states_minor_outlying_islands.py:15: class HolidaysUM(US):
	countries\united_states_minor_outlying_islands.py:20: country = "UM"
	countries\united_states_minor_outlying_islands.py:21: subdivisions = ()  # Override US subdivisions.
	countries\united_states_minor_outlying_islands.py:23: def _populate_public_holidays(self) -> None:
	countries\united_states_minor_outlying_islands.py:28: class UM(HolidaysUM):
(call) countries\united_states_minor_outlying_islands.py:28: UM
	countries\united_states_minor_outlying_islands.py:28: class UM(HolidaysUM):
	countries\united_states_minor_outlying_islands.py:29: pass
	countries\united_states_minor_outlying_islands.py:32: class UMI(HolidaysUM):
(call) countries\united_states_minor_outlying_islands.py:32: UMI
	countries\united_states_minor_outlying_islands.py:32: class UMI(HolidaysUM):
	countries\united_states_minor_outlying_islands.py:33: pass
	countries\united_states_minor_outlying_islands.py:36: class UnitedStatesMinorOutlyingIslands(HolidaysUM):
(call) countries\united_states_minor_outlying_islands.py:36: UnitedStatesMinorOutlyingIslands
	countries\united_states_minor_outlying_islands.py:36: class UnitedStatesMinorOutlyingIslands(HolidaysUM):
	countries\united_states_minor_outlying_islands.py:37: pass
	countries\__init__.py:151: from .united_states_virgin_islands import UnitedStatesVirginIslands, VI, VIR, HolidaysVI
(call) countries\united_states_virgin_islands.py:0: <module>
	countries\united_states_virgin_islands.py:12: from holidays.countries.united_states import US
	countries\united_states_virgin_islands.py:15: class HolidaysVI(US):
(call) countries\united_states_virgin_islands.py:15: HolidaysVI
	countries\united_states_virgin_islands.py:15: class HolidaysVI(US):
	countries\united_states_virgin_islands.py:20: country = "VI"
	countries\united_states_virgin_islands.py:21: subdivisions = ()  # Override US subdivisions.
	countries\united_states_virgin_islands.py:23: def _populate_public_holidays(self) -> None:
	countries\united_states_virgin_islands.py:28: class VI(HolidaysVI):
(call) countries\united_states_virgin_islands.py:28: VI
	countries\united_states_virgin_islands.py:28: class VI(HolidaysVI):
	countries\united_states_virgin_islands.py:29: pass
	countries\united_states_virgin_islands.py:32: class VIR(HolidaysVI):
(call) countries\united_states_virgin_islands.py:32: VIR
	countries\united_states_virgin_islands.py:32: class VIR(HolidaysVI):
	countries\united_states_virgin_islands.py:33: pass
	countries\united_states_virgin_islands.py:36: class UnitedStatesVirginIslands(HolidaysVI):
(call) countries\united_states_virgin_islands.py:36: UnitedStatesVirginIslands
	countries\united_states_virgin_islands.py:36: class UnitedStatesVirginIslands(HolidaysVI):
	countries\united_states_virgin_islands.py:37: pass
	countries\__init__.py:152: from .uruguay import Uruguay, UY, URY
(call) countries\uruguay.py:0: <module>
	countries\uruguay.py:12: from datetime import date
	countries\uruguay.py:13: from datetime import timedelta as td
	countries\uruguay.py:14: from gettext import gettext as tr
	countries\uruguay.py:16: from holidays.calendars.gregorian import MAR
	countries\uruguay.py:17: from holidays.constants import BANK, PUBLIC
	countries\uruguay.py:18: from holidays.groups import ChristianHolidays, InternationalHolidays, StaticHolidays
	countries\uruguay.py:19: from holidays.observed_holiday_base import (
	countries\uruguay.py:26: class Uruguay(ObservedHolidayBase, ChristianHolidays, InternationalHolidays, StaticHolidays):
(call) countries\uruguay.py:26: Uruguay
	countries\uruguay.py:26: class Uruguay(ObservedHolidayBase, ChristianHolidays, InternationalHolidays, StaticHolidays):
	countries\uruguay.py:27: """
	countries\uruguay.py:38: country = "UY"
	countries\uruguay.py:39: default_language = "es"
	countries\uruguay.py:40: supported_categories = (BANK, PUBLIC)
	countries\uruguay.py:41: supported_languages = ("en_US", "es", "uk")
	countries\uruguay.py:43: def __init__(self, *args, **kwargs):
	countries\uruguay.py:51: def _is_observed(self, dt: date) -> bool:
	countries\uruguay.py:54: def _populate_public_holidays(self):
	countries\uruguay.py:104: def _populate_bank_holidays(self):
	countries\uruguay.py:158: class UY(Uruguay):
(call) countries\uruguay.py:158: UY
	countries\uruguay.py:158: class UY(Uruguay):
	countries\uruguay.py:159: pass
	countries\uruguay.py:162: class URY(Uruguay):
(call) countries\uruguay.py:162: URY
	countries\uruguay.py:162: class URY(Uruguay):
	countries\uruguay.py:163: pass
	countries\uruguay.py:166: class UruguayStaticHolidays:
(call) countries\uruguay.py:166: UruguayStaticHolidays
	countries\uruguay.py:166: class UruguayStaticHolidays:
	countries\uruguay.py:168: presidential_inauguration_day = tr("Inauguración del Presidente de la República")
	countries\uruguay.py:170: 1985: (MAR, 1, presidential_inauguration_day),
	countries\uruguay.py:171: 1990: (MAR, 1, presidential_inauguration_day),
	countries\uruguay.py:172: 1995: (MAR, 1, presidential_inauguration_day),
	countries\uruguay.py:173: 2000: (MAR, 1, presidential_inauguration_day),
	countries\uruguay.py:174: 2005: (MAR, 1, presidential_inauguration_day),
	countries\uruguay.py:175: 2010: (MAR, 1, presidential_inauguration_day),
	countries\uruguay.py:176: 2015: (MAR, 1, presidential_inauguration_day),
	countries\uruguay.py:177: 2020: (MAR, 1, presidential_inauguration_day),
	countries\uruguay.py:169: special_public_holidays = {
	countries\__init__.py:153: from .uzbekistan import Uzbekistan, UZ, UZB
(call) countries\uzbekistan.py:0: <module>
	countries\uzbekistan.py:12: from datetime import date
	countries\uzbekistan.py:13: from gettext import gettext as tr
	countries\uzbekistan.py:15: from holidays.calendars import _CustomIslamicHolidays
	countries\uzbekistan.py:16: from holidays.calendars.gregorian import JAN, MAR, APR, MAY, JUN, JUL, AUG, SEP, OCT, NOV, DEC
	countries\uzbekistan.py:17: from holidays.groups import InternationalHolidays, IslamicHolidays, StaticHolidays
	countries\uzbekistan.py:18: from holidays.observed_holiday_base import ObservedHolidayBase, SAT_SUN_TO_NEXT_WORKDAY
	countries\uzbekistan.py:21: class Uzbekistan(ObservedHolidayBase, InternationalHolidays, IslamicHolidays, StaticHolidays):
(call) countries\uzbekistan.py:21: Uzbekistan
	countries\uzbekistan.py:21: class Uzbekistan(ObservedHolidayBase, InternationalHolidays, IslamicHolidays, StaticHolidays):
	countries\uzbekistan.py:22: """
	countries\uzbekistan.py:29: country = "UZ"
	countries\uzbekistan.py:30: default_language = "uz"
	countries\uzbekistan.py:32: estimated_label = tr("%s (taxminiy)")
	countries\uzbekistan.py:34: observed_label = tr("%s (ko‘chirilgan)")
	countries\uzbekistan.py:36: observed_estimated_label = tr("%s (ko‘chirilgan, taxminiy)")
	countries\uzbekistan.py:37: supported_languages = ("en_US", "uk", "uz")
	countries\uzbekistan.py:39: def __init__(self, *args, **kwargs):
	countries\uzbekistan.py:46: def _is_observed(self, dt: date) -> bool:
	countries\uzbekistan.py:50: def _populate_public_holidays(self):
	countries\uzbekistan.py:97: class UZ(Uzbekistan):
(call) countries\uzbekistan.py:97: UZ
	countries\uzbekistan.py:97: class UZ(Uzbekistan):
	countries\uzbekistan.py:98: pass
	countries\uzbekistan.py:101: class UZB(Uzbekistan):
(call) countries\uzbekistan.py:101: UZB
	countries\uzbekistan.py:101: class UZB(Uzbekistan):
	countries\uzbekistan.py:102: pass
	countries\uzbekistan.py:105: class UzbekistanIslamicHolidays(_CustomIslamicHolidays):
(call) countries\uzbekistan.py:105: UzbekistanIslamicHolidays
	countries\uzbekistan.py:105: class UzbekistanIslamicHolidays(_CustomIslamicHolidays):
	countries\uzbekistan.py:106: EID_AL_ADHA_DATES = {
	countries\uzbekistan.py:107: 2006: ((JAN, 10), (DEC, 30)),
	countries\uzbekistan.py:106: EID_AL_ADHA_DATES = {
	countries\uzbekistan.py:108: 2007: (DEC, 19),
	countries\uzbekistan.py:106: EID_AL_ADHA_DATES = {
	countries\uzbekistan.py:109: 2008: (DEC, 8),
	countries\uzbekistan.py:106: EID_AL_ADHA_DATES = {
	countries\uzbekistan.py:110: 2009: (NOV, 27),
	countries\uzbekistan.py:106: EID_AL_ADHA_DATES = {
	countries\uzbekistan.py:111: 2010: (NOV, 16),
	countries\uzbekistan.py:106: EID_AL_ADHA_DATES = {
	countries\uzbekistan.py:112: 2011: (NOV, 6),
	countries\uzbekistan.py:106: EID_AL_ADHA_DATES = {
	countries\uzbekistan.py:113: 2012: (OCT, 26),
	countries\uzbekistan.py:106: EID_AL_ADHA_DATES = {
	countries\uzbekistan.py:114: 2013: (OCT, 15),
	countries\uzbekistan.py:106: EID_AL_ADHA_DATES = {
	countries\uzbekistan.py:115: 2014: (OCT, 4),
	countries\uzbekistan.py:106: EID_AL_ADHA_DATES = {
	countries\uzbekistan.py:116: 2015: (SEP, 24),
	countries\uzbekistan.py:106: EID_AL_ADHA_DATES = {
	countries\uzbekistan.py:117: 2016: (SEP, 12),
	countries\uzbekistan.py:106: EID_AL_ADHA_DATES = {
	countries\uzbekistan.py:118: 2017: (SEP, 1),
	countries\uzbekistan.py:106: EID_AL_ADHA_DATES = {
	countries\uzbekistan.py:119: 2018: (AUG, 21),
	countries\uzbekistan.py:106: EID_AL_ADHA_DATES = {
	countries\uzbekistan.py:120: 2019: (AUG, 11),
	countries\uzbekistan.py:106: EID_AL_ADHA_DATES = {
	countries\uzbekistan.py:121: 2020: (JUL, 31),
	countries\uzbekistan.py:106: EID_AL_ADHA_DATES = {
	countries\uzbekistan.py:122: 2021: (JUL, 20),
	countries\uzbekistan.py:106: EID_AL_ADHA_DATES = {
	countries\uzbekistan.py:123: 2022: (JUL, 9),
	countries\uzbekistan.py:106: EID_AL_ADHA_DATES = {
	countries\uzbekistan.py:124: 2023: (JUN, 28),
	countries\uzbekistan.py:106: EID_AL_ADHA_DATES = {
	countries\uzbekistan.py:127: EID_AL_FITR_DATES = {
	countries\uzbekistan.py:128: 2006: (OCT, 23),
	countries\uzbekistan.py:127: EID_AL_FITR_DATES = {
	countries\uzbekistan.py:129: 2007: (OCT, 13),
	countries\uzbekistan.py:127: EID_AL_FITR_DATES = {
	countries\uzbekistan.py:130: 2008: (OCT, 1),
	countries\uzbekistan.py:127: EID_AL_FITR_DATES = {
	countries\uzbekistan.py:131: 2009: (SEP, 21),
	countries\uzbekistan.py:127: EID_AL_FITR_DATES = {
	countries\uzbekistan.py:132: 2010: (SEP, 10),
	countries\uzbekistan.py:127: EID_AL_FITR_DATES = {
	countries\uzbekistan.py:133: 2011: (AUG, 31),
	countries\uzbekistan.py:127: EID_AL_FITR_DATES = {
	countries\uzbekistan.py:134: 2012: (AUG, 19),
	countries\uzbekistan.py:127: EID_AL_FITR_DATES = {
	countries\uzbekistan.py:135: 2013: (AUG, 9),
	countries\uzbekistan.py:127: EID_AL_FITR_DATES = {
	countries\uzbekistan.py:136: 2014: (JUL, 28),
	countries\uzbekistan.py:127: EID_AL_FITR_DATES = {
	countries\uzbekistan.py:137: 2015: (JUL, 18),
	countries\uzbekistan.py:127: EID_AL_FITR_DATES = {
	countries\uzbekistan.py:138: 2016: (JUL, 6),
	countries\uzbekistan.py:127: EID_AL_FITR_DATES = {
	countries\uzbekistan.py:139: 2017: (JUN, 26),
	countries\uzbekistan.py:127: EID_AL_FITR_DATES = {
	countries\uzbekistan.py:140: 2018: (JUN, 15),
	countries\uzbekistan.py:127: EID_AL_FITR_DATES = {
	countries\uzbekistan.py:141: 2019: (JUN, 5),
	countries\uzbekistan.py:127: EID_AL_FITR_DATES = {
	countries\uzbekistan.py:142: 2020: (MAY, 24),
	countries\uzbekistan.py:127: EID_AL_FITR_DATES = {
	countries\uzbekistan.py:143: 2021: (MAY, 13),
	countries\uzbekistan.py:127: EID_AL_FITR_DATES = {
	countries\uzbekistan.py:144: 2022: (MAY, 2),
	countries\uzbekistan.py:127: EID_AL_FITR_DATES = {
	countries\uzbekistan.py:145: 2023: (APR, 21),
	countries\uzbekistan.py:127: EID_AL_FITR_DATES = {
(call) calendars\custom.py:24: __new__
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
(call) calendars\custom.py:25: <genexpr>
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:26: namespace[f"{attr}_{_CustomCalendar.CUSTOM_ATTR_POSTFIX}"] = namespace[attr]
	calendars\custom.py:27: del namespace[attr]
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
(call) calendars\custom.py:25: <genexpr>
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:26: namespace[f"{attr}_{_CustomCalendar.CUSTOM_ATTR_POSTFIX}"] = namespace[attr]
	calendars\custom.py:27: del namespace[attr]
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
(call) calendars\custom.py:25: <genexpr>
	calendars\custom.py:25: for attr in (key for key in tuple(namespace.keys()) if key[0] != "_"):
	calendars\custom.py:29: return super().__new__(cls, name, bases, namespace)
	countries\uzbekistan.py:149: class UzbekistanStaticHolidays:
(call) countries\uzbekistan.py:149: UzbekistanStaticHolidays
	countries\uzbekistan.py:149: class UzbekistanStaticHolidays:
	countries\uzbekistan.py:151: substituted_date_format = tr("%d/%m %Y")
	countries\uzbekistan.py:153: substituted_label = tr("Dam olish kuni (%s dan ko‘chirilgan)")
	countries\uzbekistan.py:156: additional_day_off = tr("Prezidentining farmoni bilan qo‘shimcha dam olish kuni")
	countries\uzbekistan.py:159: (JAN, 2, additional_day_off),
	countries\uzbekistan.py:160: (JAN, 3, JAN, 6),
	countries\uzbekistan.py:161: (MAR, 19, MAR, 17),
	countries\uzbekistan.py:162: (MAR, 22, MAR, 24),
	countries\uzbekistan.py:163: (MAR, 30, additional_day_off),
	countries\uzbekistan.py:164: (AUG, 23, AUG, 25),
	countries\uzbekistan.py:165: (AUG, 24, AUG, 26),
	countries\uzbekistan.py:166: (AUG, 31, additional_day_off),
	countries\uzbekistan.py:167: (SEP, 3, SEP, 8),
	countries\uzbekistan.py:168: (SEP, 4, SEP, 15),
	countries\uzbekistan.py:169: (DEC, 31, DEC, 29),
	countries\uzbekistan.py:158: 2018: (
	countries\uzbekistan.py:172: (JAN, 2, additional_day_off),
	countries\uzbekistan.py:173: (JAN, 3, JAN, 5),
	countries\uzbekistan.py:174: (MAR, 22, additional_day_off),
	countries\uzbekistan.py:175: (JUN, 6, JUN, 1),
	countries\uzbekistan.py:176: (SEP, 2, additional_day_off),
	countries\uzbekistan.py:177: (SEP, 3, SEP, 7),
	countries\uzbekistan.py:178: (DEC, 31, DEC, 28),
	countries\uzbekistan.py:171: 2019: (
	countries\uzbekistan.py:181: (JAN, 2, JAN, 4),
	countries\uzbekistan.py:182: (MAR, 23, additional_day_off),
	countries\uzbekistan.py:183: (AUG, 31, AUG, 29),
	countries\uzbekistan.py:180: 2020: (
	countries\uzbekistan.py:186: (MAR, 22, MAR, 27),
	countries\uzbekistan.py:187: (MAY, 14, additional_day_off),
	countries\uzbekistan.py:188: (JUL, 21, JUL, 17),
	countries\uzbekistan.py:189: (JUL, 22, JUL, 24),
	countries\uzbekistan.py:190: (SEP, 2, additional_day_off),
	countries\uzbekistan.py:191: (SEP, 3, additional_day_off),
	countries\uzbekistan.py:192: (DEC, 31, additional_day_off),
	countries\uzbekistan.py:185: 2021: (
	countries\uzbekistan.py:195: (JAN, 3, additional_day_off),
	countries\uzbekistan.py:196: (JAN, 4, JAN, 8),
	countries\uzbekistan.py:197: (MAR, 22, additional_day_off),
	countries\uzbekistan.py:198: (MAR, 23, additional_day_off),
	countries\uzbekistan.py:199: (MAY, 3, additional_day_off),
	countries\uzbekistan.py:200: (MAY, 4, MAY, 7),
	countries\uzbekistan.py:201: (JUL, 11, additional_day_off),
	countries\uzbekistan.py:202: (JUL, 12, JUL, 16),
	countries\uzbekistan.py:203: (SEP, 2, additional_day_off),
	countries\uzbekistan.py:194: 2022: (
	countries\uzbekistan.py:206: (JAN, 2, additional_day_off),
	countries\uzbekistan.py:207: (JAN, 3, JAN, 7),
	countries\uzbekistan.py:208: (MAR, 20, MAR, 11),
	countries\uzbekistan.py:209: (MAR, 22, MAR, 25),
	countries\uzbekistan.py:210: (APR, 24, additional_day_off),
	countries\uzbekistan.py:211: (JUN, 29, additional_day_off),
	countries\uzbekistan.py:212: (JUN, 30, additional_day_off),
	countries\uzbekistan.py:205: 2023: (
	countries\uzbekistan.py:215: (JAN, 2, JAN, 6),
	countries\uzbekistan.py:216: (MAR, 22, additional_day_off),
	countries\uzbekistan.py:217: (APR, 11, additional_day_off),
	countries\uzbekistan.py:218: (APR, 12, APR, 13),
	countries\uzbekistan.py:219: (JUN, 18, additional_day_off),
	countries\uzbekistan.py:220: (SEP, 3, additional_day_off),
	countries\uzbekistan.py:221: (DEC, 30, DEC, 14),
	countries\uzbekistan.py:222: (DEC, 31, additional_day_off),
	countries\uzbekistan.py:214: 2024: (
	countries\uzbekistan.py:157: special_public_holidays = {
	countries\__init__.py:154: from .vanuatu import Vanuatu, VU, VTU
(call) countries\vanuatu.py:0: <module>
	countries\vanuatu.py:12: from holidays.calendars.gregorian import JUL, OCT
	countries\vanuatu.py:13: from holidays.groups import ChristianHolidays, InternationalHolidays, StaticHolidays
	countries\vanuatu.py:14: from holidays.observed_holiday_base import ObservedHolidayBase, SUN_TO_NEXT_MON, MON_TO_NEXT_TUE
	countries\vanuatu.py:17: class Vanuatu(ObservedHolidayBase, ChristianHolidays, InternationalHolidays, StaticHolidays):
(call) countries\vanuatu.py:17: Vanuatu
	countries\vanuatu.py:17: class Vanuatu(ObservedHolidayBase, ChristianHolidays, InternationalHolidays, StaticHolidays):
	countries\vanuatu.py:18: """
	countries\vanuatu.py:24: country = "VU"
	countries\vanuatu.py:25: observed_label = "%s (observed)"
	countries\vanuatu.py:27: def __init__(self, *args, **kwargs):
	countries\vanuatu.py:34: def _populate_public_holidays(self):
	countries\vanuatu.py:85: class VU(Vanuatu):
(call) countries\vanuatu.py:85: VU
	countries\vanuatu.py:85: class VU(Vanuatu):
	countries\vanuatu.py:86: pass
	countries\vanuatu.py:89: class VTU(Vanuatu):
(call) countries\vanuatu.py:89: VTU
	countries\vanuatu.py:89: class VTU(Vanuatu):
	countries\vanuatu.py:90: pass
	countries\vanuatu.py:93: class VanuatuStaticHolidays:
(call) countries\vanuatu.py:93: VanuatuStaticHolidays
	countries\vanuatu.py:93: class VanuatuStaticHolidays:
	countries\vanuatu.py:94: independence_anniversary = "40th Independence Anniversary"
	countries\vanuatu.py:98: (JUL, 23, independence_anniversary),
	countries\vanuatu.py:99: (JUL, 27, independence_anniversary),
	countries\vanuatu.py:100: (JUL, 28, independence_anniversary),
	countries\vanuatu.py:101: (JUL, 29, independence_anniversary),
	countries\vanuatu.py:102: (JUL, 31, independence_anniversary),
	countries\vanuatu.py:97: 2020: (
	countries\vanuatu.py:104: 2022: (OCT, 13, "Election Day"),
	countries\vanuatu.py:96: special_public_holidays = {
	countries\__init__.py:155: from .vatican_city import VaticanCity, VA, VAT
(call) countries\vatican_city.py:0: <module>
	countries\vatican_city.py:12: from holidays.groups import ChristianHolidays
	countries\vatican_city.py:13: from holidays.holiday_base import HolidayBase
	countries\vatican_city.py:16: class VaticanCity(HolidayBase, ChristianHolidays):
(call) countries\vatican_city.py:16: VaticanCity
	countries\vatican_city.py:16: class VaticanCity(HolidayBase, ChristianHolidays):
	countries\vatican_city.py:17: """
	countries\vatican_city.py:24: country = "VA"
	countries\vatican_city.py:26: def __init__(self, *args, **kwargs) -> None:
	countries\vatican_city.py:30: def _populate_public_holidays(self) -> None:
	countries\vatican_city.py:115: class VA(VaticanCity):
(call) countries\vatican_city.py:115: VA
	countries\vatican_city.py:115: class VA(VaticanCity):
	countries\vatican_city.py:116: pass
	countries\vatican_city.py:119: class VAT(VaticanCity):
(call) countries\vatican_city.py:119: VAT
	countries\vatican_city.py:119: class VAT(VaticanCity):
	countries\vatican_city.py:120: pass
	countries\__init__.py:156: from .venezuela import Venezuela, VE, VEN
(call) countries\venezuela.py:0: <module>
	countries\venezuela.py:12: from gettext import gettext as tr
	countries\venezuela.py:14: from holidays.groups import ChristianHolidays, InternationalHolidays
	countries\venezuela.py:15: from holidays.holiday_base import HolidayBase
	countries\venezuela.py:18: class Venezuela(HolidayBase, ChristianHolidays, InternationalHolidays):
(call) countries\venezuela.py:18: Venezuela
	countries\venezuela.py:18: class Venezuela(HolidayBase, ChristianHolidays, InternationalHolidays):
	countries\venezuela.py:19: """
	countries\venezuela.py:23: country = "VE"
	countries\venezuela.py:24: default_language = "es"
	countries\venezuela.py:25: supported_languages = ("en_US", "es", "uk")
	countries\venezuela.py:27: def __init__(self, *args, **kwargs) -> None:
	countries\venezuela.py:32: def _populate_public_holidays(self):
	countries\venezuela.py:108: class VE(Venezuela):
(call) countries\venezuela.py:108: VE
	countries\venezuela.py:108: class VE(Venezuela):
	countries\venezuela.py:109: pass
	countries\venezuela.py:112: class VEN(Venezuela):
(call) countries\venezuela.py:112: VEN
	countries\venezuela.py:112: class VEN(Venezuela):
	countries\venezuela.py:113: pass
	countries\__init__.py:157: from .vietnam import Vietnam, VN, VNM
(call) countries\vietnam.py:0: <module>
	countries\vietnam.py:12: from holidays.groups import ChineseCalendarHolidays, InternationalHolidays
	countries\vietnam.py:13: from holidays.observed_holiday_base import ObservedHolidayBase, SAT_SUN_TO_NEXT_WORKDAY
	countries\vietnam.py:16: class Vietnam(ObservedHolidayBase, ChineseCalendarHolidays, InternationalHolidays):
(call) countries\vietnam.py:16: Vietnam
	countries\vietnam.py:16: class Vietnam(ObservedHolidayBase, ChineseCalendarHolidays, InternationalHolidays):
	countries\vietnam.py:17: """
	countries\vietnam.py:23: country = "VN"
	countries\vietnam.py:24: observed_label = "%s (observed)"
	countries\vietnam.py:26: def __init__(self, *args, **kwargs):
	countries\vietnam.py:32: def _populate_public_holidays(self):
	countries\vietnam.py:64: class VN(Vietnam):
(call) countries\vietnam.py:64: VN
	countries\vietnam.py:64: class VN(Vietnam):
	countries\vietnam.py:65: pass
	countries\vietnam.py:68: class VNM(Vietnam):
(call) countries\vietnam.py:68: VNM
	countries\vietnam.py:68: class VNM(Vietnam):
	countries\vietnam.py:69: pass
	countries\__init__.py:158: from .zambia import Zambia, ZM, ZMB
(call) countries\zambia.py:0: <module>
	countries\zambia.py:12: from holidays.calendars.gregorian import MAR, JUL, AUG, SEP
	countries\zambia.py:13: from holidays.groups import ChristianHolidays, InternationalHolidays, StaticHolidays
	countries\zambia.py:14: from holidays.observed_holiday_base import ObservedHolidayBase, SUN_TO_NEXT_MON
	countries\zambia.py:17: class Zambia(ObservedHolidayBase, ChristianHolidays, InternationalHolidays, StaticHolidays):
(call) countries\zambia.py:17: Zambia
	countries\zambia.py:17: class Zambia(ObservedHolidayBase, ChristianHolidays, InternationalHolidays, StaticHolidays):
	countries\zambia.py:18: """
	countries\zambia.py:25: country = "ZM"
	countries\zambia.py:26: observed_label = "%s (observed)"
	countries\zambia.py:28: def __init__(self, *args, **kwargs):
	countries\zambia.py:35: def _populate_public_holidays(self):
	countries\zambia.py:91: class ZM(Zambia):
(call) countries\zambia.py:91: ZM
	countries\zambia.py:91: class ZM(Zambia):
	countries\zambia.py:92: pass
	countries\zambia.py:95: class ZMB(Zambia):
(call) countries\zambia.py:95: ZMB
	countries\zambia.py:95: class ZMB(Zambia):
	countries\zambia.py:96: pass
	countries\zambia.py:99: class ZambiaStaticHolidays:
(call) countries\zambia.py:99: ZambiaStaticHolidays
	countries\zambia.py:99: class ZambiaStaticHolidays:
	countries\zambia.py:102: (AUG, 11, "General elections and referendum"),
	countries\zambia.py:103: (SEP, 13, "Inauguration ceremony of President-elect and Vice President-elect"),
	countries\zambia.py:101: 2016: (
	countries\zambia.py:106: (MAR, 9, "Public holiday"),
	countries\zambia.py:107: (JUL, 26, "Lusaka mayoral and other local government elections"),
	countries\zambia.py:105: 2018: (
	countries\zambia.py:110: (JUL, 2, "Memorial service for Kenneth Kaunda"),
	countries\zambia.py:111: (JUL, 7, "Funeral of Kenneth Kaunda"),
	countries\zambia.py:112: (AUG, 12, "General elections"),
	countries\zambia.py:113: (AUG, 13, "Counting in general elections"),
	countries\zambia.py:114: (AUG, 24, "Presidential inauguration"),
	countries\zambia.py:109: 2021: (
	countries\zambia.py:116: 2022: (MAR, 18, "Funeral of Rupiah Banda"),
	countries\zambia.py:100: special_public_holidays = {
	countries\__init__.py:159: from .zimbabwe import Zimbabwe, ZW, ZWE
(call) countries\zimbabwe.py:0: <module>
	countries\zimbabwe.py:12: from holidays.groups import ChristianHolidays, InternationalHolidays
	countries\zimbabwe.py:13: from holidays.observed_holiday_base import ObservedHolidayBase, SUN_TO_NEXT_MON, SUN_TO_NEXT_TUE
	countries\zimbabwe.py:16: class Zimbabwe(ObservedHolidayBase, ChristianHolidays, InternationalHolidays):
(call) countries\zimbabwe.py:16: Zimbabwe
	countries\zimbabwe.py:16: class Zimbabwe(ObservedHolidayBase, ChristianHolidays, InternationalHolidays):
	countries\zimbabwe.py:17: """
	countries\zimbabwe.py:22: country = "ZW"
	countries\zimbabwe.py:23: observed_label = "%s (observed)"
	countries\zimbabwe.py:25: def __init__(self, *args, **kwargs):
	countries\zimbabwe.py:31: def _populate_public_holidays(self):
	countries\zimbabwe.py:81: class ZW(Zimbabwe):
(call) countries\zimbabwe.py:81: ZW
	countries\zimbabwe.py:81: class ZW(Zimbabwe):
	countries\zimbabwe.py:82: pass
	countries\zimbabwe.py:85: class ZWE(Zimbabwe):
(call) countries\zimbabwe.py:85: ZWE
	countries\zimbabwe.py:85: class ZWE(Zimbabwe):
	countries\zimbabwe.py:86: pass
	registry.py:220: return self.entity
	registry.py:201: return cls(*args, **kwargs)  # type: ignore[misc, operator]
(call) countries\china.py:69: __init__
	countries\china.py:70: ChineseCalendarHolidays.__init__(self)
(call) groups\chinese.py:25: __init__
	groups\chinese.py:26: self._chinese_calendar = cls() if cls else _ChineseLunisolar()
(call) holiday_base.py:613: __setattr__
	holiday_base.py:614: dict.__setattr__(self, key, value)
	holiday_base.py:616: if self and key in {"categories", "observed"}:
(call) holiday_base.py:389: __bool__
	holiday_base.py:390: return len(self) > 0
	groups\chinese.py:27: self._chinese_calendar_show_estimated = show_estimated
(call) holiday_base.py:613: __setattr__
	holiday_base.py:614: dict.__setattr__(self, key, value)
	holiday_base.py:616: if self and key in {"categories", "observed"}:
(call) holiday_base.py:389: __bool__
	holiday_base.py:390: return len(self) > 0
	countries\china.py:71: InternationalHolidays.__init__(self)
	countries\china.py:72: StaticHolidays.__init__(self, cls=ChinaStaticHolidays)
(call) groups\custom.py:20: __init__
	groups\custom.py:21: for attribute_name in cls.__dict__.keys():
	groups\custom.py:23: if attribute_name.startswith("special_") and (
	groups\custom.py:30: elif attribute_name.startswith("substituted_") and (
	groups\custom.py:21: for attribute_name in cls.__dict__.keys():
	groups\custom.py:23: if attribute_name.startswith("special_") and (
	groups\custom.py:30: elif attribute_name.startswith("substituted_") and (
	groups\custom.py:31: value := getattr(cls, attribute_name, None)
	groups\custom.py:30: elif attribute_name.startswith("substituted_") and (
	groups\custom.py:33: setattr(self, attribute_name, value)
(call) holiday_base.py:613: __setattr__
	holiday_base.py:614: dict.__setattr__(self, key, value)
	holiday_base.py:616: if self and key in {"categories", "observed"}:
(call) holiday_base.py:389: __bool__
	holiday_base.py:390: return len(self) > 0
	groups\custom.py:34: self.has_substituted_holidays = True
(call) holiday_base.py:613: __setattr__
	holiday_base.py:614: dict.__setattr__(self, key, value)
	holiday_base.py:616: if self and key in {"categories", "observed"}:
(call) holiday_base.py:389: __bool__
	holiday_base.py:390: return len(self) > 0
	groups\custom.py:21: for attribute_name in cls.__dict__.keys():
	groups\custom.py:23: if attribute_name.startswith("special_") and (
	groups\custom.py:30: elif attribute_name.startswith("substituted_") and (
	groups\custom.py:31: value := getattr(cls, attribute_name, None)
	groups\custom.py:30: elif attribute_name.startswith("substituted_") and (
	groups\custom.py:33: setattr(self, attribute_name, value)
(call) holiday_base.py:613: __setattr__
	holiday_base.py:614: dict.__setattr__(self, key, value)
	holiday_base.py:616: if self and key in {"categories", "observed"}:
(call) holiday_base.py:389: __bool__
	holiday_base.py:390: return len(self) > 0
	groups\custom.py:34: self.has_substituted_holidays = True
(call) holiday_base.py:613: __setattr__
	holiday_base.py:614: dict.__setattr__(self, key, value)
	holiday_base.py:616: if self and key in {"categories", "observed"}:
(call) holiday_base.py:389: __bool__
	holiday_base.py:390: return len(self) > 0
	groups\custom.py:21: for attribute_name in cls.__dict__.keys():
	groups\custom.py:23: if attribute_name.startswith("special_") and (
	groups\custom.py:30: elif attribute_name.startswith("substituted_") and (
	groups\custom.py:21: for attribute_name in cls.__dict__.keys():
	groups\custom.py:23: if attribute_name.startswith("special_") and (
	groups\custom.py:30: elif attribute_name.startswith("substituted_") and (
	groups\custom.py:21: for attribute_name in cls.__dict__.keys():
	groups\custom.py:23: if attribute_name.startswith("special_") and (
	groups\custom.py:30: elif attribute_name.startswith("substituted_") and (
	groups\custom.py:21: for attribute_name in cls.__dict__.keys():
	groups\custom.py:23: if attribute_name.startswith("special_") and (
	groups\custom.py:24: value := getattr(cls, attribute_name, None)
	groups\custom.py:23: if attribute_name.startswith("special_") and (
	groups\custom.py:26: setattr(self, attribute_name, value)
(call) holiday_base.py:613: __setattr__
	holiday_base.py:614: dict.__setattr__(self, key, value)
	holiday_base.py:616: if self and key in {"categories", "observed"}:
(call) holiday_base.py:389: __bool__
	holiday_base.py:390: return len(self) > 0
	groups\custom.py:27: self.has_special_holidays = True
(call) holiday_base.py:613: __setattr__
	holiday_base.py:614: dict.__setattr__(self, key, value)
	holiday_base.py:616: if self and key in {"categories", "observed"}:
(call) holiday_base.py:389: __bool__
	holiday_base.py:390: return len(self) > 0
	groups\custom.py:21: for attribute_name in cls.__dict__.keys():
	groups\custom.py:23: if attribute_name.startswith("special_") and (
	groups\custom.py:24: value := getattr(cls, attribute_name, None)
	groups\custom.py:23: if attribute_name.startswith("special_") and (
	groups\custom.py:26: setattr(self, attribute_name, value)
(call) holiday_base.py:613: __setattr__
	holiday_base.py:614: dict.__setattr__(self, key, value)
	holiday_base.py:616: if self and key in {"categories", "observed"}:
(call) holiday_base.py:389: __bool__
	holiday_base.py:390: return len(self) > 0
	groups\custom.py:27: self.has_special_holidays = True
(call) holiday_base.py:613: __setattr__
	holiday_base.py:614: dict.__setattr__(self, key, value)
	holiday_base.py:616: if self and key in {"categories", "observed"}:
(call) holiday_base.py:389: __bool__
	holiday_base.py:390: return len(self) > 0
	groups\custom.py:21: for attribute_name in cls.__dict__.keys():
	groups\custom.py:23: if attribute_name.startswith("special_") and (
	groups\custom.py:30: elif attribute_name.startswith("substituted_") and (
	groups\custom.py:21: for attribute_name in cls.__dict__.keys():
	groups\custom.py:23: if attribute_name.startswith("special_") and (
	groups\custom.py:30: elif attribute_name.startswith("substituted_") and (
	groups\custom.py:21: for attribute_name in cls.__dict__.keys():
	groups\custom.py:23: if attribute_name.startswith("special_") and (
	groups\custom.py:30: elif attribute_name.startswith("substituted_") and (
	groups\custom.py:21: for attribute_name in cls.__dict__.keys():
	countries\china.py:73: kwargs.setdefault("observed_rule", SAT_SUN_TO_NEXT_WORKDAY)
	countries\china.py:74: kwargs.setdefault("observed_since", 2000)
	countries\china.py:75: super().__init__(*args, **kwargs)
(call) observed_holiday_base.py:98: __init__
	observed_holiday_base.py:99: self._observed_rule = observed_rule
(call) holiday_base.py:613: __setattr__
	holiday_base.py:614: dict.__setattr__(self, key, value)
	holiday_base.py:616: if self and key in {"categories", "observed"}:
(call) holiday_base.py:389: __bool__
	holiday_base.py:390: return len(self) > 0
	observed_holiday_base.py:100: self._observed_since = observed_since
(call) holiday_base.py:613: __setattr__
	holiday_base.py:614: dict.__setattr__(self, key, value)
	holiday_base.py:616: if self and key in {"categories", "observed"}:
(call) holiday_base.py:389: __bool__
	holiday_base.py:390: return len(self) > 0
	observed_holiday_base.py:102: super().__init__(*args, **kwargs)
(call) holiday_base.py:240: __init__
	holiday_base.py:286: super().__init__()
	holiday_base.py:289: if self.default_category and self.default_category not in self.supported_categories:
	holiday_base.py:292: if not self.default_category and not categories:
	holiday_base.py:295: categories = _normalize_arguments(str, categories) or {self.default_category}
(call) helpers.py:13: _normalize_arguments
	helpers.py:26: if isinstance(value, cls):
	helpers.py:29: return set(value) if value is not None else set()
	holiday_base.py:296: if unknown_categories := categories.difference(  # type: ignore[union-attr]
	holiday_base.py:297: self.supported_categories
	holiday_base.py:296: if unknown_categories := categories.difference(  # type: ignore[union-attr]
	holiday_base.py:302: if subdiv := subdiv or prov or state:
	holiday_base.py:334: if (has_substituted_holidays := getattr(self, "has_substituted_holidays", False)) and (
	holiday_base.py:335: not getattr(self, "substituted_label", None)
	holiday_base.py:334: if (has_substituted_holidays := getattr(self, "has_substituted_holidays", False)) and (
	holiday_base.py:336: or not getattr(self, "substituted_date_format", None)
	holiday_base.py:334: if (has_substituted_holidays := getattr(self, "has_substituted_holidays", False)) and (
	holiday_base.py:343: self.categories = categories
(call) holiday_base.py:613: __setattr__
	holiday_base.py:614: dict.__setattr__(self, key, value)
	holiday_base.py:616: if self and key in {"categories", "observed"}:
(call) holiday_base.py:389: __bool__
	holiday_base.py:390: return len(self) > 0
	holiday_base.py:344: self.expand = expand
(call) holiday_base.py:613: __setattr__
	holiday_base.py:614: dict.__setattr__(self, key, value)
	holiday_base.py:616: if self and key in {"categories", "observed"}:
(call) holiday_base.py:389: __bool__
	holiday_base.py:390: return len(self) > 0
	holiday_base.py:345: self.has_special_holidays = getattr(self, "has_special_holidays", False)
(call) holiday_base.py:613: __setattr__
	holiday_base.py:614: dict.__setattr__(self, key, value)
	holiday_base.py:616: if self and key in {"categories", "observed"}:
(call) holiday_base.py:389: __bool__
	holiday_base.py:390: return len(self) > 0
	holiday_base.py:346: self.has_substituted_holidays = has_substituted_holidays
(call) holiday_base.py:613: __setattr__
	holiday_base.py:614: dict.__setattr__(self, key, value)
	holiday_base.py:616: if self and key in {"categories", "observed"}:
(call) holiday_base.py:389: __bool__
	holiday_base.py:390: return len(self) > 0
	holiday_base.py:347: self.language = language.lower() if language else None
(call) holiday_base.py:613: __setattr__
	holiday_base.py:614: dict.__setattr__(self, key, value)
	holiday_base.py:616: if self and key in {"categories", "observed"}:
(call) holiday_base.py:389: __bool__
	holiday_base.py:390: return len(self) > 0
	holiday_base.py:348: self.observed = observed
(call) holiday_base.py:613: __setattr__
	holiday_base.py:614: dict.__setattr__(self, key, value)
	holiday_base.py:616: if self and key in {"categories", "observed"}:
(call) holiday_base.py:389: __bool__
	holiday_base.py:390: return len(self) > 0
	holiday_base.py:349: self.subdiv = subdiv
(call) holiday_base.py:613: __setattr__
	holiday_base.py:614: dict.__setattr__(self, key, value)
	holiday_base.py:616: if self and key in {"categories", "observed"}:
(call) holiday_base.py:389: __bool__
	holiday_base.py:390: return len(self) > 0
	holiday_base.py:351: supported_languages = set(self.supported_languages)
	holiday_base.py:359: if self._entity_code is not None
(call) holiday_base.py:654: _entity_code
	holiday_base.py:656: return getattr(self, "country", getattr(self, "market", None))
(call) holiday_base.py:418: __getattr__
	holiday_base.py:419: try:
	holiday_base.py:420: return self.__getattribute__(name)
	holiday_base.py:421: except AttributeError as e:
	holiday_base.py:423: add_holiday_prefix = "_add_holiday_"
	holiday_base.py:425: if name[: len(add_holiday_prefix)] != add_holiday_prefix:
	holiday_base.py:426: raise e
	holiday_base.py:353: translation(
	holiday_base.py:354: self._entity_code,
	holiday_base.py:355: fallback=language not in supported_languages,
	holiday_base.py:356: languages=[language] if language in supported_languages else None,
	holiday_base.py:357: localedir=str(Path(__file__).with_name("locale")),
	holiday_base.py:353: translation(
	holiday_base.py:358: ).gettext
	holiday_base.py:352: self.tr = (
(call) holiday_base.py:613: __setattr__
	holiday_base.py:614: dict.__setattr__(self, key, value)
	holiday_base.py:616: if self and key in {"categories", "observed"}:
(call) holiday_base.py:389: __bool__
	holiday_base.py:390: return len(self) > 0
	holiday_base.py:362: self.years = _normalize_arguments(int, years)
(call) helpers.py:13: _normalize_arguments
	helpers.py:26: if isinstance(value, cls):
	helpers.py:29: return set(value) if value is not None else set()
(call) holiday_base.py:613: __setattr__
	holiday_base.py:614: dict.__setattr__(self, key, value)
	holiday_base.py:616: if self and key in {"categories", "observed"}:
(call) holiday_base.py:389: __bool__
	holiday_base.py:390: return len(self) > 0
	holiday_base.py:365: for year in self.years:
(call) holiday_base.py:498: __getitem__
	holiday_base.py:499: if isinstance(key, slice):
	holiday_base.py:530: return dict.__getitem__(self, self.__keytransform__(key))
(call) holiday_base.py:532: __keytransform__
	holiday_base.py:546: if type(key) is date:
	holiday_base.py:550: elif isinstance(key, str):
	holiday_base.py:551: try:
	holiday_base.py:552: dt = parse(key).date()
	holiday_base.py:573: if self.expand and dt.year not in self.years:
	holiday_base.py:574: self.years.add(dt.year)
	holiday_base.py:575: self._populate(dt.year)
(call) holiday_base.py:756: _populate
	holiday_base.py:773: self._year = year
(call) holiday_base.py:613: __setattr__
	holiday_base.py:614: dict.__setattr__(self, key, value)
	holiday_base.py:616: if self and key in {"categories", "observed"}:
(call) holiday_base.py:389: __bool__
	holiday_base.py:390: return len(self) > 0
	holiday_base.py:774: self._populate_common_holidays()
(call) observed_holiday_base.py:180: _populate_common_holidays
	observed_holiday_base.py:182: super()._populate_common_holidays()
(call) holiday_base.py:777: _populate_common_holidays
	holiday_base.py:779: for category in self._sorted_categories:
(call) holiday_base.py:669: _sorted_categories
	holiday_base.py:671: return sorted(self.categories)
	holiday_base.py:780: if pch_method := getattr(self, f"_populate_{category.lower()}_holidays", None):
	holiday_base.py:781: pch_method()
(call) countries\china.py:77: _populate_public_holidays
	countries\china.py:79: if self._year <= 1949:
	countries\china.py:82: dts_observed = set()
	countries\china.py:90: dts_observed.add(self._add_new_years_day(tr("元旦")))
(call) groups\international.py:114: _add_new_years_day
	groups\international.py:122: return self._add_holiday_jan_1(name)
(call) holiday_base.py:418: __getattr__
	holiday_base.py:419: try:
	holiday_base.py:420: return self.__getattribute__(name)
	holiday_base.py:421: except AttributeError as e:
	holiday_base.py:423: add_holiday_prefix = "_add_holiday_"
	holiday_base.py:425: if name[: len(add_holiday_prefix)] != add_holiday_prefix:
	holiday_base.py:429: month_day = re.match(r"_add_holiday_(\w{3})_(\d{1,2})", name)
	holiday_base.py:430: if month_day:
	holiday_base.py:431: month, day = month_day.groups()
	holiday_base.py:432: return lambda name: self._add_holiday(
(call) holiday_base.py:432: <lambda>
	holiday_base.py:432: return lambda name: self._add_holiday(
	holiday_base.py:433: name,
	holiday_base.py:434: date(self._year, getattr(gregorian, month.upper()), int(day)),
	holiday_base.py:432: return lambda name: self._add_holiday(
(call) holiday_base.py:679: _add_holiday
	holiday_base.py:681: if not args:
	holiday_base.py:684: dt = args if len(args) > 1 else args[0]
	holiday_base.py:685: dt = dt if isinstance(dt, date) else date(self._year, *dt)
	holiday_base.py:687: if dt.year != self._year:
	holiday_base.py:690: self[dt] = self.tr(name)
(call) holiday_base.py:621: __setitem__
	holiday_base.py:622: if key in self:
(call) holiday_base.py:392: __contains__
	holiday_base.py:403: if not isinstance(key, (date, datetime, float, int, str)):
	holiday_base.py:406: return dict.__contains__(cast("Dict[Any, Any]", self), self.__keytransform__(key))
(call) holiday_base.py:532: __keytransform__
	holiday_base.py:546: if type(key) is date:
	holiday_base.py:547: dt = key
	holiday_base.py:573: if self.expand and dt.year not in self.years:
	holiday_base.py:577: return dt
	holiday_base.py:629: dict.__setitem__(self, self.__keytransform__(key), value)
(call) holiday_base.py:532: __keytransform__
	holiday_base.py:546: if type(key) is date:
	holiday_base.py:547: dt = key
	holiday_base.py:573: if self.expand and dt.year not in self.years:
	holiday_base.py:577: return dt
	holiday_base.py:691: return dt
	countries\china.py:103: chinese_new_year = tr("春节")
	countries\china.py:104: dts_observed.add(self._add_chinese_new_years_day(chinese_new_year))
(call) groups\chinese.py:97: _add_chinese_new_years_day
	groups\chinese.py:105: return self._add_chinese_calendar_holiday(
	groups\chinese.py:106: name, self._chinese_calendar.lunar_new_year_date(self._year)
(call) calendars\chinese.py:1257: lunar_new_year_date
	calendars\chinese.py:1258: return self._get_holiday(LUNAR_NEW_YEAR, year)
(call) calendars\chinese.py:1239: _get_holiday
	calendars\chinese.py:1240: estimated_dates = getattr(self, f"{holiday}_DATES", {})
	calendars\chinese.py:1241: exact_dates = getattr(self, f"{holiday}_DATES_{_CustomCalendar.CUSTOM_ATTR_POSTFIX}", {})
	calendars\chinese.py:1242: dt = exact_dates.get(year, estimated_dates.get(year, ()))
	calendars\chinese.py:1243: return date(year, *dt) if dt else None, year not in exact_dates
	groups\chinese.py:105: return self._add_chinese_calendar_holiday(
(call) groups\chinese.py:50: _add_chinese_calendar_holiday
	groups\chinese.py:59: estimated_label = getattr(self, "estimated_label", "%s (estimated)")
(call) holiday_base.py:418: __getattr__
	holiday_base.py:419: try:
	holiday_base.py:420: return self.__getattribute__(name)
	holiday_base.py:421: except AttributeError as e:
	holiday_base.py:423: add_holiday_prefix = "_add_holiday_"
	holiday_base.py:425: if name[: len(add_holiday_prefix)] != add_holiday_prefix:
	holiday_base.py:426: raise e
	groups\chinese.py:60: dt, is_estimated = dt_estimated
	groups\chinese.py:62: if days_delta != 0:
	groups\chinese.py:65: return self._add_holiday(
	groups\chinese.py:67: if is_estimated and self._chinese_calendar_show_estimated
	groups\chinese.py:66: self.tr(estimated_label) % self.tr(name)
	groups\chinese.py:67: if is_estimated and self._chinese_calendar_show_estimated
	groups\chinese.py:66: self.tr(estimated_label) % self.tr(name)
	groups\chinese.py:68: else name,
	groups\chinese.py:69: dt,
	groups\chinese.py:65: return self._add_holiday(
(call) holiday_base.py:679: _add_holiday
	holiday_base.py:681: if not args:
	holiday_base.py:684: dt = args if len(args) > 1 else args[0]
	holiday_base.py:685: dt = dt if isinstance(dt, date) else date(self._year, *dt)
	holiday_base.py:687: if dt.year != self._year:
	holiday_base.py:690: self[dt] = self.tr(name)
(call) holiday_base.py:621: __setitem__
	holiday_base.py:622: if key in self:
(call) holiday_base.py:392: __contains__
	holiday_base.py:403: if not isinstance(key, (date, datetime, float, int, str)):
	holiday_base.py:406: return dict.__contains__(cast("Dict[Any, Any]", self), self.__keytransform__(key))
(call) holiday_base.py:532: __keytransform__
	holiday_base.py:546: if type(key) is date:
	holiday_base.py:547: dt = key
	holiday_base.py:573: if self.expand and dt.year not in self.years:
	holiday_base.py:577: return dt
	holiday_base.py:629: dict.__setitem__(self, self.__keytransform__(key), value)
(call) holiday_base.py:532: __keytransform__
	holiday_base.py:546: if type(key) is date:
	holiday_base.py:547: dt = key
	holiday_base.py:573: if self.expand and dt.year not in self.years:
	holiday_base.py:577: return dt
	holiday_base.py:691: return dt
	countries\china.py:105: dts_observed.add(self._add_chinese_new_years_day_two(chinese_new_year))
(call) groups\chinese.py:109: _add_chinese_new_years_day_two
	groups\chinese.py:115: return self._add_chinese_calendar_holiday(
	groups\chinese.py:116: name, self._chinese_calendar.lunar_new_year_date(self._year), days_delta=+1
(call) calendars\chinese.py:1257: lunar_new_year_date
	calendars\chinese.py:1258: return self._get_holiday(LUNAR_NEW_YEAR, year)
(call) calendars\chinese.py:1239: _get_holiday
	calendars\chinese.py:1240: estimated_dates = getattr(self, f"{holiday}_DATES", {})
	calendars\chinese.py:1241: exact_dates = getattr(self, f"{holiday}_DATES_{_CustomCalendar.CUSTOM_ATTR_POSTFIX}", {})
	calendars\chinese.py:1242: dt = exact_dates.get(year, estimated_dates.get(year, ()))
	calendars\chinese.py:1243: return date(year, *dt) if dt else None, year not in exact_dates
	groups\chinese.py:115: return self._add_chinese_calendar_holiday(
(call) groups\chinese.py:50: _add_chinese_calendar_holiday
	groups\chinese.py:59: estimated_label = getattr(self, "estimated_label", "%s (estimated)")
(call) holiday_base.py:418: __getattr__
	holiday_base.py:419: try:
	holiday_base.py:420: return self.__getattribute__(name)
	holiday_base.py:421: except AttributeError as e:
	holiday_base.py:423: add_holiday_prefix = "_add_holiday_"
	holiday_base.py:425: if name[: len(add_holiday_prefix)] != add_holiday_prefix:
	holiday_base.py:426: raise e
	groups\chinese.py:60: dt, is_estimated = dt_estimated
	groups\chinese.py:62: if days_delta != 0:
	groups\chinese.py:63: dt += td(days=days_delta)
	groups\chinese.py:65: return self._add_holiday(
	groups\chinese.py:67: if is_estimated and self._chinese_calendar_show_estimated
	groups\chinese.py:66: self.tr(estimated_label) % self.tr(name)
	groups\chinese.py:67: if is_estimated and self._chinese_calendar_show_estimated
	groups\chinese.py:66: self.tr(estimated_label) % self.tr(name)
	groups\chinese.py:68: else name,
	groups\chinese.py:69: dt,
	groups\chinese.py:65: return self._add_holiday(
(call) holiday_base.py:679: _add_holiday
	holiday_base.py:681: if not args:
	holiday_base.py:684: dt = args if len(args) > 1 else args[0]
	holiday_base.py:685: dt = dt if isinstance(dt, date) else date(self._year, *dt)
	holiday_base.py:687: if dt.year != self._year:
	holiday_base.py:690: self[dt] = self.tr(name)
(call) holiday_base.py:621: __setitem__
	holiday_base.py:622: if key in self:
(call) holiday_base.py:392: __contains__
	holiday_base.py:403: if not isinstance(key, (date, datetime, float, int, str)):
	holiday_base.py:406: return dict.__contains__(cast("Dict[Any, Any]", self), self.__keytransform__(key))
(call) holiday_base.py:532: __keytransform__
	holiday_base.py:546: if type(key) is date:
	holiday_base.py:547: dt = key
	holiday_base.py:573: if self.expand and dt.year not in self.years:
	holiday_base.py:577: return dt
	holiday_base.py:629: dict.__setitem__(self, self.__keytransform__(key), value)
(call) holiday_base.py:532: __keytransform__
	holiday_base.py:546: if type(key) is date:
	holiday_base.py:547: dt = key
	holiday_base.py:573: if self.expand and dt.year not in self.years:
	holiday_base.py:577: return dt
	holiday_base.py:691: return dt
	countries\china.py:106: if 2008 <= self._year <= 2013:
	countries\china.py:110: dts_observed.add(self._add_chinese_new_years_day_three(chinese_new_year))
(call) groups\chinese.py:119: _add_chinese_new_years_day_three
	groups\chinese.py:125: return self._add_chinese_calendar_holiday(
	groups\chinese.py:126: name, self._chinese_calendar.lunar_new_year_date(self._year), days_delta=+2
(call) calendars\chinese.py:1257: lunar_new_year_date
	calendars\chinese.py:1258: return self._get_holiday(LUNAR_NEW_YEAR, year)
(call) calendars\chinese.py:1239: _get_holiday
	calendars\chinese.py:1240: estimated_dates = getattr(self, f"{holiday}_DATES", {})
	calendars\chinese.py:1241: exact_dates = getattr(self, f"{holiday}_DATES_{_CustomCalendar.CUSTOM_ATTR_POSTFIX}", {})
	calendars\chinese.py:1242: dt = exact_dates.get(year, estimated_dates.get(year, ()))
	calendars\chinese.py:1243: return date(year, *dt) if dt else None, year not in exact_dates
	groups\chinese.py:125: return self._add_chinese_calendar_holiday(
(call) groups\chinese.py:50: _add_chinese_calendar_holiday
	groups\chinese.py:59: estimated_label = getattr(self, "estimated_label", "%s (estimated)")
(call) holiday_base.py:418: __getattr__
	holiday_base.py:419: try:
	holiday_base.py:420: return self.__getattribute__(name)
	holiday_base.py:421: except AttributeError as e:
	holiday_base.py:423: add_holiday_prefix = "_add_holiday_"
	holiday_base.py:425: if name[: len(add_holiday_prefix)] != add_holiday_prefix:
	holiday_base.py:426: raise e
	groups\chinese.py:60: dt, is_estimated = dt_estimated
	groups\chinese.py:62: if days_delta != 0:
	groups\chinese.py:63: dt += td(days=days_delta)
	groups\chinese.py:65: return self._add_holiday(
	groups\chinese.py:67: if is_estimated and self._chinese_calendar_show_estimated
	groups\chinese.py:66: self.tr(estimated_label) % self.tr(name)
	groups\chinese.py:67: if is_estimated and self._chinese_calendar_show_estimated
	groups\chinese.py:66: self.tr(estimated_label) % self.tr(name)
	groups\chinese.py:68: else name,
	groups\chinese.py:69: dt,
	groups\chinese.py:65: return self._add_holiday(
(call) holiday_base.py:679: _add_holiday
	holiday_base.py:681: if not args:
	holiday_base.py:684: dt = args if len(args) > 1 else args[0]
	holiday_base.py:685: dt = dt if isinstance(dt, date) else date(self._year, *dt)
	holiday_base.py:687: if dt.year != self._year:
	holiday_base.py:690: self[dt] = self.tr(name)
(call) holiday_base.py:621: __setitem__
	holiday_base.py:622: if key in self:
(call) holiday_base.py:392: __contains__
	holiday_base.py:403: if not isinstance(key, (date, datetime, float, int, str)):
	holiday_base.py:406: return dict.__contains__(cast("Dict[Any, Any]", self), self.__keytransform__(key))
(call) holiday_base.py:532: __keytransform__
	holiday_base.py:546: if type(key) is date:
	holiday_base.py:547: dt = key
	holiday_base.py:573: if self.expand and dt.year not in self.years:
	holiday_base.py:577: return dt
	holiday_base.py:629: dict.__setitem__(self, self.__keytransform__(key), value)
(call) holiday_base.py:532: __keytransform__
	holiday_base.py:546: if type(key) is date:
	holiday_base.py:547: dt = key
	holiday_base.py:573: if self.expand and dt.year not in self.years:
	holiday_base.py:577: return dt
	holiday_base.py:691: return dt
	countries\china.py:122: labor_day = tr("劳动节")
	countries\china.py:123: dts_observed.add(self._add_labor_day(labor_day))
(call) groups\international.py:87: _add_labor_day
	groups\international.py:96: return self._add_holiday_may_1(name)
(call) holiday_base.py:418: __getattr__
	holiday_base.py:419: try:
	holiday_base.py:420: return self.__getattribute__(name)
	holiday_base.py:421: except AttributeError as e:
	holiday_base.py:423: add_holiday_prefix = "_add_holiday_"
	holiday_base.py:425: if name[: len(add_holiday_prefix)] != add_holiday_prefix:
	holiday_base.py:429: month_day = re.match(r"_add_holiday_(\w{3})_(\d{1,2})", name)
	holiday_base.py:430: if month_day:
	holiday_base.py:431: month, day = month_day.groups()
	holiday_base.py:432: return lambda name: self._add_holiday(
(call) holiday_base.py:432: <lambda>
	holiday_base.py:432: return lambda name: self._add_holiday(
	holiday_base.py:433: name,
	holiday_base.py:434: date(self._year, getattr(gregorian, month.upper()), int(day)),
	holiday_base.py:432: return lambda name: self._add_holiday(
(call) holiday_base.py:679: _add_holiday
	holiday_base.py:681: if not args:
	holiday_base.py:684: dt = args if len(args) > 1 else args[0]
	holiday_base.py:685: dt = dt if isinstance(dt, date) else date(self._year, *dt)
	holiday_base.py:687: if dt.year != self._year:
	holiday_base.py:690: self[dt] = self.tr(name)
(call) holiday_base.py:621: __setitem__
	holiday_base.py:622: if key in self:
(call) holiday_base.py:392: __contains__
	holiday_base.py:403: if not isinstance(key, (date, datetime, float, int, str)):
	holiday_base.py:406: return dict.__contains__(cast("Dict[Any, Any]", self), self.__keytransform__(key))
(call) holiday_base.py:532: __keytransform__
	holiday_base.py:546: if type(key) is date:
	holiday_base.py:547: dt = key
	holiday_base.py:573: if self.expand and dt.year not in self.years:
	holiday_base.py:577: return dt
	holiday_base.py:629: dict.__setitem__(self, self.__keytransform__(key), value)
(call) holiday_base.py:532: __keytransform__
	holiday_base.py:546: if type(key) is date:
	holiday_base.py:547: dt = key
	holiday_base.py:573: if self.expand and dt.year not in self.years:
	holiday_base.py:577: return dt
	holiday_base.py:691: return dt
	countries\china.py:124: if 2000 <= self._year <= 2007:
	countries\china.py:137: national_day = tr("国庆节")
	countries\china.py:138: dts_observed.add(self._add_holiday_oct_1(national_day))
(call) holiday_base.py:418: __getattr__
	holiday_base.py:419: try:
	holiday_base.py:420: return self.__getattribute__(name)
	holiday_base.py:421: except AttributeError as e:
	holiday_base.py:423: add_holiday_prefix = "_add_holiday_"
	holiday_base.py:425: if name[: len(add_holiday_prefix)] != add_holiday_prefix:
	holiday_base.py:429: month_day = re.match(r"_add_holiday_(\w{3})_(\d{1,2})", name)
	holiday_base.py:430: if month_day:
	holiday_base.py:431: month, day = month_day.groups()
	holiday_base.py:432: return lambda name: self._add_holiday(
(call) holiday_base.py:432: <lambda>
	holiday_base.py:432: return lambda name: self._add_holiday(
	holiday_base.py:433: name,
	holiday_base.py:434: date(self._year, getattr(gregorian, month.upper()), int(day)),
	holiday_base.py:432: return lambda name: self._add_holiday(
(call) holiday_base.py:679: _add_holiday
	holiday_base.py:681: if not args:
	holiday_base.py:684: dt = args if len(args) > 1 else args[0]
	holiday_base.py:685: dt = dt if isinstance(dt, date) else date(self._year, *dt)
	holiday_base.py:687: if dt.year != self._year:
	holiday_base.py:690: self[dt] = self.tr(name)
(call) holiday_base.py:621: __setitem__
	holiday_base.py:622: if key in self:
(call) holiday_base.py:392: __contains__
	holiday_base.py:403: if not isinstance(key, (date, datetime, float, int, str)):
	holiday_base.py:406: return dict.__contains__(cast("Dict[Any, Any]", self), self.__keytransform__(key))
(call) holiday_base.py:532: __keytransform__
	holiday_base.py:546: if type(key) is date:
	holiday_base.py:547: dt = key
	holiday_base.py:573: if self.expand and dt.year not in self.years:
	holiday_base.py:577: return dt
	holiday_base.py:629: dict.__setitem__(self, self.__keytransform__(key), value)
(call) holiday_base.py:532: __keytransform__
	holiday_base.py:546: if type(key) is date:
	holiday_base.py:547: dt = key
	holiday_base.py:573: if self.expand and dt.year not in self.years:
	holiday_base.py:577: return dt
	holiday_base.py:691: return dt
	countries\china.py:139: dts_observed.add(self._add_holiday_oct_2(national_day))
(call) holiday_base.py:418: __getattr__
	holiday_base.py:419: try:
	holiday_base.py:420: return self.__getattribute__(name)
	holiday_base.py:421: except AttributeError as e:
	holiday_base.py:423: add_holiday_prefix = "_add_holiday_"
	holiday_base.py:425: if name[: len(add_holiday_prefix)] != add_holiday_prefix:
	holiday_base.py:429: month_day = re.match(r"_add_holiday_(\w{3})_(\d{1,2})", name)
	holiday_base.py:430: if month_day:
	holiday_base.py:431: month, day = month_day.groups()
	holiday_base.py:432: return lambda name: self._add_holiday(
(call) holiday_base.py:432: <lambda>
	holiday_base.py:432: return lambda name: self._add_holiday(
	holiday_base.py:433: name,
	holiday_base.py:434: date(self._year, getattr(gregorian, month.upper()), int(day)),
	holiday_base.py:432: return lambda name: self._add_holiday(
(call) holiday_base.py:679: _add_holiday
	holiday_base.py:681: if not args:
	holiday_base.py:684: dt = args if len(args) > 1 else args[0]
	holiday_base.py:685: dt = dt if isinstance(dt, date) else date(self._year, *dt)
	holiday_base.py:687: if dt.year != self._year:
	holiday_base.py:690: self[dt] = self.tr(name)
(call) holiday_base.py:621: __setitem__
	holiday_base.py:622: if key in self:
(call) holiday_base.py:392: __contains__
	holiday_base.py:403: if not isinstance(key, (date, datetime, float, int, str)):
	holiday_base.py:406: return dict.__contains__(cast("Dict[Any, Any]", self), self.__keytransform__(key))
(call) holiday_base.py:532: __keytransform__
	holiday_base.py:546: if type(key) is date:
	holiday_base.py:547: dt = key
	holiday_base.py:573: if self.expand and dt.year not in self.years:
	holiday_base.py:577: return dt
	holiday_base.py:629: dict.__setitem__(self, self.__keytransform__(key), value)
(call) holiday_base.py:532: __keytransform__
	holiday_base.py:546: if type(key) is date:
	holiday_base.py:547: dt = key
	holiday_base.py:573: if self.expand and dt.year not in self.years:
	holiday_base.py:577: return dt
	holiday_base.py:691: return dt
	countries\china.py:140: if self._year >= 1999:
	countries\china.py:141: dts_observed.add(self._add_holiday_oct_3(national_day))
(call) holiday_base.py:418: __getattr__
	holiday_base.py:419: try:
	holiday_base.py:420: return self.__getattribute__(name)
	holiday_base.py:421: except AttributeError as e:
	holiday_base.py:423: add_holiday_prefix = "_add_holiday_"
	holiday_base.py:425: if name[: len(add_holiday_prefix)] != add_holiday_prefix:
	holiday_base.py:429: month_day = re.match(r"_add_holiday_(\w{3})_(\d{1,2})", name)
	holiday_base.py:430: if month_day:
	holiday_base.py:431: month, day = month_day.groups()
	holiday_base.py:432: return lambda name: self._add_holiday(
(call) holiday_base.py:432: <lambda>
	holiday_base.py:432: return lambda name: self._add_holiday(
	holiday_base.py:433: name,
	holiday_base.py:434: date(self._year, getattr(gregorian, month.upper()), int(day)),
	holiday_base.py:432: return lambda name: self._add_holiday(
(call) holiday_base.py:679: _add_holiday
	holiday_base.py:681: if not args:
	holiday_base.py:684: dt = args if len(args) > 1 else args[0]
	holiday_base.py:685: dt = dt if isinstance(dt, date) else date(self._year, *dt)
	holiday_base.py:687: if dt.year != self._year:
	holiday_base.py:690: self[dt] = self.tr(name)
(call) holiday_base.py:621: __setitem__
	holiday_base.py:622: if key in self:
(call) holiday_base.py:392: __contains__
	holiday_base.py:403: if not isinstance(key, (date, datetime, float, int, str)):
	holiday_base.py:406: return dict.__contains__(cast("Dict[Any, Any]", self), self.__keytransform__(key))
(call) holiday_base.py:532: __keytransform__
	holiday_base.py:546: if type(key) is date:
	holiday_base.py:547: dt = key
	holiday_base.py:573: if self.expand and dt.year not in self.years:
	holiday_base.py:577: return dt
	holiday_base.py:629: dict.__setitem__(self, self.__keytransform__(key), value)
(call) holiday_base.py:532: __keytransform__
	holiday_base.py:546: if type(key) is date:
	holiday_base.py:547: dt = key
	holiday_base.py:573: if self.expand and dt.year not in self.years:
	holiday_base.py:577: return dt
	holiday_base.py:691: return dt
	countries\china.py:143: if self._year >= 2008:
	countries\china.py:150: dts_observed.add(self._add_qingming_festival(tr("清明节")))
(call) groups\chinese.py:149: _add_qingming_festival
	groups\chinese.py:157: return self._add_holiday(name, self._qingming_date)
(call) groups\chinese.py:36: _qingming_date
	groups\chinese.py:38: day = 5
	groups\chinese.py:39: if (self._year % 4 < 1) or (self._year % 4 < 2 and self._year >= 2009):
	groups\chinese.py:41: return date(self._year, APR, day)
(call) holiday_base.py:679: _add_holiday
	holiday_base.py:681: if not args:
	holiday_base.py:684: dt = args if len(args) > 1 else args[0]
	holiday_base.py:685: dt = dt if isinstance(dt, date) else date(self._year, *dt)
	holiday_base.py:687: if dt.year != self._year:
	holiday_base.py:690: self[dt] = self.tr(name)
(call) holiday_base.py:621: __setitem__
	holiday_base.py:622: if key in self:
(call) holiday_base.py:392: __contains__
	holiday_base.py:403: if not isinstance(key, (date, datetime, float, int, str)):
	holiday_base.py:406: return dict.__contains__(cast("Dict[Any, Any]", self), self.__keytransform__(key))
(call) holiday_base.py:532: __keytransform__
	holiday_base.py:546: if type(key) is date:
	holiday_base.py:547: dt = key
	holiday_base.py:573: if self.expand and dt.year not in self.years:
	holiday_base.py:577: return dt
	holiday_base.py:629: dict.__setitem__(self, self.__keytransform__(key), value)
(call) holiday_base.py:532: __keytransform__
	holiday_base.py:546: if type(key) is date:
	holiday_base.py:547: dt = key
	holiday_base.py:573: if self.expand and dt.year not in self.years:
	holiday_base.py:577: return dt
	holiday_base.py:691: return dt
	countries\china.py:158: dragon_boat_festival = self._add_dragon_boat_festival(tr("端午节"))
(call) groups\chinese.py:171: _add_dragon_boat_festival
	groups\chinese.py:179: return self._add_chinese_calendar_holiday(
	groups\chinese.py:180: name, self._chinese_calendar.dragon_boat_date(self._year)
(call) calendars\chinese.py:1251: dragon_boat_date
	calendars\chinese.py:1252: return self._get_holiday(DRAGON_BOAT, year)
(call) calendars\chinese.py:1239: _get_holiday
	calendars\chinese.py:1240: estimated_dates = getattr(self, f"{holiday}_DATES", {})
	calendars\chinese.py:1241: exact_dates = getattr(self, f"{holiday}_DATES_{_CustomCalendar.CUSTOM_ATTR_POSTFIX}", {})
	calendars\chinese.py:1242: dt = exact_dates.get(year, estimated_dates.get(year, ()))
	calendars\chinese.py:1243: return date(year, *dt) if dt else None, year not in exact_dates
	groups\chinese.py:179: return self._add_chinese_calendar_holiday(
(call) groups\chinese.py:50: _add_chinese_calendar_holiday
	groups\chinese.py:59: estimated_label = getattr(self, "estimated_label", "%s (estimated)")
(call) holiday_base.py:418: __getattr__
	holiday_base.py:419: try:
	holiday_base.py:420: return self.__getattribute__(name)
	holiday_base.py:421: except AttributeError as e:
	holiday_base.py:423: add_holiday_prefix = "_add_holiday_"
	holiday_base.py:425: if name[: len(add_holiday_prefix)] != add_holiday_prefix:
	holiday_base.py:426: raise e
	groups\chinese.py:60: dt, is_estimated = dt_estimated
	groups\chinese.py:62: if days_delta != 0:
	groups\chinese.py:65: return self._add_holiday(
	groups\chinese.py:67: if is_estimated and self._chinese_calendar_show_estimated
	groups\chinese.py:66: self.tr(estimated_label) % self.tr(name)
	groups\chinese.py:67: if is_estimated and self._chinese_calendar_show_estimated
	groups\chinese.py:66: self.tr(estimated_label) % self.tr(name)
	groups\chinese.py:68: else name,
	groups\chinese.py:69: dt,
	groups\chinese.py:65: return self._add_holiday(
(call) holiday_base.py:679: _add_holiday
	holiday_base.py:681: if not args:
	holiday_base.py:684: dt = args if len(args) > 1 else args[0]
	holiday_base.py:685: dt = dt if isinstance(dt, date) else date(self._year, *dt)
	holiday_base.py:687: if dt.year != self._year:
	holiday_base.py:690: self[dt] = self.tr(name)
(call) holiday_base.py:621: __setitem__
	holiday_base.py:622: if key in self:
(call) holiday_base.py:392: __contains__
	holiday_base.py:403: if not isinstance(key, (date, datetime, float, int, str)):
	holiday_base.py:406: return dict.__contains__(cast("Dict[Any, Any]", self), self.__keytransform__(key))
(call) holiday_base.py:532: __keytransform__
	holiday_base.py:546: if type(key) is date:
	holiday_base.py:547: dt = key
	holiday_base.py:573: if self.expand and dt.year not in self.years:
	holiday_base.py:577: return dt
	holiday_base.py:629: dict.__setitem__(self, self.__keytransform__(key), value)
(call) holiday_base.py:532: __keytransform__
	holiday_base.py:546: if type(key) is date:
	holiday_base.py:547: dt = key
	holiday_base.py:573: if self.expand and dt.year not in self.years:
	holiday_base.py:577: return dt
	holiday_base.py:691: return dt
	countries\china.py:159: if self._year != 2012:
	countries\china.py:160: dts_observed.add(dragon_boat_festival)
	countries\china.py:169: mid_autumn_festival = self._add_mid_autumn_festival(tr("中秋节"))
(call) groups\chinese.py:195: _add_mid_autumn_festival
	groups\chinese.py:203: return self._add_chinese_calendar_holiday(
	groups\chinese.py:204: name, self._chinese_calendar.mid_autumn_date(self._year)
(call) calendars\chinese.py:1260: mid_autumn_date
	calendars\chinese.py:1261: return self._get_holiday(MID_AUTUMN, year)
(call) calendars\chinese.py:1239: _get_holiday
	calendars\chinese.py:1240: estimated_dates = getattr(self, f"{holiday}_DATES", {})
	calendars\chinese.py:1241: exact_dates = getattr(self, f"{holiday}_DATES_{_CustomCalendar.CUSTOM_ATTR_POSTFIX}", {})
	calendars\chinese.py:1242: dt = exact_dates.get(year, estimated_dates.get(year, ()))
	calendars\chinese.py:1243: return date(year, *dt) if dt else None, year not in exact_dates
	groups\chinese.py:203: return self._add_chinese_calendar_holiday(
(call) groups\chinese.py:50: _add_chinese_calendar_holiday
	groups\chinese.py:59: estimated_label = getattr(self, "estimated_label", "%s (estimated)")
(call) holiday_base.py:418: __getattr__
	holiday_base.py:419: try:
	holiday_base.py:420: return self.__getattribute__(name)
	holiday_base.py:421: except AttributeError as e:
	holiday_base.py:423: add_holiday_prefix = "_add_holiday_"
	holiday_base.py:425: if name[: len(add_holiday_prefix)] != add_holiday_prefix:
	holiday_base.py:426: raise e
	groups\chinese.py:60: dt, is_estimated = dt_estimated
	groups\chinese.py:62: if days_delta != 0:
	groups\chinese.py:65: return self._add_holiday(
	groups\chinese.py:67: if is_estimated and self._chinese_calendar_show_estimated
	groups\chinese.py:66: self.tr(estimated_label) % self.tr(name)
	groups\chinese.py:67: if is_estimated and self._chinese_calendar_show_estimated
	groups\chinese.py:66: self.tr(estimated_label) % self.tr(name)
	groups\chinese.py:68: else name,
	groups\chinese.py:69: dt,
	groups\chinese.py:65: return self._add_holiday(
(call) holiday_base.py:679: _add_holiday
	holiday_base.py:681: if not args:
	holiday_base.py:684: dt = args if len(args) > 1 else args[0]
	holiday_base.py:685: dt = dt if isinstance(dt, date) else date(self._year, *dt)
	holiday_base.py:687: if dt.year != self._year:
	holiday_base.py:690: self[dt] = self.tr(name)
(call) holiday_base.py:621: __setitem__
	holiday_base.py:622: if key in self:
(call) holiday_base.py:392: __contains__
	holiday_base.py:403: if not isinstance(key, (date, datetime, float, int, str)):
	holiday_base.py:406: return dict.__contains__(cast("Dict[Any, Any]", self), self.__keytransform__(key))
(call) holiday_base.py:532: __keytransform__
	holiday_base.py:546: if type(key) is date:
	holiday_base.py:547: dt = key
	holiday_base.py:573: if self.expand and dt.year not in self.years:
	holiday_base.py:577: return dt
	holiday_base.py:629: dict.__setitem__(self, self.__keytransform__(key), value)
(call) holiday_base.py:532: __keytransform__
	holiday_base.py:546: if type(key) is date:
	holiday_base.py:547: dt = key
	holiday_base.py:573: if self.expand and dt.year not in self.years:
	holiday_base.py:577: return dt
	holiday_base.py:691: return dt
	countries\china.py:170: if self._year != 2015:
	countries\china.py:171: dts_observed.add(mid_autumn_festival)
	countries\china.py:173: if self.observed:
	countries\china.py:174: self._populate_observed(dts_observed, multiple=True)
(call) observed_holiday_base.py:167: _populate_observed
	observed_holiday_base.py:171: for dt in sorted(dts):
	observed_holiday_base.py:172: if not self._is_observed(dt):
(call) observed_holiday_base.py:104: _is_observed
	observed_holiday_base.py:105: return self._observed_since is None or self._year >= self._observed_since
	observed_holiday_base.py:174: if multiple:
	observed_holiday_base.py:175: for name in self.get_list(dt):
(call) holiday_base.py:836: get_list
	holiday_base.py:850: return [name for name in self.get(key, "").split(HOLIDAY_NAME_DELIMITER) if name]
(call) holiday_base.py:815: get
	holiday_base.py:834: return dict.get(self, self.__keytransform__(key), default)
(call) holiday_base.py:532: __keytransform__
	holiday_base.py:546: if type(key) is date:
	holiday_base.py:547: dt = key
	holiday_base.py:573: if self.expand and dt.year not in self.years:
	holiday_base.py:577: return dt
(call) holiday_base.py:850: <listcomp>
	holiday_base.py:850: return [name for name in self.get(key, "").split(HOLIDAY_NAME_DELIMITER) if name]
	holiday_base.py:850: return [name for name in self.get(key, "").split(HOLIDAY_NAME_DELIMITER) if name]
	observed_holiday_base.py:176: self._add_observed(dt, name)
(call) observed_holiday_base.py:125: _add_observed
	observed_holiday_base.py:128: dt = dt if isinstance(dt, date) else date(self._year, *dt)
	observed_holiday_base.py:130: if not self.observed or not self._is_observed(dt):
(call) observed_holiday_base.py:104: _is_observed
	observed_holiday_base.py:105: return self._observed_since is None or self._year >= self._observed_since
	observed_holiday_base.py:133: dt_observed = self._get_observed_date(dt, rule or self._observed_rule)
(call) observed_holiday_base.py:116: _get_observed_date
	observed_holiday_base.py:117: delta = rule.get(dt.weekday(), 0)
	observed_holiday_base.py:118: if delta != 0:
	observed_holiday_base.py:119: if abs(delta) == 7:
	observed_holiday_base.py:120: dt = self._get_next_workday(dt, delta // 7)
(call) observed_holiday_base.py:107: _get_next_workday
	observed_holiday_base.py:108: dt_work = dt + td(days=delta)
	observed_holiday_base.py:109: while dt_work.year == self._year:
	observed_holiday_base.py:110: if dt_work in self or self._is_weekend(dt_work):  # type: ignore[operator]
(call) holiday_base.py:392: __contains__
	holiday_base.py:403: if not isinstance(key, (date, datetime, float, int, str)):
	holiday_base.py:406: return dict.__contains__(cast("Dict[Any, Any]", self), self.__keytransform__(key))
(call) holiday_base.py:532: __keytransform__
	holiday_base.py:546: if type(key) is date:
	holiday_base.py:547: dt = key
	holiday_base.py:573: if self.expand and dt.year not in self.years:
	holiday_base.py:577: return dt
(call) holiday_base.py:747: _is_weekend
	holiday_base.py:752: dt = args if len(args) > 1 else args[0]
	holiday_base.py:753: dt = dt if isinstance(dt, date) else date(self._year, *dt)
	holiday_base.py:754: return dt.weekday() in self.weekend
	observed_holiday_base.py:113: return dt_work
	observed_holiday_base.py:123: return dt
	observed_holiday_base.py:134: if dt_observed == dt:
	observed_holiday_base.py:137: estimated_label = self.tr(getattr(self, "estimated_label", ""))
(call) holiday_base.py:418: __getattr__
	holiday_base.py:419: try:
	holiday_base.py:420: return self.__getattribute__(name)
	holiday_base.py:421: except AttributeError as e:
	holiday_base.py:423: add_holiday_prefix = "_add_holiday_"
	holiday_base.py:425: if name[: len(add_holiday_prefix)] != add_holiday_prefix:
	holiday_base.py:426: raise e
	observed_holiday_base.py:138: observed_label = self.tr(
	observed_holiday_base.py:139: getattr(
	observed_holiday_base.py:140: self,
	observed_holiday_base.py:141: "observed_label_before" if dt_observed < dt else "observed_label",
	observed_holiday_base.py:142: self.observed_label,
	observed_holiday_base.py:139: getattr(
	observed_holiday_base.py:138: observed_label = self.tr(
	observed_holiday_base.py:146: estimated_label_text = estimated_label.strip("%s ()")
	observed_holiday_base.py:148: for name in (name,) if name else self.get_list(dt):
	observed_holiday_base.py:149: holiday_name = self.tr(name)
	observed_holiday_base.py:150: observed_estimated_label = None
	observed_holiday_base.py:151: if len(estimated_label_text) > 0 and estimated_label_text in holiday_name:
	observed_holiday_base.py:155: super()._add_holiday(
	observed_holiday_base.py:156: (observed_estimated_label or observed_label) % holiday_name, dt_observed
	observed_holiday_base.py:155: super()._add_holiday(
(call) holiday_base.py:679: _add_holiday
	holiday_base.py:681: if not args:
	holiday_base.py:684: dt = args if len(args) > 1 else args[0]
	holiday_base.py:685: dt = dt if isinstance(dt, date) else date(self._year, *dt)
	holiday_base.py:687: if dt.year != self._year:
	holiday_base.py:690: self[dt] = self.tr(name)
(call) holiday_base.py:621: __setitem__
	holiday_base.py:622: if key in self:
(call) holiday_base.py:392: __contains__
	holiday_base.py:403: if not isinstance(key, (date, datetime, float, int, str)):
	holiday_base.py:406: return dict.__contains__(cast("Dict[Any, Any]", self), self.__keytransform__(key))
(call) holiday_base.py:532: __keytransform__
	holiday_base.py:546: if type(key) is date:
	holiday_base.py:547: dt = key
	holiday_base.py:573: if self.expand and dt.year not in self.years:
	holiday_base.py:577: return dt
	holiday_base.py:629: dict.__setitem__(self, self.__keytransform__(key), value)
(call) holiday_base.py:532: __keytransform__
	holiday_base.py:546: if type(key) is date:
	holiday_base.py:547: dt = key
	holiday_base.py:573: if self.expand and dt.year not in self.years:
	holiday_base.py:577: return dt
	holiday_base.py:691: return dt
	observed_holiday_base.py:148: for name in (name,) if name else self.get_list(dt):
	observed_holiday_base.py:159: return True, dt_observed
	observed_holiday_base.py:175: for name in self.get_list(dt):
	observed_holiday_base.py:171: for dt in sorted(dts):
	observed_holiday_base.py:172: if not self._is_observed(dt):
(call) observed_holiday_base.py:104: _is_observed
	observed_holiday_base.py:105: return self._observed_since is None or self._year >= self._observed_since
	observed_holiday_base.py:174: if multiple:
	observed_holiday_base.py:175: for name in self.get_list(dt):
(call) holiday_base.py:836: get_list
	holiday_base.py:850: return [name for name in self.get(key, "").split(HOLIDAY_NAME_DELIMITER) if name]
(call) holiday_base.py:815: get
	holiday_base.py:834: return dict.get(self, self.__keytransform__(key), default)
(call) holiday_base.py:532: __keytransform__
	holiday_base.py:546: if type(key) is date:
	holiday_base.py:547: dt = key
	holiday_base.py:573: if self.expand and dt.year not in self.years:
	holiday_base.py:577: return dt
(call) holiday_base.py:850: <listcomp>
	holiday_base.py:850: return [name for name in self.get(key, "").split(HOLIDAY_NAME_DELIMITER) if name]
	holiday_base.py:850: return [name for name in self.get(key, "").split(HOLIDAY_NAME_DELIMITER) if name]
	observed_holiday_base.py:176: self._add_observed(dt, name)
(call) observed_holiday_base.py:125: _add_observed
	observed_holiday_base.py:128: dt = dt if isinstance(dt, date) else date(self._year, *dt)
	observed_holiday_base.py:130: if not self.observed or not self._is_observed(dt):
(call) observed_holiday_base.py:104: _is_observed
	observed_holiday_base.py:105: return self._observed_since is None or self._year >= self._observed_since
	observed_holiday_base.py:133: dt_observed = self._get_observed_date(dt, rule or self._observed_rule)
(call) observed_holiday_base.py:116: _get_observed_date
	observed_holiday_base.py:117: delta = rule.get(dt.weekday(), 0)
	observed_holiday_base.py:118: if delta != 0:
	observed_holiday_base.py:119: if abs(delta) == 7:
	observed_holiday_base.py:120: dt = self._get_next_workday(dt, delta // 7)
(call) observed_holiday_base.py:107: _get_next_workday
	observed_holiday_base.py:108: dt_work = dt + td(days=delta)
	observed_holiday_base.py:109: while dt_work.year == self._year:
	observed_holiday_base.py:110: if dt_work in self or self._is_weekend(dt_work):  # type: ignore[operator]
(call) holiday_base.py:392: __contains__
	holiday_base.py:403: if not isinstance(key, (date, datetime, float, int, str)):
	holiday_base.py:406: return dict.__contains__(cast("Dict[Any, Any]", self), self.__keytransform__(key))
(call) holiday_base.py:532: __keytransform__
	holiday_base.py:546: if type(key) is date:
	holiday_base.py:547: dt = key
	holiday_base.py:573: if self.expand and dt.year not in self.years:
	holiday_base.py:577: return dt
	observed_holiday_base.py:111: dt_work += td(days=delta)
	observed_holiday_base.py:109: while dt_work.year == self._year:
	observed_holiday_base.py:110: if dt_work in self or self._is_weekend(dt_work):  # type: ignore[operator]
(call) holiday_base.py:392: __contains__
	holiday_base.py:403: if not isinstance(key, (date, datetime, float, int, str)):
	holiday_base.py:406: return dict.__contains__(cast("Dict[Any, Any]", self), self.__keytransform__(key))
(call) holiday_base.py:532: __keytransform__
	holiday_base.py:546: if type(key) is date:
	holiday_base.py:547: dt = key
	holiday_base.py:573: if self.expand and dt.year not in self.years:
	holiday_base.py:577: return dt
	observed_holiday_base.py:111: dt_work += td(days=delta)
	observed_holiday_base.py:109: while dt_work.year == self._year:
	observed_holiday_base.py:110: if dt_work in self or self._is_weekend(dt_work):  # type: ignore[operator]
(call) holiday_base.py:392: __contains__
	holiday_base.py:403: if not isinstance(key, (date, datetime, float, int, str)):
	holiday_base.py:406: return dict.__contains__(cast("Dict[Any, Any]", self), self.__keytransform__(key))
(call) holiday_base.py:532: __keytransform__
	holiday_base.py:546: if type(key) is date:
	holiday_base.py:547: dt = key
	holiday_base.py:573: if self.expand and dt.year not in self.years:
	holiday_base.py:577: return dt
(call) holiday_base.py:747: _is_weekend
	holiday_base.py:752: dt = args if len(args) > 1 else args[0]
	holiday_base.py:753: dt = dt if isinstance(dt, date) else date(self._year, *dt)
	holiday_base.py:754: return dt.weekday() in self.weekend
	observed_holiday_base.py:113: return dt_work
	observed_holiday_base.py:123: return dt
	observed_holiday_base.py:134: if dt_observed == dt:
	observed_holiday_base.py:137: estimated_label = self.tr(getattr(self, "estimated_label", ""))
(call) holiday_base.py:418: __getattr__
	holiday_base.py:419: try:
	holiday_base.py:420: return self.__getattribute__(name)
	holiday_base.py:421: except AttributeError as e:
	holiday_base.py:423: add_holiday_prefix = "_add_holiday_"
	holiday_base.py:425: if name[: len(add_holiday_prefix)] != add_holiday_prefix:
	holiday_base.py:426: raise e
	observed_holiday_base.py:138: observed_label = self.tr(
	observed_holiday_base.py:139: getattr(
	observed_holiday_base.py:140: self,
	observed_holiday_base.py:141: "observed_label_before" if dt_observed < dt else "observed_label",
	observed_holiday_base.py:142: self.observed_label,
	observed_holiday_base.py:139: getattr(
	observed_holiday_base.py:138: observed_label = self.tr(
	observed_holiday_base.py:146: estimated_label_text = estimated_label.strip("%s ()")
	observed_holiday_base.py:148: for name in (name,) if name else self.get_list(dt):
	observed_holiday_base.py:149: holiday_name = self.tr(name)
	observed_holiday_base.py:150: observed_estimated_label = None
	observed_holiday_base.py:151: if len(estimated_label_text) > 0 and estimated_label_text in holiday_name:
	observed_holiday_base.py:155: super()._add_holiday(
	observed_holiday_base.py:156: (observed_estimated_label or observed_label) % holiday_name, dt_observed
	observed_holiday_base.py:155: super()._add_holiday(
(call) holiday_base.py:679: _add_holiday
	holiday_base.py:681: if not args:
	holiday_base.py:684: dt = args if len(args) > 1 else args[0]
	holiday_base.py:685: dt = dt if isinstance(dt, date) else date(self._year, *dt)
	holiday_base.py:687: if dt.year != self._year:
	holiday_base.py:690: self[dt] = self.tr(name)
(call) holiday_base.py:621: __setitem__
	holiday_base.py:622: if key in self:
(call) holiday_base.py:392: __contains__
	holiday_base.py:403: if not isinstance(key, (date, datetime, float, int, str)):
	holiday_base.py:406: return dict.__contains__(cast("Dict[Any, Any]", self), self.__keytransform__(key))
(call) holiday_base.py:532: __keytransform__
	holiday_base.py:546: if type(key) is date:
	holiday_base.py:547: dt = key
	holiday_base.py:573: if self.expand and dt.year not in self.years:
	holiday_base.py:577: return dt
	holiday_base.py:629: dict.__setitem__(self, self.__keytransform__(key), value)
(call) holiday_base.py:532: __keytransform__
	holiday_base.py:546: if type(key) is date:
	holiday_base.py:547: dt = key
	holiday_base.py:573: if self.expand and dt.year not in self.years:
	holiday_base.py:577: return dt
	holiday_base.py:691: return dt
	observed_holiday_base.py:148: for name in (name,) if name else self.get_list(dt):
	observed_holiday_base.py:159: return True, dt_observed
	observed_holiday_base.py:175: for name in self.get_list(dt):
	observed_holiday_base.py:171: for dt in sorted(dts):
	observed_holiday_base.py:172: if not self._is_observed(dt):
(call) observed_holiday_base.py:104: _is_observed
	observed_holiday_base.py:105: return self._observed_since is None or self._year >= self._observed_since
	observed_holiday_base.py:174: if multiple:
	observed_holiday_base.py:175: for name in self.get_list(dt):
(call) holiday_base.py:836: get_list
	holiday_base.py:850: return [name for name in self.get(key, "").split(HOLIDAY_NAME_DELIMITER) if name]
(call) holiday_base.py:815: get
	holiday_base.py:834: return dict.get(self, self.__keytransform__(key), default)
(call) holiday_base.py:532: __keytransform__
	holiday_base.py:546: if type(key) is date:
	holiday_base.py:547: dt = key
	holiday_base.py:573: if self.expand and dt.year not in self.years:
	holiday_base.py:577: return dt
(call) holiday_base.py:850: <listcomp>
	holiday_base.py:850: return [name for name in self.get(key, "").split(HOLIDAY_NAME_DELIMITER) if name]
	holiday_base.py:850: return [name for name in self.get(key, "").split(HOLIDAY_NAME_DELIMITER) if name]
	observed_holiday_base.py:176: self._add_observed(dt, name)
(call) observed_holiday_base.py:125: _add_observed
	observed_holiday_base.py:128: dt = dt if isinstance(dt, date) else date(self._year, *dt)
	observed_holiday_base.py:130: if not self.observed or not self._is_observed(dt):
(call) observed_holiday_base.py:104: _is_observed
	observed_holiday_base.py:105: return self._observed_since is None or self._year >= self._observed_since
	observed_holiday_base.py:133: dt_observed = self._get_observed_date(dt, rule or self._observed_rule)
(call) observed_holiday_base.py:116: _get_observed_date
	observed_holiday_base.py:117: delta = rule.get(dt.weekday(), 0)
	observed_holiday_base.py:118: if delta != 0:
	observed_holiday_base.py:123: return dt
	observed_holiday_base.py:134: if dt_observed == dt:
	observed_holiday_base.py:135: return False, dt
	observed_holiday_base.py:175: for name in self.get_list(dt):
	observed_holiday_base.py:171: for dt in sorted(dts):
	observed_holiday_base.py:172: if not self._is_observed(dt):
(call) observed_holiday_base.py:104: _is_observed
	observed_holiday_base.py:105: return self._observed_since is None or self._year >= self._observed_since
	observed_holiday_base.py:174: if multiple:
	observed_holiday_base.py:175: for name in self.get_list(dt):
(call) holiday_base.py:836: get_list
	holiday_base.py:850: return [name for name in self.get(key, "").split(HOLIDAY_NAME_DELIMITER) if name]
(call) holiday_base.py:815: get
	holiday_base.py:834: return dict.get(self, self.__keytransform__(key), default)
(call) holiday_base.py:532: __keytransform__
	holiday_base.py:546: if type(key) is date:
	holiday_base.py:547: dt = key
	holiday_base.py:573: if self.expand and dt.year not in self.years:
	holiday_base.py:577: return dt
(call) holiday_base.py:850: <listcomp>
	holiday_base.py:850: return [name for name in self.get(key, "").split(HOLIDAY_NAME_DELIMITER) if name]
	holiday_base.py:850: return [name for name in self.get(key, "").split(HOLIDAY_NAME_DELIMITER) if name]
	observed_holiday_base.py:176: self._add_observed(dt, name)
(call) observed_holiday_base.py:125: _add_observed
	observed_holiday_base.py:128: dt = dt if isinstance(dt, date) else date(self._year, *dt)
	observed_holiday_base.py:130: if not self.observed or not self._is_observed(dt):
(call) observed_holiday_base.py:104: _is_observed
	observed_holiday_base.py:105: return self._observed_since is None or self._year >= self._observed_since
	observed_holiday_base.py:133: dt_observed = self._get_observed_date(dt, rule or self._observed_rule)
(call) observed_holiday_base.py:116: _get_observed_date
	observed_holiday_base.py:117: delta = rule.get(dt.weekday(), 0)
	observed_holiday_base.py:118: if delta != 0:
	observed_holiday_base.py:123: return dt
	observed_holiday_base.py:134: if dt_observed == dt:
	observed_holiday_base.py:135: return False, dt
	observed_holiday_base.py:175: for name in self.get_list(dt):
	observed_holiday_base.py:171: for dt in sorted(dts):
	observed_holiday_base.py:172: if not self._is_observed(dt):
(call) observed_holiday_base.py:104: _is_observed
	observed_holiday_base.py:105: return self._observed_since is None or self._year >= self._observed_since
	observed_holiday_base.py:174: if multiple:
	observed_holiday_base.py:175: for name in self.get_list(dt):
(call) holiday_base.py:836: get_list
	holiday_base.py:850: return [name for name in self.get(key, "").split(HOLIDAY_NAME_DELIMITER) if name]
(call) holiday_base.py:815: get
	holiday_base.py:834: return dict.get(self, self.__keytransform__(key), default)
(call) holiday_base.py:532: __keytransform__
	holiday_base.py:546: if type(key) is date:
	holiday_base.py:547: dt = key
	holiday_base.py:573: if self.expand and dt.year not in self.years:
	holiday_base.py:577: return dt
(call) holiday_base.py:850: <listcomp>
	holiday_base.py:850: return [name for name in self.get(key, "").split(HOLIDAY_NAME_DELIMITER) if name]
	holiday_base.py:850: return [name for name in self.get(key, "").split(HOLIDAY_NAME_DELIMITER) if name]
	observed_holiday_base.py:176: self._add_observed(dt, name)
(call) observed_holiday_base.py:125: _add_observed
	observed_holiday_base.py:128: dt = dt if isinstance(dt, date) else date(self._year, *dt)
	observed_holiday_base.py:130: if not self.observed or not self._is_observed(dt):
(call) observed_holiday_base.py:104: _is_observed
	observed_holiday_base.py:105: return self._observed_since is None or self._year >= self._observed_since
	observed_holiday_base.py:133: dt_observed = self._get_observed_date(dt, rule or self._observed_rule)
(call) observed_holiday_base.py:116: _get_observed_date
	observed_holiday_base.py:117: delta = rule.get(dt.weekday(), 0)
	observed_holiday_base.py:118: if delta != 0:
	observed_holiday_base.py:123: return dt
	observed_holiday_base.py:134: if dt_observed == dt:
	observed_holiday_base.py:135: return False, dt
	observed_holiday_base.py:175: for name in self.get_list(dt):
	observed_holiday_base.py:171: for dt in sorted(dts):
	observed_holiday_base.py:172: if not self._is_observed(dt):
(call) observed_holiday_base.py:104: _is_observed
	observed_holiday_base.py:105: return self._observed_since is None or self._year >= self._observed_since
	observed_holiday_base.py:174: if multiple:
	observed_holiday_base.py:175: for name in self.get_list(dt):
(call) holiday_base.py:836: get_list
	holiday_base.py:850: return [name for name in self.get(key, "").split(HOLIDAY_NAME_DELIMITER) if name]
(call) holiday_base.py:815: get
	holiday_base.py:834: return dict.get(self, self.__keytransform__(key), default)
(call) holiday_base.py:532: __keytransform__
	holiday_base.py:546: if type(key) is date:
	holiday_base.py:547: dt = key
	holiday_base.py:573: if self.expand and dt.year not in self.years:
	holiday_base.py:577: return dt
(call) holiday_base.py:850: <listcomp>
	holiday_base.py:850: return [name for name in self.get(key, "").split(HOLIDAY_NAME_DELIMITER) if name]
	holiday_base.py:850: return [name for name in self.get(key, "").split(HOLIDAY_NAME_DELIMITER) if name]
	observed_holiday_base.py:176: self._add_observed(dt, name)
(call) observed_holiday_base.py:125: _add_observed
	observed_holiday_base.py:128: dt = dt if isinstance(dt, date) else date(self._year, *dt)
	observed_holiday_base.py:130: if not self.observed or not self._is_observed(dt):
(call) observed_holiday_base.py:104: _is_observed
	observed_holiday_base.py:105: return self._observed_since is None or self._year >= self._observed_since
	observed_holiday_base.py:133: dt_observed = self._get_observed_date(dt, rule or self._observed_rule)
(call) observed_holiday_base.py:116: _get_observed_date
	observed_holiday_base.py:117: delta = rule.get(dt.weekday(), 0)
	observed_holiday_base.py:118: if delta != 0:
	observed_holiday_base.py:123: return dt
	observed_holiday_base.py:134: if dt_observed == dt:
	observed_holiday_base.py:135: return False, dt
	observed_holiday_base.py:175: for name in self.get_list(dt):
	observed_holiday_base.py:171: for dt in sorted(dts):
	observed_holiday_base.py:172: if not self._is_observed(dt):
(call) observed_holiday_base.py:104: _is_observed
	observed_holiday_base.py:105: return self._observed_since is None or self._year >= self._observed_since
	observed_holiday_base.py:174: if multiple:
	observed_holiday_base.py:175: for name in self.get_list(dt):
(call) holiday_base.py:836: get_list
	holiday_base.py:850: return [name for name in self.get(key, "").split(HOLIDAY_NAME_DELIMITER) if name]
(call) holiday_base.py:815: get
	holiday_base.py:834: return dict.get(self, self.__keytransform__(key), default)
(call) holiday_base.py:532: __keytransform__
	holiday_base.py:546: if type(key) is date:
	holiday_base.py:547: dt = key
	holiday_base.py:573: if self.expand and dt.year not in self.years:
	holiday_base.py:577: return dt
(call) holiday_base.py:850: <listcomp>
	holiday_base.py:850: return [name for name in self.get(key, "").split(HOLIDAY_NAME_DELIMITER) if name]
	holiday_base.py:850: return [name for name in self.get(key, "").split(HOLIDAY_NAME_DELIMITER) if name]
	observed_holiday_base.py:176: self._add_observed(dt, name)
(call) observed_holiday_base.py:125: _add_observed
	observed_holiday_base.py:128: dt = dt if isinstance(dt, date) else date(self._year, *dt)
	observed_holiday_base.py:130: if not self.observed or not self._is_observed(dt):
(call) observed_holiday_base.py:104: _is_observed
	observed_holiday_base.py:105: return self._observed_since is None or self._year >= self._observed_since
	observed_holiday_base.py:133: dt_observed = self._get_observed_date(dt, rule or self._observed_rule)
(call) observed_holiday_base.py:116: _get_observed_date
	observed_holiday_base.py:117: delta = rule.get(dt.weekday(), 0)
	observed_holiday_base.py:118: if delta != 0:
	observed_holiday_base.py:123: return dt
	observed_holiday_base.py:134: if dt_observed == dt:
	observed_holiday_base.py:135: return False, dt
	observed_holiday_base.py:175: for name in self.get_list(dt):
	observed_holiday_base.py:171: for dt in sorted(dts):
	observed_holiday_base.py:172: if not self._is_observed(dt):
(call) observed_holiday_base.py:104: _is_observed
	observed_holiday_base.py:105: return self._observed_since is None or self._year >= self._observed_since
	observed_holiday_base.py:174: if multiple:
	observed_holiday_base.py:175: for name in self.get_list(dt):
(call) holiday_base.py:836: get_list
	holiday_base.py:850: return [name for name in self.get(key, "").split(HOLIDAY_NAME_DELIMITER) if name]
(call) holiday_base.py:815: get
	holiday_base.py:834: return dict.get(self, self.__keytransform__(key), default)
(call) holiday_base.py:532: __keytransform__
	holiday_base.py:546: if type(key) is date:
	holiday_base.py:547: dt = key
	holiday_base.py:573: if self.expand and dt.year not in self.years:
	holiday_base.py:577: return dt
(call) holiday_base.py:850: <listcomp>
	holiday_base.py:850: return [name for name in self.get(key, "").split(HOLIDAY_NAME_DELIMITER) if name]
	holiday_base.py:850: return [name for name in self.get(key, "").split(HOLIDAY_NAME_DELIMITER) if name]
	observed_holiday_base.py:176: self._add_observed(dt, name)
(call) observed_holiday_base.py:125: _add_observed
	observed_holiday_base.py:128: dt = dt if isinstance(dt, date) else date(self._year, *dt)
	observed_holiday_base.py:130: if not self.observed or not self._is_observed(dt):
(call) observed_holiday_base.py:104: _is_observed
	observed_holiday_base.py:105: return self._observed_since is None or self._year >= self._observed_since
	observed_holiday_base.py:133: dt_observed = self._get_observed_date(dt, rule or self._observed_rule)
(call) observed_holiday_base.py:116: _get_observed_date
	observed_holiday_base.py:117: delta = rule.get(dt.weekday(), 0)
	observed_holiday_base.py:118: if delta != 0:
	observed_holiday_base.py:123: return dt
	observed_holiday_base.py:134: if dt_observed == dt:
	observed_holiday_base.py:135: return False, dt
	observed_holiday_base.py:175: for name in self.get_list(dt):
	observed_holiday_base.py:171: for dt in sorted(dts):
	observed_holiday_base.py:172: if not self._is_observed(dt):
(call) observed_holiday_base.py:104: _is_observed
	observed_holiday_base.py:105: return self._observed_since is None or self._year >= self._observed_since
	observed_holiday_base.py:174: if multiple:
	observed_holiday_base.py:175: for name in self.get_list(dt):
(call) holiday_base.py:836: get_list
	holiday_base.py:850: return [name for name in self.get(key, "").split(HOLIDAY_NAME_DELIMITER) if name]
(call) holiday_base.py:815: get
	holiday_base.py:834: return dict.get(self, self.__keytransform__(key), default)
(call) holiday_base.py:532: __keytransform__
	holiday_base.py:546: if type(key) is date:
	holiday_base.py:547: dt = key
	holiday_base.py:573: if self.expand and dt.year not in self.years:
	holiday_base.py:577: return dt
(call) holiday_base.py:850: <listcomp>
	holiday_base.py:850: return [name for name in self.get(key, "").split(HOLIDAY_NAME_DELIMITER) if name]
	holiday_base.py:850: return [name for name in self.get(key, "").split(HOLIDAY_NAME_DELIMITER) if name]
	observed_holiday_base.py:176: self._add_observed(dt, name)
(call) observed_holiday_base.py:125: _add_observed
	observed_holiday_base.py:128: dt = dt if isinstance(dt, date) else date(self._year, *dt)
	observed_holiday_base.py:130: if not self.observed or not self._is_observed(dt):
(call) observed_holiday_base.py:104: _is_observed
	observed_holiday_base.py:105: return self._observed_since is None or self._year >= self._observed_since
	observed_holiday_base.py:133: dt_observed = self._get_observed_date(dt, rule or self._observed_rule)
(call) observed_holiday_base.py:116: _get_observed_date
	observed_holiday_base.py:117: delta = rule.get(dt.weekday(), 0)
	observed_holiday_base.py:118: if delta != 0:
	observed_holiday_base.py:119: if abs(delta) == 7:
	observed_holiday_base.py:120: dt = self._get_next_workday(dt, delta // 7)
(call) observed_holiday_base.py:107: _get_next_workday
	observed_holiday_base.py:108: dt_work = dt + td(days=delta)
	observed_holiday_base.py:109: while dt_work.year == self._year:
	observed_holiday_base.py:110: if dt_work in self or self._is_weekend(dt_work):  # type: ignore[operator]
(call) holiday_base.py:392: __contains__
	holiday_base.py:403: if not isinstance(key, (date, datetime, float, int, str)):
	holiday_base.py:406: return dict.__contains__(cast("Dict[Any, Any]", self), self.__keytransform__(key))
(call) holiday_base.py:532: __keytransform__
	holiday_base.py:546: if type(key) is date:
	holiday_base.py:547: dt = key
	holiday_base.py:573: if self.expand and dt.year not in self.years:
	holiday_base.py:577: return dt
	observed_holiday_base.py:111: dt_work += td(days=delta)
	observed_holiday_base.py:109: while dt_work.year == self._year:
	observed_holiday_base.py:110: if dt_work in self or self._is_weekend(dt_work):  # type: ignore[operator]
(call) holiday_base.py:392: __contains__
	holiday_base.py:403: if not isinstance(key, (date, datetime, float, int, str)):
	holiday_base.py:406: return dict.__contains__(cast("Dict[Any, Any]", self), self.__keytransform__(key))
(call) holiday_base.py:532: __keytransform__
	holiday_base.py:546: if type(key) is date:
	holiday_base.py:547: dt = key
	holiday_base.py:573: if self.expand and dt.year not in self.years:
	holiday_base.py:577: return dt
	observed_holiday_base.py:111: dt_work += td(days=delta)
	observed_holiday_base.py:109: while dt_work.year == self._year:
	observed_holiday_base.py:110: if dt_work in self or self._is_weekend(dt_work):  # type: ignore[operator]
(call) holiday_base.py:392: __contains__
	holiday_base.py:403: if not isinstance(key, (date, datetime, float, int, str)):
	holiday_base.py:406: return dict.__contains__(cast("Dict[Any, Any]", self), self.__keytransform__(key))
(call) holiday_base.py:532: __keytransform__
	holiday_base.py:546: if type(key) is date:
	holiday_base.py:547: dt = key
	holiday_base.py:573: if self.expand and dt.year not in self.years:
	holiday_base.py:577: return dt
(call) holiday_base.py:747: _is_weekend
	holiday_base.py:752: dt = args if len(args) > 1 else args[0]
	holiday_base.py:753: dt = dt if isinstance(dt, date) else date(self._year, *dt)
	holiday_base.py:754: return dt.weekday() in self.weekend
	observed_holiday_base.py:113: return dt_work
	observed_holiday_base.py:123: return dt
	observed_holiday_base.py:134: if dt_observed == dt:
	observed_holiday_base.py:137: estimated_label = self.tr(getattr(self, "estimated_label", ""))
(call) holiday_base.py:418: __getattr__
	holiday_base.py:419: try:
	holiday_base.py:420: return self.__getattribute__(name)
	holiday_base.py:421: except AttributeError as e:
	holiday_base.py:423: add_holiday_prefix = "_add_holiday_"
	holiday_base.py:425: if name[: len(add_holiday_prefix)] != add_holiday_prefix:
	holiday_base.py:426: raise e
	observed_holiday_base.py:138: observed_label = self.tr(
	observed_holiday_base.py:139: getattr(
	observed_holiday_base.py:140: self,
	observed_holiday_base.py:141: "observed_label_before" if dt_observed < dt else "observed_label",
	observed_holiday_base.py:142: self.observed_label,
	observed_holiday_base.py:139: getattr(
	observed_holiday_base.py:138: observed_label = self.tr(
	observed_holiday_base.py:146: estimated_label_text = estimated_label.strip("%s ()")
	observed_holiday_base.py:148: for name in (name,) if name else self.get_list(dt):
	observed_holiday_base.py:149: holiday_name = self.tr(name)
	observed_holiday_base.py:150: observed_estimated_label = None
	observed_holiday_base.py:151: if len(estimated_label_text) > 0 and estimated_label_text in holiday_name:
	observed_holiday_base.py:155: super()._add_holiday(
	observed_holiday_base.py:156: (observed_estimated_label or observed_label) % holiday_name, dt_observed
	observed_holiday_base.py:155: super()._add_holiday(
(call) holiday_base.py:679: _add_holiday
	holiday_base.py:681: if not args:
	holiday_base.py:684: dt = args if len(args) > 1 else args[0]
	holiday_base.py:685: dt = dt if isinstance(dt, date) else date(self._year, *dt)
	holiday_base.py:687: if dt.year != self._year:
	holiday_base.py:690: self[dt] = self.tr(name)
(call) holiday_base.py:621: __setitem__
	holiday_base.py:622: if key in self:
(call) holiday_base.py:392: __contains__
	holiday_base.py:403: if not isinstance(key, (date, datetime, float, int, str)):
	holiday_base.py:406: return dict.__contains__(cast("Dict[Any, Any]", self), self.__keytransform__(key))
(call) holiday_base.py:532: __keytransform__
	holiday_base.py:546: if type(key) is date:
	holiday_base.py:547: dt = key
	holiday_base.py:573: if self.expand and dt.year not in self.years:
	holiday_base.py:577: return dt
	holiday_base.py:629: dict.__setitem__(self, self.__keytransform__(key), value)
(call) holiday_base.py:532: __keytransform__
	holiday_base.py:546: if type(key) is date:
	holiday_base.py:547: dt = key
	holiday_base.py:573: if self.expand and dt.year not in self.years:
	holiday_base.py:577: return dt
	holiday_base.py:691: return dt
	observed_holiday_base.py:148: for name in (name,) if name else self.get_list(dt):
	observed_holiday_base.py:159: return True, dt_observed
	observed_holiday_base.py:175: for name in self.get_list(dt):
	observed_holiday_base.py:171: for dt in sorted(dts):
	observed_holiday_base.py:172: if not self._is_observed(dt):
(call) observed_holiday_base.py:104: _is_observed
	observed_holiday_base.py:105: return self._observed_since is None or self._year >= self._observed_since
	observed_holiday_base.py:174: if multiple:
	observed_holiday_base.py:175: for name in self.get_list(dt):
(call) holiday_base.py:836: get_list
	holiday_base.py:850: return [name for name in self.get(key, "").split(HOLIDAY_NAME_DELIMITER) if name]
(call) holiday_base.py:815: get
	holiday_base.py:834: return dict.get(self, self.__keytransform__(key), default)
(call) holiday_base.py:532: __keytransform__
	holiday_base.py:546: if type(key) is date:
	holiday_base.py:547: dt = key
	holiday_base.py:573: if self.expand and dt.year not in self.years:
	holiday_base.py:577: return dt
(call) holiday_base.py:850: <listcomp>
	holiday_base.py:850: return [name for name in self.get(key, "").split(HOLIDAY_NAME_DELIMITER) if name]
	holiday_base.py:850: return [name for name in self.get(key, "").split(HOLIDAY_NAME_DELIMITER) if name]
	observed_holiday_base.py:176: self._add_observed(dt, name)
(call) observed_holiday_base.py:125: _add_observed
	observed_holiday_base.py:128: dt = dt if isinstance(dt, date) else date(self._year, *dt)
	observed_holiday_base.py:130: if not self.observed or not self._is_observed(dt):
(call) observed_holiday_base.py:104: _is_observed
	observed_holiday_base.py:105: return self._observed_since is None or self._year >= self._observed_since
	observed_holiday_base.py:133: dt_observed = self._get_observed_date(dt, rule or self._observed_rule)
(call) observed_holiday_base.py:116: _get_observed_date
	observed_holiday_base.py:117: delta = rule.get(dt.weekday(), 0)
	observed_holiday_base.py:118: if delta != 0:
	observed_holiday_base.py:123: return dt
	observed_holiday_base.py:134: if dt_observed == dt:
	observed_holiday_base.py:135: return False, dt
	observed_holiday_base.py:175: for name in self.get_list(dt):
	observed_holiday_base.py:171: for dt in sorted(dts):
	observed_holiday_base.py:172: if not self._is_observed(dt):
(call) observed_holiday_base.py:104: _is_observed
	observed_holiday_base.py:105: return self._observed_since is None or self._year >= self._observed_since
	observed_holiday_base.py:174: if multiple:
	observed_holiday_base.py:175: for name in self.get_list(dt):
(call) holiday_base.py:836: get_list
	holiday_base.py:850: return [name for name in self.get(key, "").split(HOLIDAY_NAME_DELIMITER) if name]
(call) holiday_base.py:815: get
	holiday_base.py:834: return dict.get(self, self.__keytransform__(key), default)
(call) holiday_base.py:532: __keytransform__
	holiday_base.py:546: if type(key) is date:
	holiday_base.py:547: dt = key
	holiday_base.py:573: if self.expand and dt.year not in self.years:
	holiday_base.py:577: return dt
(call) holiday_base.py:850: <listcomp>
	holiday_base.py:850: return [name for name in self.get(key, "").split(HOLIDAY_NAME_DELIMITER) if name]
	holiday_base.py:850: return [name for name in self.get(key, "").split(HOLIDAY_NAME_DELIMITER) if name]
	observed_holiday_base.py:176: self._add_observed(dt, name)
(call) observed_holiday_base.py:125: _add_observed
	observed_holiday_base.py:128: dt = dt if isinstance(dt, date) else date(self._year, *dt)
	observed_holiday_base.py:130: if not self.observed or not self._is_observed(dt):
(call) observed_holiday_base.py:104: _is_observed
	observed_holiday_base.py:105: return self._observed_since is None or self._year >= self._observed_since
	observed_holiday_base.py:133: dt_observed = self._get_observed_date(dt, rule or self._observed_rule)
(call) observed_holiday_base.py:116: _get_observed_date
	observed_holiday_base.py:117: delta = rule.get(dt.weekday(), 0)
	observed_holiday_base.py:118: if delta != 0:
	observed_holiday_base.py:123: return dt
	observed_holiday_base.py:134: if dt_observed == dt:
	observed_holiday_base.py:135: return False, dt
	observed_holiday_base.py:175: for name in self.get_list(dt):
	observed_holiday_base.py:171: for dt in sorted(dts):
	holiday_base.py:779: for category in self._sorted_categories:
	holiday_base.py:783: if self.has_special_holidays:
	holiday_base.py:784: self._add_special_holidays(
	holiday_base.py:785: f"special_{category}_holidays" for category in self._sorted_categories
	holiday_base.py:784: self._add_special_holidays(
(call) holiday_base.py:693: _add_special_holidays
	holiday_base.py:695: for mapping_name in mapping_names:
(call) holiday_base.py:784: <genexpr>
	holiday_base.py:784: self._add_special_holidays(
	holiday_base.py:785: f"special_{category}_holidays" for category in self._sorted_categories
	holiday_base.py:784: self._add_special_holidays(
	holiday_base.py:696: for data in _normalize_tuple(getattr(self, mapping_name, {}).get(self._year, ())):
(call) helpers.py:32: _normalize_tuple
	helpers.py:42: return data if not data or isinstance(data[0], tuple) else (data,)
	holiday_base.py:697: if len(data) == 3:  # Special holidays.
	holiday_base.py:707: to_month, to_day, from_month, from_day, *optional = data
	holiday_base.py:708: self._add_holiday(
	holiday_base.py:709: self.tr(self.substituted_label)
	holiday_base.py:710: % date(
	holiday_base.py:711: optional[0] if optional else self._year, from_month, from_day
	holiday_base.py:710: % date(
	holiday_base.py:712: ).strftime(self.tr(self.substituted_date_format)),
	holiday_base.py:709: self.tr(self.substituted_label)
	holiday_base.py:713: to_month,
	holiday_base.py:714: to_day,
	holiday_base.py:708: self._add_holiday(
(call) holiday_base.py:679: _add_holiday
	holiday_base.py:681: if not args:
	holiday_base.py:684: dt = args if len(args) > 1 else args[0]
	holiday_base.py:685: dt = dt if isinstance(dt, date) else date(self._year, *dt)
	holiday_base.py:687: if dt.year != self._year:
	holiday_base.py:690: self[dt] = self.tr(name)
(call) holiday_base.py:621: __setitem__
	holiday_base.py:622: if key in self:
(call) holiday_base.py:392: __contains__
	holiday_base.py:403: if not isinstance(key, (date, datetime, float, int, str)):
	holiday_base.py:406: return dict.__contains__(cast("Dict[Any, Any]", self), self.__keytransform__(key))
(call) holiday_base.py:532: __keytransform__
	holiday_base.py:546: if type(key) is date:
	holiday_base.py:547: dt = key
	holiday_base.py:573: if self.expand and dt.year not in self.years:
	holiday_base.py:577: return dt
	holiday_base.py:629: dict.__setitem__(self, self.__keytransform__(key), value)
(call) holiday_base.py:532: __keytransform__
	holiday_base.py:546: if type(key) is date:
	holiday_base.py:547: dt = key
	holiday_base.py:573: if self.expand and dt.year not in self.years:
	holiday_base.py:577: return dt
	holiday_base.py:691: return dt
	holiday_base.py:696: for data in _normalize_tuple(getattr(self, mapping_name, {}).get(self._year, ())):
	holiday_base.py:697: if len(data) == 3:  # Special holidays.
	holiday_base.py:707: to_month, to_day, from_month, from_day, *optional = data
	holiday_base.py:708: self._add_holiday(
	holiday_base.py:709: self.tr(self.substituted_label)
	holiday_base.py:710: % date(
	holiday_base.py:711: optional[0] if optional else self._year, from_month, from_day
	holiday_base.py:710: % date(
	holiday_base.py:712: ).strftime(self.tr(self.substituted_date_format)),
	holiday_base.py:709: self.tr(self.substituted_label)
	holiday_base.py:713: to_month,
	holiday_base.py:714: to_day,
	holiday_base.py:708: self._add_holiday(
(call) holiday_base.py:679: _add_holiday
	holiday_base.py:681: if not args:
	holiday_base.py:684: dt = args if len(args) > 1 else args[0]
	holiday_base.py:685: dt = dt if isinstance(dt, date) else date(self._year, *dt)
	holiday_base.py:687: if dt.year != self._year:
	holiday_base.py:690: self[dt] = self.tr(name)
(call) holiday_base.py:621: __setitem__
	holiday_base.py:622: if key in self:
(call) holiday_base.py:392: __contains__
	holiday_base.py:403: if not isinstance(key, (date, datetime, float, int, str)):
	holiday_base.py:406: return dict.__contains__(cast("Dict[Any, Any]", self), self.__keytransform__(key))
(call) holiday_base.py:532: __keytransform__
	holiday_base.py:546: if type(key) is date:
	holiday_base.py:547: dt = key
	holiday_base.py:573: if self.expand and dt.year not in self.years:
	holiday_base.py:577: return dt
	holiday_base.py:629: dict.__setitem__(self, self.__keytransform__(key), value)
(call) holiday_base.py:532: __keytransform__
	holiday_base.py:546: if type(key) is date:
	holiday_base.py:547: dt = key
	holiday_base.py:573: if self.expand and dt.year not in self.years:
	holiday_base.py:577: return dt
	holiday_base.py:691: return dt
	holiday_base.py:696: for data in _normalize_tuple(getattr(self, mapping_name, {}).get(self._year, ())):
	holiday_base.py:697: if len(data) == 3:  # Special holidays.
	holiday_base.py:707: to_month, to_day, from_month, from_day, *optional = data
	holiday_base.py:708: self._add_holiday(
	holiday_base.py:709: self.tr(self.substituted_label)
	holiday_base.py:710: % date(
	holiday_base.py:711: optional[0] if optional else self._year, from_month, from_day
	holiday_base.py:710: % date(
	holiday_base.py:712: ).strftime(self.tr(self.substituted_date_format)),
	holiday_base.py:709: self.tr(self.substituted_label)
	holiday_base.py:713: to_month,
	holiday_base.py:714: to_day,
	holiday_base.py:708: self._add_holiday(
(call) holiday_base.py:679: _add_holiday
	holiday_base.py:681: if not args:
	holiday_base.py:684: dt = args if len(args) > 1 else args[0]
	holiday_base.py:685: dt = dt if isinstance(dt, date) else date(self._year, *dt)
	holiday_base.py:687: if dt.year != self._year:
	holiday_base.py:690: self[dt] = self.tr(name)
(call) holiday_base.py:621: __setitem__
	holiday_base.py:622: if key in self:
(call) holiday_base.py:392: __contains__
	holiday_base.py:403: if not isinstance(key, (date, datetime, float, int, str)):
	holiday_base.py:406: return dict.__contains__(cast("Dict[Any, Any]", self), self.__keytransform__(key))
(call) holiday_base.py:532: __keytransform__
	holiday_base.py:546: if type(key) is date:
	holiday_base.py:547: dt = key
	holiday_base.py:573: if self.expand and dt.year not in self.years:
	holiday_base.py:577: return dt
	holiday_base.py:629: dict.__setitem__(self, self.__keytransform__(key), value)
(call) holiday_base.py:532: __keytransform__
	holiday_base.py:546: if type(key) is date:
	holiday_base.py:547: dt = key
	holiday_base.py:573: if self.expand and dt.year not in self.years:
	holiday_base.py:577: return dt
	holiday_base.py:691: return dt
	holiday_base.py:696: for data in _normalize_tuple(getattr(self, mapping_name, {}).get(self._year, ())):
	holiday_base.py:697: if len(data) == 3:  # Special holidays.
	holiday_base.py:707: to_month, to_day, from_month, from_day, *optional = data
	holiday_base.py:708: self._add_holiday(
	holiday_base.py:709: self.tr(self.substituted_label)
	holiday_base.py:710: % date(
	holiday_base.py:711: optional[0] if optional else self._year, from_month, from_day
	holiday_base.py:710: % date(
	holiday_base.py:712: ).strftime(self.tr(self.substituted_date_format)),
	holiday_base.py:709: self.tr(self.substituted_label)
	holiday_base.py:713: to_month,
	holiday_base.py:714: to_day,
	holiday_base.py:708: self._add_holiday(
(call) holiday_base.py:679: _add_holiday
	holiday_base.py:681: if not args:
	holiday_base.py:684: dt = args if len(args) > 1 else args[0]
	holiday_base.py:685: dt = dt if isinstance(dt, date) else date(self._year, *dt)
	holiday_base.py:687: if dt.year != self._year:
	holiday_base.py:690: self[dt] = self.tr(name)
(call) holiday_base.py:621: __setitem__
	holiday_base.py:622: if key in self:
(call) holiday_base.py:392: __contains__
	holiday_base.py:403: if not isinstance(key, (date, datetime, float, int, str)):
	holiday_base.py:406: return dict.__contains__(cast("Dict[Any, Any]", self), self.__keytransform__(key))
(call) holiday_base.py:532: __keytransform__
	holiday_base.py:546: if type(key) is date:
	holiday_base.py:547: dt = key
	holiday_base.py:573: if self.expand and dt.year not in self.years:
	holiday_base.py:577: return dt
	holiday_base.py:629: dict.__setitem__(self, self.__keytransform__(key), value)
(call) holiday_base.py:532: __keytransform__
	holiday_base.py:546: if type(key) is date:
	holiday_base.py:547: dt = key
	holiday_base.py:573: if self.expand and dt.year not in self.years:
	holiday_base.py:577: return dt
	holiday_base.py:691: return dt
	holiday_base.py:696: for data in _normalize_tuple(getattr(self, mapping_name, {}).get(self._year, ())):
	holiday_base.py:697: if len(data) == 3:  # Special holidays.
	holiday_base.py:707: to_month, to_day, from_month, from_day, *optional = data
	holiday_base.py:708: self._add_holiday(
	holiday_base.py:709: self.tr(self.substituted_label)
	holiday_base.py:710: % date(
	holiday_base.py:711: optional[0] if optional else self._year, from_month, from_day
	holiday_base.py:710: % date(
	holiday_base.py:712: ).strftime(self.tr(self.substituted_date_format)),
	holiday_base.py:709: self.tr(self.substituted_label)
	holiday_base.py:713: to_month,
	holiday_base.py:714: to_day,
	holiday_base.py:708: self._add_holiday(
(call) holiday_base.py:679: _add_holiday
	holiday_base.py:681: if not args:
	holiday_base.py:684: dt = args if len(args) > 1 else args[0]
	holiday_base.py:685: dt = dt if isinstance(dt, date) else date(self._year, *dt)
	holiday_base.py:687: if dt.year != self._year:
	holiday_base.py:690: self[dt] = self.tr(name)
(call) holiday_base.py:621: __setitem__
	holiday_base.py:622: if key in self:
(call) holiday_base.py:392: __contains__
	holiday_base.py:403: if not isinstance(key, (date, datetime, float, int, str)):
	holiday_base.py:406: return dict.__contains__(cast("Dict[Any, Any]", self), self.__keytransform__(key))
(call) holiday_base.py:532: __keytransform__
	holiday_base.py:546: if type(key) is date:
	holiday_base.py:547: dt = key
	holiday_base.py:573: if self.expand and dt.year not in self.years:
	holiday_base.py:577: return dt
	holiday_base.py:629: dict.__setitem__(self, self.__keytransform__(key), value)
(call) holiday_base.py:532: __keytransform__
	holiday_base.py:546: if type(key) is date:
	holiday_base.py:547: dt = key
	holiday_base.py:573: if self.expand and dt.year not in self.years:
	holiday_base.py:577: return dt
	holiday_base.py:691: return dt
	holiday_base.py:696: for data in _normalize_tuple(getattr(self, mapping_name, {}).get(self._year, ())):
	holiday_base.py:697: if len(data) == 3:  # Special holidays.
	holiday_base.py:707: to_month, to_day, from_month, from_day, *optional = data
	holiday_base.py:708: self._add_holiday(
	holiday_base.py:709: self.tr(self.substituted_label)
	holiday_base.py:710: % date(
	holiday_base.py:711: optional[0] if optional else self._year, from_month, from_day
	holiday_base.py:710: % date(
	holiday_base.py:712: ).strftime(self.tr(self.substituted_date_format)),
	holiday_base.py:709: self.tr(self.substituted_label)
	holiday_base.py:713: to_month,
	holiday_base.py:714: to_day,
	holiday_base.py:708: self._add_holiday(
(call) holiday_base.py:679: _add_holiday
	holiday_base.py:681: if not args:
	holiday_base.py:684: dt = args if len(args) > 1 else args[0]
	holiday_base.py:685: dt = dt if isinstance(dt, date) else date(self._year, *dt)
	holiday_base.py:687: if dt.year != self._year:
	holiday_base.py:690: self[dt] = self.tr(name)
(call) holiday_base.py:621: __setitem__
	holiday_base.py:622: if key in self:
(call) holiday_base.py:392: __contains__
	holiday_base.py:403: if not isinstance(key, (date, datetime, float, int, str)):
	holiday_base.py:406: return dict.__contains__(cast("Dict[Any, Any]", self), self.__keytransform__(key))
(call) holiday_base.py:532: __keytransform__
	holiday_base.py:546: if type(key) is date:
	holiday_base.py:547: dt = key
	holiday_base.py:573: if self.expand and dt.year not in self.years:
	holiday_base.py:577: return dt
	holiday_base.py:629: dict.__setitem__(self, self.__keytransform__(key), value)
(call) holiday_base.py:532: __keytransform__
	holiday_base.py:546: if type(key) is date:
	holiday_base.py:547: dt = key
	holiday_base.py:573: if self.expand and dt.year not in self.years:
	holiday_base.py:577: return dt
	holiday_base.py:691: return dt
	holiday_base.py:696: for data in _normalize_tuple(getattr(self, mapping_name, {}).get(self._year, ())):
	holiday_base.py:697: if len(data) == 3:  # Special holidays.
	holiday_base.py:707: to_month, to_day, from_month, from_day, *optional = data
	holiday_base.py:708: self._add_holiday(
	holiday_base.py:709: self.tr(self.substituted_label)
	holiday_base.py:710: % date(
	holiday_base.py:711: optional[0] if optional else self._year, from_month, from_day
	holiday_base.py:710: % date(
	holiday_base.py:712: ).strftime(self.tr(self.substituted_date_format)),
	holiday_base.py:709: self.tr(self.substituted_label)
	holiday_base.py:713: to_month,
	holiday_base.py:714: to_day,
	holiday_base.py:708: self._add_holiday(
(call) holiday_base.py:679: _add_holiday
	holiday_base.py:681: if not args:
	holiday_base.py:684: dt = args if len(args) > 1 else args[0]
	holiday_base.py:685: dt = dt if isinstance(dt, date) else date(self._year, *dt)
	holiday_base.py:687: if dt.year != self._year:
	holiday_base.py:690: self[dt] = self.tr(name)
(call) holiday_base.py:621: __setitem__
	holiday_base.py:622: if key in self:
(call) holiday_base.py:392: __contains__
	holiday_base.py:403: if not isinstance(key, (date, datetime, float, int, str)):
	holiday_base.py:406: return dict.__contains__(cast("Dict[Any, Any]", self), self.__keytransform__(key))
(call) holiday_base.py:532: __keytransform__
	holiday_base.py:546: if type(key) is date:
	holiday_base.py:547: dt = key
	holiday_base.py:573: if self.expand and dt.year not in self.years:
	holiday_base.py:577: return dt
	holiday_base.py:629: dict.__setitem__(self, self.__keytransform__(key), value)
(call) holiday_base.py:532: __keytransform__
	holiday_base.py:546: if type(key) is date:
	holiday_base.py:547: dt = key
	holiday_base.py:573: if self.expand and dt.year not in self.years:
	holiday_base.py:577: return dt
	holiday_base.py:691: return dt
	holiday_base.py:696: for data in _normalize_tuple(getattr(self, mapping_name, {}).get(self._year, ())):
	holiday_base.py:695: for mapping_name in mapping_names:
(call) holiday_base.py:784: <genexpr>
	holiday_base.py:784: self._add_special_holidays(
	observed_holiday_base.py:184: if not self.observed or not self.has_special_holidays:
	observed_holiday_base.py:187: self._add_special_holidays(
	observed_holiday_base.py:188: (f"special_{category}_holidays_observed" for category in self._sorted_categories),
	observed_holiday_base.py:189: observed=True,
	observed_holiday_base.py:187: self._add_special_holidays(
(call) holiday_base.py:693: _add_special_holidays
	holiday_base.py:695: for mapping_name in mapping_names:
(call) observed_holiday_base.py:188: <genexpr>
	observed_holiday_base.py:188: (f"special_{category}_holidays_observed" for category in self._sorted_categories),
	holiday_base.py:696: for data in _normalize_tuple(getattr(self, mapping_name, {}).get(self._year, ())):
(call) helpers.py:32: _normalize_tuple
	helpers.py:42: return data if not data or isinstance(data[0], tuple) else (data,)
	holiday_base.py:695: for mapping_name in mapping_names:
(call) observed_holiday_base.py:188: <genexpr>
	observed_holiday_base.py:188: (f"special_{category}_holidays_observed" for category in self._sorted_categories),
	holiday_base.py:775: self._populate_subdiv_holidays()
(call) observed_holiday_base.py:192: _populate_subdiv_holidays
	observed_holiday_base.py:194: super()._populate_subdiv_holidays()
(call) holiday_base.py:788: _populate_subdiv_holidays
	holiday_base.py:790: if self.subdiv is None:
	holiday_base.py:791: return None
	observed_holiday_base.py:196: if not self.subdiv or not self.observed or not self.has_special_holidays:
	observed_holiday_base.py:197: return None
	holiday_base.py:577: return dt
